
bootLoader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ccd0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  0800ce80  0800ce80  0001ce80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cf04  0800cf04  000200a0  2**0
                  CONTENTS
  4 .ARM          00000008  0800cf04  0800cf04  0001cf04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cf0c  0800cf0c  000200a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cf0c  0800cf0c  0001cf0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cf10  0800cf10  0001cf10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  0800cf14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008e60  200000a0  0800cfb4  000200a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20008f00  0800cfb4  00028f00  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002e33b  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005d66  00000000  00000000  0004e40b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002400  00000000  00000000  00054178  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000021a0  00000000  00000000  00056578  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002c80a  00000000  00000000  00058718  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00020288  00000000  00000000  00084f22  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f32e9  00000000  00000000  000a51aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00198493  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000099f0  00000000  00000000  00198510  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000a0 	.word	0x200000a0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800ce68 	.word	0x0800ce68

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000a4 	.word	0x200000a4
 80001ec:	0800ce68 	.word	0x0800ce68

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000200:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000204:	f000 b972 	b.w	80004ec <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9e08      	ldr	r6, [sp, #32]
 8000226:	4604      	mov	r4, r0
 8000228:	4688      	mov	r8, r1
 800022a:	2b00      	cmp	r3, #0
 800022c:	d14b      	bne.n	80002c6 <__udivmoddi4+0xa6>
 800022e:	428a      	cmp	r2, r1
 8000230:	4615      	mov	r5, r2
 8000232:	d967      	bls.n	8000304 <__udivmoddi4+0xe4>
 8000234:	fab2 f282 	clz	r2, r2
 8000238:	b14a      	cbz	r2, 800024e <__udivmoddi4+0x2e>
 800023a:	f1c2 0720 	rsb	r7, r2, #32
 800023e:	fa01 f302 	lsl.w	r3, r1, r2
 8000242:	fa20 f707 	lsr.w	r7, r0, r7
 8000246:	4095      	lsls	r5, r2
 8000248:	ea47 0803 	orr.w	r8, r7, r3
 800024c:	4094      	lsls	r4, r2
 800024e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000252:	0c23      	lsrs	r3, r4, #16
 8000254:	fbb8 f7fe 	udiv	r7, r8, lr
 8000258:	fa1f fc85 	uxth.w	ip, r5
 800025c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000260:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000264:	fb07 f10c 	mul.w	r1, r7, ip
 8000268:	4299      	cmp	r1, r3
 800026a:	d909      	bls.n	8000280 <__udivmoddi4+0x60>
 800026c:	18eb      	adds	r3, r5, r3
 800026e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000272:	f080 811b 	bcs.w	80004ac <__udivmoddi4+0x28c>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 8118 	bls.w	80004ac <__udivmoddi4+0x28c>
 800027c:	3f02      	subs	r7, #2
 800027e:	442b      	add	r3, r5
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0fe 	udiv	r0, r3, lr
 8000288:	fb0e 3310 	mls	r3, lr, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 fc0c 	mul.w	ip, r0, ip
 8000294:	45a4      	cmp	ip, r4
 8000296:	d909      	bls.n	80002ac <__udivmoddi4+0x8c>
 8000298:	192c      	adds	r4, r5, r4
 800029a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800029e:	f080 8107 	bcs.w	80004b0 <__udivmoddi4+0x290>
 80002a2:	45a4      	cmp	ip, r4
 80002a4:	f240 8104 	bls.w	80004b0 <__udivmoddi4+0x290>
 80002a8:	3802      	subs	r0, #2
 80002aa:	442c      	add	r4, r5
 80002ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002b0:	eba4 040c 	sub.w	r4, r4, ip
 80002b4:	2700      	movs	r7, #0
 80002b6:	b11e      	cbz	r6, 80002c0 <__udivmoddi4+0xa0>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c6 4300 	strd	r4, r3, [r6]
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xbe>
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	f000 80eb 	beq.w	80004a6 <__udivmoddi4+0x286>
 80002d0:	2700      	movs	r7, #0
 80002d2:	e9c6 0100 	strd	r0, r1, [r6]
 80002d6:	4638      	mov	r0, r7
 80002d8:	4639      	mov	r1, r7
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f783 	clz	r7, r3
 80002e2:	2f00      	cmp	r7, #0
 80002e4:	d147      	bne.n	8000376 <__udivmoddi4+0x156>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd0>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80fa 	bhi.w	80004e4 <__udivmoddi4+0x2c4>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	4698      	mov	r8, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa0>
 80002fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa0>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xe8>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 808f 	bne.w	8000430 <__udivmoddi4+0x210>
 8000312:	1b49      	subs	r1, r1, r5
 8000314:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000318:	fa1f f885 	uxth.w	r8, r5
 800031c:	2701      	movs	r7, #1
 800031e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fb0e 111c 	mls	r1, lr, ip, r1
 8000328:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800032c:	fb08 f10c 	mul.w	r1, r8, ip
 8000330:	4299      	cmp	r1, r3
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x124>
 8000334:	18eb      	adds	r3, r5, r3
 8000336:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x122>
 800033c:	4299      	cmp	r1, r3
 800033e:	f200 80cd 	bhi.w	80004dc <__udivmoddi4+0x2bc>
 8000342:	4684      	mov	ip, r0
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	b2a3      	uxth	r3, r4
 8000348:	fbb1 f0fe 	udiv	r0, r1, lr
 800034c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000350:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000354:	fb08 f800 	mul.w	r8, r8, r0
 8000358:	45a0      	cmp	r8, r4
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x14c>
 800035c:	192c      	adds	r4, r5, r4
 800035e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x14a>
 8000364:	45a0      	cmp	r8, r4
 8000366:	f200 80b6 	bhi.w	80004d6 <__udivmoddi4+0x2b6>
 800036a:	4618      	mov	r0, r3
 800036c:	eba4 0408 	sub.w	r4, r4, r8
 8000370:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000374:	e79f      	b.n	80002b6 <__udivmoddi4+0x96>
 8000376:	f1c7 0c20 	rsb	ip, r7, #32
 800037a:	40bb      	lsls	r3, r7
 800037c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000380:	ea4e 0e03 	orr.w	lr, lr, r3
 8000384:	fa01 f407 	lsl.w	r4, r1, r7
 8000388:	fa20 f50c 	lsr.w	r5, r0, ip
 800038c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000390:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000394:	4325      	orrs	r5, r4
 8000396:	fbb3 f9f8 	udiv	r9, r3, r8
 800039a:	0c2c      	lsrs	r4, r5, #16
 800039c:	fb08 3319 	mls	r3, r8, r9, r3
 80003a0:	fa1f fa8e 	uxth.w	sl, lr
 80003a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003a8:	fb09 f40a 	mul.w	r4, r9, sl
 80003ac:	429c      	cmp	r4, r3
 80003ae:	fa02 f207 	lsl.w	r2, r2, r7
 80003b2:	fa00 f107 	lsl.w	r1, r0, r7
 80003b6:	d90b      	bls.n	80003d0 <__udivmoddi4+0x1b0>
 80003b8:	eb1e 0303 	adds.w	r3, lr, r3
 80003bc:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003c0:	f080 8087 	bcs.w	80004d2 <__udivmoddi4+0x2b2>
 80003c4:	429c      	cmp	r4, r3
 80003c6:	f240 8084 	bls.w	80004d2 <__udivmoddi4+0x2b2>
 80003ca:	f1a9 0902 	sub.w	r9, r9, #2
 80003ce:	4473      	add	r3, lr
 80003d0:	1b1b      	subs	r3, r3, r4
 80003d2:	b2ad      	uxth	r5, r5
 80003d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003d8:	fb08 3310 	mls	r3, r8, r0, r3
 80003dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003e4:	45a2      	cmp	sl, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x1da>
 80003e8:	eb1e 0404 	adds.w	r4, lr, r4
 80003ec:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003f0:	d26b      	bcs.n	80004ca <__udivmoddi4+0x2aa>
 80003f2:	45a2      	cmp	sl, r4
 80003f4:	d969      	bls.n	80004ca <__udivmoddi4+0x2aa>
 80003f6:	3802      	subs	r0, #2
 80003f8:	4474      	add	r4, lr
 80003fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000402:	eba4 040a 	sub.w	r4, r4, sl
 8000406:	454c      	cmp	r4, r9
 8000408:	46c2      	mov	sl, r8
 800040a:	464b      	mov	r3, r9
 800040c:	d354      	bcc.n	80004b8 <__udivmoddi4+0x298>
 800040e:	d051      	beq.n	80004b4 <__udivmoddi4+0x294>
 8000410:	2e00      	cmp	r6, #0
 8000412:	d069      	beq.n	80004e8 <__udivmoddi4+0x2c8>
 8000414:	ebb1 050a 	subs.w	r5, r1, sl
 8000418:	eb64 0403 	sbc.w	r4, r4, r3
 800041c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000420:	40fd      	lsrs	r5, r7
 8000422:	40fc      	lsrs	r4, r7
 8000424:	ea4c 0505 	orr.w	r5, ip, r5
 8000428:	e9c6 5400 	strd	r5, r4, [r6]
 800042c:	2700      	movs	r7, #0
 800042e:	e747      	b.n	80002c0 <__udivmoddi4+0xa0>
 8000430:	f1c2 0320 	rsb	r3, r2, #32
 8000434:	fa20 f703 	lsr.w	r7, r0, r3
 8000438:	4095      	lsls	r5, r2
 800043a:	fa01 f002 	lsl.w	r0, r1, r2
 800043e:	fa21 f303 	lsr.w	r3, r1, r3
 8000442:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000446:	4338      	orrs	r0, r7
 8000448:	0c01      	lsrs	r1, r0, #16
 800044a:	fbb3 f7fe 	udiv	r7, r3, lr
 800044e:	fa1f f885 	uxth.w	r8, r5
 8000452:	fb0e 3317 	mls	r3, lr, r7, r3
 8000456:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045a:	fb07 f308 	mul.w	r3, r7, r8
 800045e:	428b      	cmp	r3, r1
 8000460:	fa04 f402 	lsl.w	r4, r4, r2
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x256>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800046c:	d22f      	bcs.n	80004ce <__udivmoddi4+0x2ae>
 800046e:	428b      	cmp	r3, r1
 8000470:	d92d      	bls.n	80004ce <__udivmoddi4+0x2ae>
 8000472:	3f02      	subs	r7, #2
 8000474:	4429      	add	r1, r5
 8000476:	1acb      	subs	r3, r1, r3
 8000478:	b281      	uxth	r1, r0
 800047a:	fbb3 f0fe 	udiv	r0, r3, lr
 800047e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000482:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000486:	fb00 f308 	mul.w	r3, r0, r8
 800048a:	428b      	cmp	r3, r1
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x27e>
 800048e:	1869      	adds	r1, r5, r1
 8000490:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000494:	d217      	bcs.n	80004c6 <__udivmoddi4+0x2a6>
 8000496:	428b      	cmp	r3, r1
 8000498:	d915      	bls.n	80004c6 <__udivmoddi4+0x2a6>
 800049a:	3802      	subs	r0, #2
 800049c:	4429      	add	r1, r5
 800049e:	1ac9      	subs	r1, r1, r3
 80004a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004a4:	e73b      	b.n	800031e <__udivmoddi4+0xfe>
 80004a6:	4637      	mov	r7, r6
 80004a8:	4630      	mov	r0, r6
 80004aa:	e709      	b.n	80002c0 <__udivmoddi4+0xa0>
 80004ac:	4607      	mov	r7, r0
 80004ae:	e6e7      	b.n	8000280 <__udivmoddi4+0x60>
 80004b0:	4618      	mov	r0, r3
 80004b2:	e6fb      	b.n	80002ac <__udivmoddi4+0x8c>
 80004b4:	4541      	cmp	r1, r8
 80004b6:	d2ab      	bcs.n	8000410 <__udivmoddi4+0x1f0>
 80004b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004bc:	eb69 020e 	sbc.w	r2, r9, lr
 80004c0:	3801      	subs	r0, #1
 80004c2:	4613      	mov	r3, r2
 80004c4:	e7a4      	b.n	8000410 <__udivmoddi4+0x1f0>
 80004c6:	4660      	mov	r0, ip
 80004c8:	e7e9      	b.n	800049e <__udivmoddi4+0x27e>
 80004ca:	4618      	mov	r0, r3
 80004cc:	e795      	b.n	80003fa <__udivmoddi4+0x1da>
 80004ce:	4667      	mov	r7, ip
 80004d0:	e7d1      	b.n	8000476 <__udivmoddi4+0x256>
 80004d2:	4681      	mov	r9, r0
 80004d4:	e77c      	b.n	80003d0 <__udivmoddi4+0x1b0>
 80004d6:	3802      	subs	r0, #2
 80004d8:	442c      	add	r4, r5
 80004da:	e747      	b.n	800036c <__udivmoddi4+0x14c>
 80004dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e0:	442b      	add	r3, r5
 80004e2:	e72f      	b.n	8000344 <__udivmoddi4+0x124>
 80004e4:	4638      	mov	r0, r7
 80004e6:	e708      	b.n	80002fa <__udivmoddi4+0xda>
 80004e8:	4637      	mov	r7, r6
 80004ea:	e6e9      	b.n	80002c0 <__udivmoddi4+0xa0>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004f4:	4b0e      	ldr	r3, [pc, #56]	; (8000530 <HAL_Init+0x40>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	4a0d      	ldr	r2, [pc, #52]	; (8000530 <HAL_Init+0x40>)
 80004fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000500:	4b0b      	ldr	r3, [pc, #44]	; (8000530 <HAL_Init+0x40>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	4a0a      	ldr	r2, [pc, #40]	; (8000530 <HAL_Init+0x40>)
 8000506:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800050a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800050c:	4b08      	ldr	r3, [pc, #32]	; (8000530 <HAL_Init+0x40>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	4a07      	ldr	r2, [pc, #28]	; (8000530 <HAL_Init+0x40>)
 8000512:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000516:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000518:	2003      	movs	r0, #3
 800051a:	f000 f8fa 	bl	8000712 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800051e:	2000      	movs	r0, #0
 8000520:	f00b ff82 	bl	800c428 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000524:	f00b fc3c 	bl	800bda0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000528:	2300      	movs	r3, #0
}
 800052a:	4618      	mov	r0, r3
 800052c:	bd80      	pop	{r7, pc}
 800052e:	bf00      	nop
 8000530:	40023c00 	.word	0x40023c00

08000534 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000538:	4b06      	ldr	r3, [pc, #24]	; (8000554 <HAL_IncTick+0x20>)
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	461a      	mov	r2, r3
 800053e:	4b06      	ldr	r3, [pc, #24]	; (8000558 <HAL_IncTick+0x24>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	4413      	add	r3, r2
 8000544:	4a04      	ldr	r2, [pc, #16]	; (8000558 <HAL_IncTick+0x24>)
 8000546:	6013      	str	r3, [r2, #0]
}
 8000548:	bf00      	nop
 800054a:	46bd      	mov	sp, r7
 800054c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop
 8000554:	20000004 	.word	0x20000004
 8000558:	20008478 	.word	0x20008478

0800055c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800055c:	b480      	push	{r7}
 800055e:	af00      	add	r7, sp, #0
  return uwTick;
 8000560:	4b03      	ldr	r3, [pc, #12]	; (8000570 <HAL_GetTick+0x14>)
 8000562:	681b      	ldr	r3, [r3, #0]
}
 8000564:	4618      	mov	r0, r3
 8000566:	46bd      	mov	sp, r7
 8000568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop
 8000570:	20008478 	.word	0x20008478

08000574 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b084      	sub	sp, #16
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800057c:	f7ff ffee 	bl	800055c <HAL_GetTick>
 8000580:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000586:	68fb      	ldr	r3, [r7, #12]
 8000588:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800058c:	d005      	beq.n	800059a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800058e:	4b09      	ldr	r3, [pc, #36]	; (80005b4 <HAL_Delay+0x40>)
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	461a      	mov	r2, r3
 8000594:	68fb      	ldr	r3, [r7, #12]
 8000596:	4413      	add	r3, r2
 8000598:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800059a:	bf00      	nop
 800059c:	f7ff ffde 	bl	800055c <HAL_GetTick>
 80005a0:	4602      	mov	r2, r0
 80005a2:	68bb      	ldr	r3, [r7, #8]
 80005a4:	1ad3      	subs	r3, r2, r3
 80005a6:	68fa      	ldr	r2, [r7, #12]
 80005a8:	429a      	cmp	r2, r3
 80005aa:	d8f7      	bhi.n	800059c <HAL_Delay+0x28>
  {
  }
}
 80005ac:	bf00      	nop
 80005ae:	3710      	adds	r7, #16
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	20000004 	.word	0x20000004

080005b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005b8:	b480      	push	{r7}
 80005ba:	b085      	sub	sp, #20
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	f003 0307 	and.w	r3, r3, #7
 80005c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005c8:	4b0c      	ldr	r3, [pc, #48]	; (80005fc <__NVIC_SetPriorityGrouping+0x44>)
 80005ca:	68db      	ldr	r3, [r3, #12]
 80005cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005ce:	68ba      	ldr	r2, [r7, #8]
 80005d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005d4:	4013      	ands	r3, r2
 80005d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005dc:	68bb      	ldr	r3, [r7, #8]
 80005de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005ea:	4a04      	ldr	r2, [pc, #16]	; (80005fc <__NVIC_SetPriorityGrouping+0x44>)
 80005ec:	68bb      	ldr	r3, [r7, #8]
 80005ee:	60d3      	str	r3, [r2, #12]
}
 80005f0:	bf00      	nop
 80005f2:	3714      	adds	r7, #20
 80005f4:	46bd      	mov	sp, r7
 80005f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fa:	4770      	bx	lr
 80005fc:	e000ed00 	.word	0xe000ed00

08000600 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000600:	b480      	push	{r7}
 8000602:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000604:	4b04      	ldr	r3, [pc, #16]	; (8000618 <__NVIC_GetPriorityGrouping+0x18>)
 8000606:	68db      	ldr	r3, [r3, #12]
 8000608:	0a1b      	lsrs	r3, r3, #8
 800060a:	f003 0307 	and.w	r3, r3, #7
}
 800060e:	4618      	mov	r0, r3
 8000610:	46bd      	mov	sp, r7
 8000612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000616:	4770      	bx	lr
 8000618:	e000ed00 	.word	0xe000ed00

0800061c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800061c:	b480      	push	{r7}
 800061e:	b083      	sub	sp, #12
 8000620:	af00      	add	r7, sp, #0
 8000622:	4603      	mov	r3, r0
 8000624:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800062a:	2b00      	cmp	r3, #0
 800062c:	db0b      	blt.n	8000646 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800062e:	79fb      	ldrb	r3, [r7, #7]
 8000630:	f003 021f 	and.w	r2, r3, #31
 8000634:	4907      	ldr	r1, [pc, #28]	; (8000654 <__NVIC_EnableIRQ+0x38>)
 8000636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800063a:	095b      	lsrs	r3, r3, #5
 800063c:	2001      	movs	r0, #1
 800063e:	fa00 f202 	lsl.w	r2, r0, r2
 8000642:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000646:	bf00      	nop
 8000648:	370c      	adds	r7, #12
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop
 8000654:	e000e100 	.word	0xe000e100

08000658 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000658:	b480      	push	{r7}
 800065a:	b083      	sub	sp, #12
 800065c:	af00      	add	r7, sp, #0
 800065e:	4603      	mov	r3, r0
 8000660:	6039      	str	r1, [r7, #0]
 8000662:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000664:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000668:	2b00      	cmp	r3, #0
 800066a:	db0a      	blt.n	8000682 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800066c:	683b      	ldr	r3, [r7, #0]
 800066e:	b2da      	uxtb	r2, r3
 8000670:	490c      	ldr	r1, [pc, #48]	; (80006a4 <__NVIC_SetPriority+0x4c>)
 8000672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000676:	0112      	lsls	r2, r2, #4
 8000678:	b2d2      	uxtb	r2, r2
 800067a:	440b      	add	r3, r1
 800067c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000680:	e00a      	b.n	8000698 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000682:	683b      	ldr	r3, [r7, #0]
 8000684:	b2da      	uxtb	r2, r3
 8000686:	4908      	ldr	r1, [pc, #32]	; (80006a8 <__NVIC_SetPriority+0x50>)
 8000688:	79fb      	ldrb	r3, [r7, #7]
 800068a:	f003 030f 	and.w	r3, r3, #15
 800068e:	3b04      	subs	r3, #4
 8000690:	0112      	lsls	r2, r2, #4
 8000692:	b2d2      	uxtb	r2, r2
 8000694:	440b      	add	r3, r1
 8000696:	761a      	strb	r2, [r3, #24]
}
 8000698:	bf00      	nop
 800069a:	370c      	adds	r7, #12
 800069c:	46bd      	mov	sp, r7
 800069e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a2:	4770      	bx	lr
 80006a4:	e000e100 	.word	0xe000e100
 80006a8:	e000ed00 	.word	0xe000ed00

080006ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b089      	sub	sp, #36	; 0x24
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	60f8      	str	r0, [r7, #12]
 80006b4:	60b9      	str	r1, [r7, #8]
 80006b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	f003 0307 	and.w	r3, r3, #7
 80006be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006c0:	69fb      	ldr	r3, [r7, #28]
 80006c2:	f1c3 0307 	rsb	r3, r3, #7
 80006c6:	2b04      	cmp	r3, #4
 80006c8:	bf28      	it	cs
 80006ca:	2304      	movcs	r3, #4
 80006cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006ce:	69fb      	ldr	r3, [r7, #28]
 80006d0:	3304      	adds	r3, #4
 80006d2:	2b06      	cmp	r3, #6
 80006d4:	d902      	bls.n	80006dc <NVIC_EncodePriority+0x30>
 80006d6:	69fb      	ldr	r3, [r7, #28]
 80006d8:	3b03      	subs	r3, #3
 80006da:	e000      	b.n	80006de <NVIC_EncodePriority+0x32>
 80006dc:	2300      	movs	r3, #0
 80006de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80006e4:	69bb      	ldr	r3, [r7, #24]
 80006e6:	fa02 f303 	lsl.w	r3, r2, r3
 80006ea:	43da      	mvns	r2, r3
 80006ec:	68bb      	ldr	r3, [r7, #8]
 80006ee:	401a      	ands	r2, r3
 80006f0:	697b      	ldr	r3, [r7, #20]
 80006f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006f4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80006f8:	697b      	ldr	r3, [r7, #20]
 80006fa:	fa01 f303 	lsl.w	r3, r1, r3
 80006fe:	43d9      	mvns	r1, r3
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000704:	4313      	orrs	r3, r2
         );
}
 8000706:	4618      	mov	r0, r3
 8000708:	3724      	adds	r7, #36	; 0x24
 800070a:	46bd      	mov	sp, r7
 800070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000710:	4770      	bx	lr

08000712 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000712:	b580      	push	{r7, lr}
 8000714:	b082      	sub	sp, #8
 8000716:	af00      	add	r7, sp, #0
 8000718:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800071a:	6878      	ldr	r0, [r7, #4]
 800071c:	f7ff ff4c 	bl	80005b8 <__NVIC_SetPriorityGrouping>
}
 8000720:	bf00      	nop
 8000722:	3708      	adds	r7, #8
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}

08000728 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000728:	b580      	push	{r7, lr}
 800072a:	b086      	sub	sp, #24
 800072c:	af00      	add	r7, sp, #0
 800072e:	4603      	mov	r3, r0
 8000730:	60b9      	str	r1, [r7, #8]
 8000732:	607a      	str	r2, [r7, #4]
 8000734:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000736:	2300      	movs	r3, #0
 8000738:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800073a:	f7ff ff61 	bl	8000600 <__NVIC_GetPriorityGrouping>
 800073e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000740:	687a      	ldr	r2, [r7, #4]
 8000742:	68b9      	ldr	r1, [r7, #8]
 8000744:	6978      	ldr	r0, [r7, #20]
 8000746:	f7ff ffb1 	bl	80006ac <NVIC_EncodePriority>
 800074a:	4602      	mov	r2, r0
 800074c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000750:	4611      	mov	r1, r2
 8000752:	4618      	mov	r0, r3
 8000754:	f7ff ff80 	bl	8000658 <__NVIC_SetPriority>
}
 8000758:	bf00      	nop
 800075a:	3718      	adds	r7, #24
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}

08000760 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
 8000766:	4603      	mov	r3, r0
 8000768:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800076a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800076e:	4618      	mov	r0, r3
 8000770:	f7ff ff54 	bl	800061c <__NVIC_EnableIRQ>
}
 8000774:	bf00      	nop
 8000776:	3708      	adds	r7, #8
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}

0800077c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	2b00      	cmp	r3, #0
 8000788:	d101      	bne.n	800078e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800078a:	2301      	movs	r3, #1
 800078c:	e00e      	b.n	80007ac <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	795b      	ldrb	r3, [r3, #5]
 8000792:	b2db      	uxtb	r3, r3
 8000794:	2b00      	cmp	r3, #0
 8000796:	d105      	bne.n	80007a4 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	2200      	movs	r2, #0
 800079c:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800079e:	6878      	ldr	r0, [r7, #4]
 80007a0:	f00b fb2a 	bl	800bdf8 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	2201      	movs	r2, #1
 80007a8:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80007aa:	2300      	movs	r3, #0
}
 80007ac:	4618      	mov	r0, r3
 80007ae:	3708      	adds	r7, #8
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}

080007b4 <HAL_CRC_Accumulate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 80007b4:	b480      	push	{r7}
 80007b6:	b087      	sub	sp, #28
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	60f8      	str	r0, [r7, #12]
 80007bc:	60b9      	str	r1, [r7, #8]
 80007be:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 80007c0:	2300      	movs	r3, #0
 80007c2:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	2202      	movs	r2, #2
 80007c8:	715a      	strb	r2, [r3, #5]

  /* Enter Data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 80007ca:	2300      	movs	r3, #0
 80007cc:	617b      	str	r3, [r7, #20]
 80007ce:	e00a      	b.n	80007e6 <HAL_CRC_Accumulate+0x32>
  {
    hcrc->Instance->DR = pBuffer[index];
 80007d0:	697b      	ldr	r3, [r7, #20]
 80007d2:	009b      	lsls	r3, r3, #2
 80007d4:	68ba      	ldr	r2, [r7, #8]
 80007d6:	441a      	add	r2, r3
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	6812      	ldr	r2, [r2, #0]
 80007de:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 80007e0:	697b      	ldr	r3, [r7, #20]
 80007e2:	3301      	adds	r3, #1
 80007e4:	617b      	str	r3, [r7, #20]
 80007e6:	697a      	ldr	r2, [r7, #20]
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	429a      	cmp	r2, r3
 80007ec:	d3f0      	bcc.n	80007d0 <HAL_CRC_Accumulate+0x1c>
  }
  temp = hcrc->Instance->DR;
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	2201      	movs	r2, #1
 80007fa:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 80007fc:	693b      	ldr	r3, [r7, #16]
}
 80007fe:	4618      	mov	r0, r3
 8000800:	371c      	adds	r7, #28
 8000802:	46bd      	mov	sp, r7
 8000804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000808:	4770      	bx	lr

0800080a <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800080a:	b580      	push	{r7, lr}
 800080c:	b082      	sub	sp, #8
 800080e:	af00      	add	r7, sp, #0
 8000810:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	2b00      	cmp	r3, #0
 8000816:	d101      	bne.n	800081c <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8000818:	2301      	movs	r3, #1
 800081a:	e03b      	b.n	8000894 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000822:	b2db      	uxtb	r3, r3
 8000824:	2b00      	cmp	r3, #0
 8000826:	d106      	bne.n	8000836 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	2200      	movs	r2, #0
 800082c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8000830:	6878      	ldr	r0, [r7, #4]
 8000832:	f00b fb03 	bl	800be3c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	2202      	movs	r2, #2
 800083a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	685a      	ldr	r2, [r3, #4]
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	430a      	orrs	r2, r1
 8000852:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800085a:	f023 0107 	bic.w	r1, r3, #7
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	689a      	ldr	r2, [r3, #8]
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	430a      	orrs	r2, r1
 8000868:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000870:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000874:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000878:	687a      	ldr	r2, [r7, #4]
 800087a:	68d1      	ldr	r1, [r2, #12]
 800087c:	687a      	ldr	r2, [r7, #4]
 800087e:	6812      	ldr	r2, [r2, #0]
 8000880:	430b      	orrs	r3, r1
 8000882:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	2200      	movs	r2, #0
 8000888:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	2201      	movs	r2, #1
 800088e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8000892:	2300      	movs	r3, #0
}
 8000894:	4618      	mov	r0, r3
 8000896:	3708      	adds	r7, #8
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}

0800089c <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b084      	sub	sp, #16
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	685b      	ldr	r3, [r3, #4]
 80008aa:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	f003 0301 	and.w	r3, r3, #1
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d026      	beq.n	800090c <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80008be:	68bb      	ldr	r3, [r7, #8]
 80008c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d021      	beq.n	800090c <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	681a      	ldr	r2, [r3, #0]
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80008d6:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80008dc:	f043 0201 	orr.w	r2, r3, #1
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	2201      	movs	r2, #1
 80008ea:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	2204      	movs	r2, #4
 80008f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	2200      	movs	r2, #0
 80008f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	695b      	ldr	r3, [r3, #20]
 8000900:	2b00      	cmp	r3, #0
 8000902:	d003      	beq.n	800090c <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	695b      	ldr	r3, [r3, #20]
 8000908:	6878      	ldr	r0, [r7, #4]
 800090a:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	f003 0320 	and.w	r3, r3, #32
 8000912:	2b00      	cmp	r3, #0
 8000914:	d026      	beq.n	8000964 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8000916:	68bb      	ldr	r3, [r7, #8]
 8000918:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800091c:	2b00      	cmp	r3, #0
 800091e:	d021      	beq.n	8000964 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	681a      	ldr	r2, [r3, #0]
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800092e:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	2220      	movs	r2, #32
 8000936:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800093c:	f043 0202 	orr.w	r2, r3, #2
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	2204      	movs	r2, #4
 8000948:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	2200      	movs	r2, #0
 8000950:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	695b      	ldr	r3, [r3, #20]
 8000958:	2b00      	cmp	r3, #0
 800095a:	d003      	beq.n	8000964 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	695b      	ldr	r3, [r3, #20]
 8000960:	6878      	ldr	r0, [r7, #4]
 8000962:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	f003 0308 	and.w	r3, r3, #8
 800096a:	2b00      	cmp	r3, #0
 800096c:	d026      	beq.n	80009bc <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800096e:	68bb      	ldr	r3, [r7, #8]
 8000970:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000974:	2b00      	cmp	r3, #0
 8000976:	d021      	beq.n	80009bc <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	681a      	ldr	r2, [r3, #0]
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000986:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	2208      	movs	r2, #8
 800098e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000994:	f043 0204 	orr.w	r2, r3, #4
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	2204      	movs	r2, #4
 80009a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	2200      	movs	r2, #0
 80009a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	695b      	ldr	r3, [r3, #20]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d003      	beq.n	80009bc <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	695b      	ldr	r3, [r3, #20]
 80009b8:	6878      	ldr	r0, [r7, #4]
 80009ba:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	f003 0304 	and.w	r3, r3, #4
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d013      	beq.n	80009ee <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 80009c6:	68bb      	ldr	r3, [r7, #8]
 80009c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d00e      	beq.n	80009ee <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	681a      	ldr	r2, [r3, #0]
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80009de:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	2204      	movs	r2, #4
 80009e6:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 80009e8:	6878      	ldr	r0, [r7, #4]
 80009ea:	f000 f853 	bl	8000a94 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	f003 0302 	and.w	r3, r3, #2
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d024      	beq.n	8000a42 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 80009f8:	68bb      	ldr	r3, [r7, #8]
 80009fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d01f      	beq.n	8000a42 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	681a      	ldr	r2, [r3, #0]
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000a10:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	2202      	movs	r2, #2
 8000a18:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	2201      	movs	r2, #1
 8000a26:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	691b      	ldr	r3, [r3, #16]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d003      	beq.n	8000a42 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	691b      	ldr	r3, [r3, #16]
 8000a3e:	6878      	ldr	r0, [r7, #4]
 8000a40:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	f003 0310 	and.w	r3, r3, #16
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d01f      	beq.n	8000a8c <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8000a4c:	68bb      	ldr	r3, [r7, #8]
 8000a4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d01a      	beq.n	8000a8c <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	681a      	ldr	r2, [r3, #0]
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000a64:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	2210      	movs	r2, #16
 8000a6c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	2201      	movs	r2, #1
 8000a7a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	2200      	movs	r2, #0
 8000a82:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8000a86:	6878      	ldr	r0, [r7, #4]
 8000a88:	f000 f80e 	bl	8000aa8 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8000a8c:	bf00      	nop
 8000a8e:	3710      	adds	r7, #16
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}

08000a94 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b083      	sub	sp, #12
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8000a9c:	bf00      	nop
 8000a9e:	370c      	adds	r7, #12
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr

08000aa8 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b083      	sub	sp, #12
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8000ab0:	bf00      	nop
 8000ab2:	370c      	adds	r7, #12
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr

08000abc <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b087      	sub	sp, #28
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
 8000ac4:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	685b      	ldr	r3, [r3, #4]
 8000aca:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000ad4:	2b01      	cmp	r3, #1
 8000ad6:	d101      	bne.n	8000adc <HAL_DMA2D_ConfigLayer+0x20>
 8000ad8:	2302      	movs	r3, #2
 8000ada:	e079      	b.n	8000bd0 <HAL_DMA2D_ConfigLayer+0x114>
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	2201      	movs	r2, #1
 8000ae0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	2202      	movs	r2, #2
 8000ae8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	011b      	lsls	r3, r3, #4
 8000af0:	3318      	adds	r3, #24
 8000af2:	687a      	ldr	r2, [r7, #4]
 8000af4:	4413      	add	r3, r2
 8000af6:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8000af8:	693b      	ldr	r3, [r7, #16]
 8000afa:	685a      	ldr	r2, [r3, #4]
 8000afc:	693b      	ldr	r3, [r7, #16]
 8000afe:	689b      	ldr	r3, [r3, #8]
 8000b00:	041b      	lsls	r3, r3, #16
 8000b02:	4313      	orrs	r3, r2
 8000b04:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8000b06:	4b35      	ldr	r3, [pc, #212]	; (8000bdc <HAL_DMA2D_ConfigLayer+0x120>)
 8000b08:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8000b0a:	693b      	ldr	r3, [r7, #16]
 8000b0c:	685b      	ldr	r3, [r3, #4]
 8000b0e:	2b0a      	cmp	r3, #10
 8000b10:	d003      	beq.n	8000b1a <HAL_DMA2D_ConfigLayer+0x5e>
 8000b12:	693b      	ldr	r3, [r7, #16]
 8000b14:	685b      	ldr	r3, [r3, #4]
 8000b16:	2b09      	cmp	r3, #9
 8000b18:	d107      	bne.n	8000b2a <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8000b1a:	693b      	ldr	r3, [r7, #16]
 8000b1c:	68db      	ldr	r3, [r3, #12]
 8000b1e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8000b22:	697a      	ldr	r2, [r7, #20]
 8000b24:	4313      	orrs	r3, r2
 8000b26:	617b      	str	r3, [r7, #20]
 8000b28:	e005      	b.n	8000b36 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8000b2a:	693b      	ldr	r3, [r7, #16]
 8000b2c:	68db      	ldr	r3, [r3, #12]
 8000b2e:	061b      	lsls	r3, r3, #24
 8000b30:	697a      	ldr	r2, [r7, #20]
 8000b32:	4313      	orrs	r3, r2
 8000b34:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d120      	bne.n	8000b7e <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	43db      	mvns	r3, r3
 8000b46:	ea02 0103 	and.w	r1, r2, r3
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	697a      	ldr	r2, [r7, #20]
 8000b50:	430a      	orrs	r2, r1
 8000b52:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	693a      	ldr	r2, [r7, #16]
 8000b5a:	6812      	ldr	r2, [r2, #0]
 8000b5c:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8000b5e:	693b      	ldr	r3, [r7, #16]
 8000b60:	685b      	ldr	r3, [r3, #4]
 8000b62:	2b0a      	cmp	r3, #10
 8000b64:	d003      	beq.n	8000b6e <HAL_DMA2D_ConfigLayer+0xb2>
 8000b66:	693b      	ldr	r3, [r7, #16]
 8000b68:	685b      	ldr	r3, [r3, #4]
 8000b6a:	2b09      	cmp	r3, #9
 8000b6c:	d127      	bne.n	8000bbe <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8000b6e:	693b      	ldr	r3, [r7, #16]
 8000b70:	68da      	ldr	r2, [r3, #12]
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8000b7a:	629a      	str	r2, [r3, #40]	; 0x28
 8000b7c:	e01f      	b.n	8000bbe <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	69da      	ldr	r2, [r3, #28]
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	43db      	mvns	r3, r3
 8000b88:	ea02 0103 	and.w	r1, r2, r3
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	697a      	ldr	r2, [r7, #20]
 8000b92:	430a      	orrs	r2, r1
 8000b94:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	693a      	ldr	r2, [r7, #16]
 8000b9c:	6812      	ldr	r2, [r2, #0]
 8000b9e:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8000ba0:	693b      	ldr	r3, [r7, #16]
 8000ba2:	685b      	ldr	r3, [r3, #4]
 8000ba4:	2b0a      	cmp	r3, #10
 8000ba6:	d003      	beq.n	8000bb0 <HAL_DMA2D_ConfigLayer+0xf4>
 8000ba8:	693b      	ldr	r3, [r7, #16]
 8000baa:	685b      	ldr	r3, [r3, #4]
 8000bac:	2b09      	cmp	r3, #9
 8000bae:	d106      	bne.n	8000bbe <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8000bb0:	693b      	ldr	r3, [r7, #16]
 8000bb2:	68da      	ldr	r2, [r3, #12]
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8000bbc:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	2200      	movs	r2, #0
 8000bca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8000bce:	2300      	movs	r3, #0
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	371c      	adds	r7, #28
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr
 8000bdc:	ff03000f 	.word	0xff03000f

08000be0 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b086      	sub	sp, #24
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	60f8      	str	r0, [r7, #12]
 8000be8:	60b9      	str	r1, [r7, #8]
 8000bea:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000bf2:	4b23      	ldr	r3, [pc, #140]	; (8000c80 <HAL_FLASH_Program+0xa0>)
 8000bf4:	7e1b      	ldrb	r3, [r3, #24]
 8000bf6:	2b01      	cmp	r3, #1
 8000bf8:	d101      	bne.n	8000bfe <HAL_FLASH_Program+0x1e>
 8000bfa:	2302      	movs	r3, #2
 8000bfc:	e03b      	b.n	8000c76 <HAL_FLASH_Program+0x96>
 8000bfe:	4b20      	ldr	r3, [pc, #128]	; (8000c80 <HAL_FLASH_Program+0xa0>)
 8000c00:	2201      	movs	r2, #1
 8000c02:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000c04:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000c08:	f000 f870 	bl	8000cec <FLASH_WaitForLastOperation>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8000c10:	7dfb      	ldrb	r3, [r7, #23]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d12b      	bne.n	8000c6e <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d105      	bne.n	8000c28 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8000c1c:	783b      	ldrb	r3, [r7, #0]
 8000c1e:	4619      	mov	r1, r3
 8000c20:	68b8      	ldr	r0, [r7, #8]
 8000c22:	f000 f919 	bl	8000e58 <FLASH_Program_Byte>
 8000c26:	e016      	b.n	8000c56 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	2b01      	cmp	r3, #1
 8000c2c:	d105      	bne.n	8000c3a <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8000c2e:	883b      	ldrh	r3, [r7, #0]
 8000c30:	4619      	mov	r1, r3
 8000c32:	68b8      	ldr	r0, [r7, #8]
 8000c34:	f000 f8ec 	bl	8000e10 <FLASH_Program_HalfWord>
 8000c38:	e00d      	b.n	8000c56 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	2b02      	cmp	r3, #2
 8000c3e:	d105      	bne.n	8000c4c <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	4619      	mov	r1, r3
 8000c44:	68b8      	ldr	r0, [r7, #8]
 8000c46:	f000 f8c1 	bl	8000dcc <FLASH_Program_Word>
 8000c4a:	e004      	b.n	8000c56 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8000c4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000c50:	68b8      	ldr	r0, [r7, #8]
 8000c52:	f000 f88b 	bl	8000d6c <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000c56:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000c5a:	f000 f847 	bl	8000cec <FLASH_WaitForLastOperation>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8000c62:	4b08      	ldr	r3, [pc, #32]	; (8000c84 <HAL_FLASH_Program+0xa4>)
 8000c64:	691b      	ldr	r3, [r3, #16]
 8000c66:	4a07      	ldr	r2, [pc, #28]	; (8000c84 <HAL_FLASH_Program+0xa4>)
 8000c68:	f023 0301 	bic.w	r3, r3, #1
 8000c6c:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000c6e:	4b04      	ldr	r3, [pc, #16]	; (8000c80 <HAL_FLASH_Program+0xa0>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	761a      	strb	r2, [r3, #24]
  
  return status;
 8000c74:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	3718      	adds	r7, #24
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	2000847c 	.word	0x2000847c
 8000c84:	40023c00 	.word	0x40023c00

08000c88 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000c92:	4b0b      	ldr	r3, [pc, #44]	; (8000cc0 <HAL_FLASH_Unlock+0x38>)
 8000c94:	691b      	ldr	r3, [r3, #16]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	da0b      	bge.n	8000cb2 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000c9a:	4b09      	ldr	r3, [pc, #36]	; (8000cc0 <HAL_FLASH_Unlock+0x38>)
 8000c9c:	4a09      	ldr	r2, [pc, #36]	; (8000cc4 <HAL_FLASH_Unlock+0x3c>)
 8000c9e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000ca0:	4b07      	ldr	r3, [pc, #28]	; (8000cc0 <HAL_FLASH_Unlock+0x38>)
 8000ca2:	4a09      	ldr	r2, [pc, #36]	; (8000cc8 <HAL_FLASH_Unlock+0x40>)
 8000ca4:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000ca6:	4b06      	ldr	r3, [pc, #24]	; (8000cc0 <HAL_FLASH_Unlock+0x38>)
 8000ca8:	691b      	ldr	r3, [r3, #16]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	da01      	bge.n	8000cb2 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8000cb2:	79fb      	ldrb	r3, [r7, #7]
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	370c      	adds	r7, #12
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr
 8000cc0:	40023c00 	.word	0x40023c00
 8000cc4:	45670123 	.word	0x45670123
 8000cc8:	cdef89ab 	.word	0xcdef89ab

08000ccc <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8000cd0:	4b05      	ldr	r3, [pc, #20]	; (8000ce8 <HAL_FLASH_Lock+0x1c>)
 8000cd2:	691b      	ldr	r3, [r3, #16]
 8000cd4:	4a04      	ldr	r2, [pc, #16]	; (8000ce8 <HAL_FLASH_Lock+0x1c>)
 8000cd6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000cda:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8000cdc:	2300      	movs	r3, #0
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr
 8000ce8:	40023c00 	.word	0x40023c00

08000cec <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b084      	sub	sp, #16
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000cf8:	4b1a      	ldr	r3, [pc, #104]	; (8000d64 <FLASH_WaitForLastOperation+0x78>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8000cfe:	f7ff fc2d 	bl	800055c <HAL_GetTick>
 8000d02:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8000d04:	e010      	b.n	8000d28 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000d0c:	d00c      	beq.n	8000d28 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d007      	beq.n	8000d24 <FLASH_WaitForLastOperation+0x38>
 8000d14:	f7ff fc22 	bl	800055c <HAL_GetTick>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	1ad3      	subs	r3, r2, r3
 8000d1e:	687a      	ldr	r2, [r7, #4]
 8000d20:	429a      	cmp	r2, r3
 8000d22:	d201      	bcs.n	8000d28 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8000d24:	2303      	movs	r3, #3
 8000d26:	e019      	b.n	8000d5c <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8000d28:	4b0f      	ldr	r3, [pc, #60]	; (8000d68 <FLASH_WaitForLastOperation+0x7c>)
 8000d2a:	68db      	ldr	r3, [r3, #12]
 8000d2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d1e8      	bne.n	8000d06 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8000d34:	4b0c      	ldr	r3, [pc, #48]	; (8000d68 <FLASH_WaitForLastOperation+0x7c>)
 8000d36:	68db      	ldr	r3, [r3, #12]
 8000d38:	f003 0301 	and.w	r3, r3, #1
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d002      	beq.n	8000d46 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000d40:	4b09      	ldr	r3, [pc, #36]	; (8000d68 <FLASH_WaitForLastOperation+0x7c>)
 8000d42:	2201      	movs	r2, #1
 8000d44:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8000d46:	4b08      	ldr	r3, [pc, #32]	; (8000d68 <FLASH_WaitForLastOperation+0x7c>)
 8000d48:	68db      	ldr	r3, [r3, #12]
 8000d4a:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d003      	beq.n	8000d5a <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8000d52:	f000 f8a3 	bl	8000e9c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8000d56:	2301      	movs	r3, #1
 8000d58:	e000      	b.n	8000d5c <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8000d5a:	2300      	movs	r3, #0
  
}  
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	3710      	adds	r7, #16
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	2000847c 	.word	0x2000847c
 8000d68:	40023c00 	.word	0x40023c00

08000d6c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8000d6c:	b490      	push	{r4, r7}
 8000d6e:	b084      	sub	sp, #16
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	60f8      	str	r0, [r7, #12]
 8000d74:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000d78:	4b13      	ldr	r3, [pc, #76]	; (8000dc8 <FLASH_Program_DoubleWord+0x5c>)
 8000d7a:	691b      	ldr	r3, [r3, #16]
 8000d7c:	4a12      	ldr	r2, [pc, #72]	; (8000dc8 <FLASH_Program_DoubleWord+0x5c>)
 8000d7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000d82:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8000d84:	4b10      	ldr	r3, [pc, #64]	; (8000dc8 <FLASH_Program_DoubleWord+0x5c>)
 8000d86:	691b      	ldr	r3, [r3, #16]
 8000d88:	4a0f      	ldr	r2, [pc, #60]	; (8000dc8 <FLASH_Program_DoubleWord+0x5c>)
 8000d8a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8000d8e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8000d90:	4b0d      	ldr	r3, [pc, #52]	; (8000dc8 <FLASH_Program_DoubleWord+0x5c>)
 8000d92:	691b      	ldr	r3, [r3, #16]
 8000d94:	4a0c      	ldr	r2, [pc, #48]	; (8000dc8 <FLASH_Program_DoubleWord+0x5c>)
 8000d96:	f043 0301 	orr.w	r3, r3, #1
 8000d9a:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	683a      	ldr	r2, [r7, #0]
 8000da0:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8000da2:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8000da6:	e9d7 1200 	ldrd	r1, r2, [r7]
 8000daa:	f04f 0300 	mov.w	r3, #0
 8000dae:	f04f 0400 	mov.w	r4, #0
 8000db2:	0013      	movs	r3, r2
 8000db4:	2400      	movs	r4, #0
 8000db6:	68fa      	ldr	r2, [r7, #12]
 8000db8:	3204      	adds	r2, #4
 8000dba:	6013      	str	r3, [r2, #0]
}
 8000dbc:	bf00      	nop
 8000dbe:	3710      	adds	r7, #16
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bc90      	pop	{r4, r7}
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	40023c00 	.word	0x40023c00

08000dcc <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b083      	sub	sp, #12
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
 8000dd4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000dd6:	4b0d      	ldr	r3, [pc, #52]	; (8000e0c <FLASH_Program_Word+0x40>)
 8000dd8:	691b      	ldr	r3, [r3, #16]
 8000dda:	4a0c      	ldr	r2, [pc, #48]	; (8000e0c <FLASH_Program_Word+0x40>)
 8000ddc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000de0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8000de2:	4b0a      	ldr	r3, [pc, #40]	; (8000e0c <FLASH_Program_Word+0x40>)
 8000de4:	691b      	ldr	r3, [r3, #16]
 8000de6:	4a09      	ldr	r2, [pc, #36]	; (8000e0c <FLASH_Program_Word+0x40>)
 8000de8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dec:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8000dee:	4b07      	ldr	r3, [pc, #28]	; (8000e0c <FLASH_Program_Word+0x40>)
 8000df0:	691b      	ldr	r3, [r3, #16]
 8000df2:	4a06      	ldr	r2, [pc, #24]	; (8000e0c <FLASH_Program_Word+0x40>)
 8000df4:	f043 0301 	orr.w	r3, r3, #1
 8000df8:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	683a      	ldr	r2, [r7, #0]
 8000dfe:	601a      	str	r2, [r3, #0]
}
 8000e00:	bf00      	nop
 8000e02:	370c      	adds	r7, #12
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr
 8000e0c:	40023c00 	.word	0x40023c00

08000e10 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
 8000e18:	460b      	mov	r3, r1
 8000e1a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000e1c:	4b0d      	ldr	r3, [pc, #52]	; (8000e54 <FLASH_Program_HalfWord+0x44>)
 8000e1e:	691b      	ldr	r3, [r3, #16]
 8000e20:	4a0c      	ldr	r2, [pc, #48]	; (8000e54 <FLASH_Program_HalfWord+0x44>)
 8000e22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000e26:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8000e28:	4b0a      	ldr	r3, [pc, #40]	; (8000e54 <FLASH_Program_HalfWord+0x44>)
 8000e2a:	691b      	ldr	r3, [r3, #16]
 8000e2c:	4a09      	ldr	r2, [pc, #36]	; (8000e54 <FLASH_Program_HalfWord+0x44>)
 8000e2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e32:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8000e34:	4b07      	ldr	r3, [pc, #28]	; (8000e54 <FLASH_Program_HalfWord+0x44>)
 8000e36:	691b      	ldr	r3, [r3, #16]
 8000e38:	4a06      	ldr	r2, [pc, #24]	; (8000e54 <FLASH_Program_HalfWord+0x44>)
 8000e3a:	f043 0301 	orr.w	r3, r3, #1
 8000e3e:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	887a      	ldrh	r2, [r7, #2]
 8000e44:	801a      	strh	r2, [r3, #0]
}
 8000e46:	bf00      	nop
 8000e48:	370c      	adds	r7, #12
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	40023c00 	.word	0x40023c00

08000e58 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b083      	sub	sp, #12
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
 8000e60:	460b      	mov	r3, r1
 8000e62:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000e64:	4b0c      	ldr	r3, [pc, #48]	; (8000e98 <FLASH_Program_Byte+0x40>)
 8000e66:	691b      	ldr	r3, [r3, #16]
 8000e68:	4a0b      	ldr	r2, [pc, #44]	; (8000e98 <FLASH_Program_Byte+0x40>)
 8000e6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000e6e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8000e70:	4b09      	ldr	r3, [pc, #36]	; (8000e98 <FLASH_Program_Byte+0x40>)
 8000e72:	4a09      	ldr	r2, [pc, #36]	; (8000e98 <FLASH_Program_Byte+0x40>)
 8000e74:	691b      	ldr	r3, [r3, #16]
 8000e76:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8000e78:	4b07      	ldr	r3, [pc, #28]	; (8000e98 <FLASH_Program_Byte+0x40>)
 8000e7a:	691b      	ldr	r3, [r3, #16]
 8000e7c:	4a06      	ldr	r2, [pc, #24]	; (8000e98 <FLASH_Program_Byte+0x40>)
 8000e7e:	f043 0301 	orr.w	r3, r3, #1
 8000e82:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	78fa      	ldrb	r2, [r7, #3]
 8000e88:	701a      	strb	r2, [r3, #0]
}
 8000e8a:	bf00      	nop
 8000e8c:	370c      	adds	r7, #12
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	40023c00 	.word	0x40023c00

08000e9c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8000ea0:	4b2f      	ldr	r3, [pc, #188]	; (8000f60 <FLASH_SetErrorCode+0xc4>)
 8000ea2:	68db      	ldr	r3, [r3, #12]
 8000ea4:	f003 0310 	and.w	r3, r3, #16
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d008      	beq.n	8000ebe <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8000eac:	4b2d      	ldr	r3, [pc, #180]	; (8000f64 <FLASH_SetErrorCode+0xc8>)
 8000eae:	69db      	ldr	r3, [r3, #28]
 8000eb0:	f043 0310 	orr.w	r3, r3, #16
 8000eb4:	4a2b      	ldr	r2, [pc, #172]	; (8000f64 <FLASH_SetErrorCode+0xc8>)
 8000eb6:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8000eb8:	4b29      	ldr	r3, [pc, #164]	; (8000f60 <FLASH_SetErrorCode+0xc4>)
 8000eba:	2210      	movs	r2, #16
 8000ebc:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8000ebe:	4b28      	ldr	r3, [pc, #160]	; (8000f60 <FLASH_SetErrorCode+0xc4>)
 8000ec0:	68db      	ldr	r3, [r3, #12]
 8000ec2:	f003 0320 	and.w	r3, r3, #32
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d008      	beq.n	8000edc <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8000eca:	4b26      	ldr	r3, [pc, #152]	; (8000f64 <FLASH_SetErrorCode+0xc8>)
 8000ecc:	69db      	ldr	r3, [r3, #28]
 8000ece:	f043 0308 	orr.w	r3, r3, #8
 8000ed2:	4a24      	ldr	r2, [pc, #144]	; (8000f64 <FLASH_SetErrorCode+0xc8>)
 8000ed4:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8000ed6:	4b22      	ldr	r3, [pc, #136]	; (8000f60 <FLASH_SetErrorCode+0xc4>)
 8000ed8:	2220      	movs	r2, #32
 8000eda:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8000edc:	4b20      	ldr	r3, [pc, #128]	; (8000f60 <FLASH_SetErrorCode+0xc4>)
 8000ede:	68db      	ldr	r3, [r3, #12]
 8000ee0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d008      	beq.n	8000efa <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8000ee8:	4b1e      	ldr	r3, [pc, #120]	; (8000f64 <FLASH_SetErrorCode+0xc8>)
 8000eea:	69db      	ldr	r3, [r3, #28]
 8000eec:	f043 0304 	orr.w	r3, r3, #4
 8000ef0:	4a1c      	ldr	r2, [pc, #112]	; (8000f64 <FLASH_SetErrorCode+0xc8>)
 8000ef2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8000ef4:	4b1a      	ldr	r3, [pc, #104]	; (8000f60 <FLASH_SetErrorCode+0xc4>)
 8000ef6:	2240      	movs	r2, #64	; 0x40
 8000ef8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8000efa:	4b19      	ldr	r3, [pc, #100]	; (8000f60 <FLASH_SetErrorCode+0xc4>)
 8000efc:	68db      	ldr	r3, [r3, #12]
 8000efe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d008      	beq.n	8000f18 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8000f06:	4b17      	ldr	r3, [pc, #92]	; (8000f64 <FLASH_SetErrorCode+0xc8>)
 8000f08:	69db      	ldr	r3, [r3, #28]
 8000f0a:	f043 0302 	orr.w	r3, r3, #2
 8000f0e:	4a15      	ldr	r2, [pc, #84]	; (8000f64 <FLASH_SetErrorCode+0xc8>)
 8000f10:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8000f12:	4b13      	ldr	r3, [pc, #76]	; (8000f60 <FLASH_SetErrorCode+0xc4>)
 8000f14:	2280      	movs	r2, #128	; 0x80
 8000f16:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8000f18:	4b11      	ldr	r3, [pc, #68]	; (8000f60 <FLASH_SetErrorCode+0xc4>)
 8000f1a:	68db      	ldr	r3, [r3, #12]
 8000f1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d009      	beq.n	8000f38 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8000f24:	4b0f      	ldr	r3, [pc, #60]	; (8000f64 <FLASH_SetErrorCode+0xc8>)
 8000f26:	69db      	ldr	r3, [r3, #28]
 8000f28:	f043 0301 	orr.w	r3, r3, #1
 8000f2c:	4a0d      	ldr	r2, [pc, #52]	; (8000f64 <FLASH_SetErrorCode+0xc8>)
 8000f2e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8000f30:	4b0b      	ldr	r3, [pc, #44]	; (8000f60 <FLASH_SetErrorCode+0xc4>)
 8000f32:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f36:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8000f38:	4b09      	ldr	r3, [pc, #36]	; (8000f60 <FLASH_SetErrorCode+0xc4>)
 8000f3a:	68db      	ldr	r3, [r3, #12]
 8000f3c:	f003 0302 	and.w	r3, r3, #2
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d008      	beq.n	8000f56 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8000f44:	4b07      	ldr	r3, [pc, #28]	; (8000f64 <FLASH_SetErrorCode+0xc8>)
 8000f46:	69db      	ldr	r3, [r3, #28]
 8000f48:	f043 0320 	orr.w	r3, r3, #32
 8000f4c:	4a05      	ldr	r2, [pc, #20]	; (8000f64 <FLASH_SetErrorCode+0xc8>)
 8000f4e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8000f50:	4b03      	ldr	r3, [pc, #12]	; (8000f60 <FLASH_SetErrorCode+0xc4>)
 8000f52:	2202      	movs	r2, #2
 8000f54:	60da      	str	r2, [r3, #12]
  }
}
 8000f56:	bf00      	nop
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr
 8000f60:	40023c00 	.word	0x40023c00
 8000f64:	2000847c 	.word	0x2000847c

08000f68 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b084      	sub	sp, #16
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
 8000f70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000f72:	2301      	movs	r3, #1
 8000f74:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8000f76:	2300      	movs	r3, #0
 8000f78:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000f7a:	4b32      	ldr	r3, [pc, #200]	; (8001044 <HAL_FLASHEx_Erase+0xdc>)
 8000f7c:	7e1b      	ldrb	r3, [r3, #24]
 8000f7e:	2b01      	cmp	r3, #1
 8000f80:	d101      	bne.n	8000f86 <HAL_FLASHEx_Erase+0x1e>
 8000f82:	2302      	movs	r3, #2
 8000f84:	e05a      	b.n	800103c <HAL_FLASHEx_Erase+0xd4>
 8000f86:	4b2f      	ldr	r3, [pc, #188]	; (8001044 <HAL_FLASHEx_Erase+0xdc>)
 8000f88:	2201      	movs	r2, #1
 8000f8a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000f8c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000f90:	f7ff feac 	bl	8000cec <FLASH_WaitForLastOperation>
 8000f94:	4603      	mov	r3, r0
 8000f96:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8000f98:	7bfb      	ldrb	r3, [r7, #15]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d14a      	bne.n	8001034 <HAL_FLASHEx_Erase+0xcc>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000fa4:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	2b01      	cmp	r3, #1
 8000fac:	d117      	bne.n	8000fde <HAL_FLASHEx_Erase+0x76>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	691b      	ldr	r3, [r3, #16]
 8000fb2:	b2da      	uxtb	r2, r3
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	4619      	mov	r1, r3
 8000fba:	4610      	mov	r0, r2
 8000fbc:	f000 f846 	bl	800104c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000fc0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000fc4:	f7ff fe92 	bl	8000cec <FLASH_WaitForLastOperation>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8000fcc:	4b1e      	ldr	r3, [pc, #120]	; (8001048 <HAL_FLASHEx_Erase+0xe0>)
 8000fce:	691b      	ldr	r3, [r3, #16]
 8000fd0:	4a1d      	ldr	r2, [pc, #116]	; (8001048 <HAL_FLASHEx_Erase+0xe0>)
 8000fd2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000fd6:	f023 0304 	bic.w	r3, r3, #4
 8000fda:	6113      	str	r3, [r2, #16]
 8000fdc:	e028      	b.n	8001030 <HAL_FLASHEx_Erase+0xc8>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	689b      	ldr	r3, [r3, #8]
 8000fe2:	60bb      	str	r3, [r7, #8]
 8000fe4:	e01c      	b.n	8001020 <HAL_FLASHEx_Erase+0xb8>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	691b      	ldr	r3, [r3, #16]
 8000fea:	b2db      	uxtb	r3, r3
 8000fec:	4619      	mov	r1, r3
 8000fee:	68b8      	ldr	r0, [r7, #8]
 8000ff0:	f000 f866 	bl	80010c0 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000ff4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000ff8:	f7ff fe78 	bl	8000cec <FLASH_WaitForLastOperation>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8001000:	4b11      	ldr	r3, [pc, #68]	; (8001048 <HAL_FLASHEx_Erase+0xe0>)
 8001002:	691b      	ldr	r3, [r3, #16]
 8001004:	4a10      	ldr	r2, [pc, #64]	; (8001048 <HAL_FLASHEx_Erase+0xe0>)
 8001006:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 800100a:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 800100c:	7bfb      	ldrb	r3, [r7, #15]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d003      	beq.n	800101a <HAL_FLASHEx_Erase+0xb2>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	68ba      	ldr	r2, [r7, #8]
 8001016:	601a      	str	r2, [r3, #0]
          break;
 8001018:	e00a      	b.n	8001030 <HAL_FLASHEx_Erase+0xc8>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800101a:	68bb      	ldr	r3, [r7, #8]
 800101c:	3301      	adds	r3, #1
 800101e:	60bb      	str	r3, [r7, #8]
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	68da      	ldr	r2, [r3, #12]
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	689b      	ldr	r3, [r3, #8]
 8001028:	4413      	add	r3, r2
 800102a:	68ba      	ldr	r2, [r7, #8]
 800102c:	429a      	cmp	r2, r3
 800102e:	d3da      	bcc.n	8000fe6 <HAL_FLASHEx_Erase+0x7e>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 8001030:	f000 f894 	bl	800115c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001034:	4b03      	ldr	r3, [pc, #12]	; (8001044 <HAL_FLASHEx_Erase+0xdc>)
 8001036:	2200      	movs	r2, #0
 8001038:	761a      	strb	r2, [r3, #24]

  return status;
 800103a:	7bfb      	ldrb	r3, [r7, #15]
}
 800103c:	4618      	mov	r0, r3
 800103e:	3710      	adds	r7, #16
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	2000847c 	.word	0x2000847c
 8001048:	40023c00 	.word	0x40023c00

0800104c <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	4603      	mov	r3, r0
 8001054:	6039      	str	r1, [r7, #0]
 8001056:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* if the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001058:	4b18      	ldr	r3, [pc, #96]	; (80010bc <FLASH_MassErase+0x70>)
 800105a:	691b      	ldr	r3, [r3, #16]
 800105c:	4a17      	ldr	r2, [pc, #92]	; (80010bc <FLASH_MassErase+0x70>)
 800105e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001062:	6113      	str	r3, [r2, #16]

  if(Banks == FLASH_BANK_BOTH)
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	2b03      	cmp	r3, #3
 8001068:	d108      	bne.n	800107c <FLASH_MassErase+0x30>
  {
    /* bank1 & bank2 will be erased*/
    FLASH->CR |= FLASH_MER_BIT;
 800106a:	4b14      	ldr	r3, [pc, #80]	; (80010bc <FLASH_MassErase+0x70>)
 800106c:	691b      	ldr	r3, [r3, #16]
 800106e:	4a13      	ldr	r2, [pc, #76]	; (80010bc <FLASH_MassErase+0x70>)
 8001070:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001074:	f043 0304 	orr.w	r3, r3, #4
 8001078:	6113      	str	r3, [r2, #16]
 800107a:	e00f      	b.n	800109c <FLASH_MassErase+0x50>
  }
  else if(Banks == FLASH_BANK_1)
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	2b01      	cmp	r3, #1
 8001080:	d106      	bne.n	8001090 <FLASH_MassErase+0x44>
  {
    /*Only bank1 will be erased*/
    FLASH->CR |= FLASH_CR_MER1;
 8001082:	4b0e      	ldr	r3, [pc, #56]	; (80010bc <FLASH_MassErase+0x70>)
 8001084:	691b      	ldr	r3, [r3, #16]
 8001086:	4a0d      	ldr	r2, [pc, #52]	; (80010bc <FLASH_MassErase+0x70>)
 8001088:	f043 0304 	orr.w	r3, r3, #4
 800108c:	6113      	str	r3, [r2, #16]
 800108e:	e005      	b.n	800109c <FLASH_MassErase+0x50>
  }
  else
  {
    /*Only bank2 will be erased*/
    FLASH->CR |= FLASH_CR_MER2;
 8001090:	4b0a      	ldr	r3, [pc, #40]	; (80010bc <FLASH_MassErase+0x70>)
 8001092:	691b      	ldr	r3, [r3, #16]
 8001094:	4a09      	ldr	r2, [pc, #36]	; (80010bc <FLASH_MassErase+0x70>)
 8001096:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800109a:	6113      	str	r3, [r2, #16]
  }
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 800109c:	4b07      	ldr	r3, [pc, #28]	; (80010bc <FLASH_MassErase+0x70>)
 800109e:	691a      	ldr	r2, [r3, #16]
 80010a0:	79fb      	ldrb	r3, [r7, #7]
 80010a2:	021b      	lsls	r3, r3, #8
 80010a4:	4313      	orrs	r3, r2
 80010a6:	4a05      	ldr	r2, [pc, #20]	; (80010bc <FLASH_MassErase+0x70>)
 80010a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010ac:	6113      	str	r3, [r2, #16]
}
 80010ae:	bf00      	nop
 80010b0:	370c      	adds	r7, #12
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	40023c00 	.word	0x40023c00

080010c0 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b085      	sub	sp, #20
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	460b      	mov	r3, r1
 80010ca:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80010cc:	2300      	movs	r3, #0
 80010ce:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80010d0:	78fb      	ldrb	r3, [r7, #3]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d102      	bne.n	80010dc <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 80010d6:	2300      	movs	r3, #0
 80010d8:	60fb      	str	r3, [r7, #12]
 80010da:	e010      	b.n	80010fe <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80010dc:	78fb      	ldrb	r3, [r7, #3]
 80010de:	2b01      	cmp	r3, #1
 80010e0:	d103      	bne.n	80010ea <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80010e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010e6:	60fb      	str	r3, [r7, #12]
 80010e8:	e009      	b.n	80010fe <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80010ea:	78fb      	ldrb	r3, [r7, #3]
 80010ec:	2b02      	cmp	r3, #2
 80010ee:	d103      	bne.n	80010f8 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80010f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010f4:	60fb      	str	r3, [r7, #12]
 80010f6:	e002      	b.n	80010fe <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80010f8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010fc:	60fb      	str	r3, [r7, #12]
  }

  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if(Sector > FLASH_SECTOR_11) 
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2b0b      	cmp	r3, #11
 8001102:	d902      	bls.n	800110a <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4U;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	3304      	adds	r3, #4
 8001108:	607b      	str	r3, [r7, #4]
  }
  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800110a:	4b13      	ldr	r3, [pc, #76]	; (8001158 <FLASH_Erase_Sector+0x98>)
 800110c:	691b      	ldr	r3, [r3, #16]
 800110e:	4a12      	ldr	r2, [pc, #72]	; (8001158 <FLASH_Erase_Sector+0x98>)
 8001110:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001114:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8001116:	4b10      	ldr	r3, [pc, #64]	; (8001158 <FLASH_Erase_Sector+0x98>)
 8001118:	691a      	ldr	r2, [r3, #16]
 800111a:	490f      	ldr	r1, [pc, #60]	; (8001158 <FLASH_Erase_Sector+0x98>)
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	4313      	orrs	r3, r2
 8001120:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8001122:	4b0d      	ldr	r3, [pc, #52]	; (8001158 <FLASH_Erase_Sector+0x98>)
 8001124:	691b      	ldr	r3, [r3, #16]
 8001126:	4a0c      	ldr	r2, [pc, #48]	; (8001158 <FLASH_Erase_Sector+0x98>)
 8001128:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800112c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800112e:	4b0a      	ldr	r3, [pc, #40]	; (8001158 <FLASH_Erase_Sector+0x98>)
 8001130:	691a      	ldr	r2, [r3, #16]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	00db      	lsls	r3, r3, #3
 8001136:	4313      	orrs	r3, r2
 8001138:	4a07      	ldr	r2, [pc, #28]	; (8001158 <FLASH_Erase_Sector+0x98>)
 800113a:	f043 0302 	orr.w	r3, r3, #2
 800113e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8001140:	4b05      	ldr	r3, [pc, #20]	; (8001158 <FLASH_Erase_Sector+0x98>)
 8001142:	691b      	ldr	r3, [r3, #16]
 8001144:	4a04      	ldr	r2, [pc, #16]	; (8001158 <FLASH_Erase_Sector+0x98>)
 8001146:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800114a:	6113      	str	r3, [r2, #16]
}
 800114c:	bf00      	nop
 800114e:	3714      	adds	r7, #20
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr
 8001158:	40023c00 	.word	0x40023c00

0800115c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8001160:	4b20      	ldr	r3, [pc, #128]	; (80011e4 <FLASH_FlushCaches+0x88>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001168:	2b00      	cmp	r3, #0
 800116a:	d017      	beq.n	800119c <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800116c:	4b1d      	ldr	r3, [pc, #116]	; (80011e4 <FLASH_FlushCaches+0x88>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a1c      	ldr	r2, [pc, #112]	; (80011e4 <FLASH_FlushCaches+0x88>)
 8001172:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001176:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8001178:	4b1a      	ldr	r3, [pc, #104]	; (80011e4 <FLASH_FlushCaches+0x88>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a19      	ldr	r2, [pc, #100]	; (80011e4 <FLASH_FlushCaches+0x88>)
 800117e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001182:	6013      	str	r3, [r2, #0]
 8001184:	4b17      	ldr	r3, [pc, #92]	; (80011e4 <FLASH_FlushCaches+0x88>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a16      	ldr	r2, [pc, #88]	; (80011e4 <FLASH_FlushCaches+0x88>)
 800118a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800118e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001190:	4b14      	ldr	r3, [pc, #80]	; (80011e4 <FLASH_FlushCaches+0x88>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a13      	ldr	r2, [pc, #76]	; (80011e4 <FLASH_FlushCaches+0x88>)
 8001196:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800119a:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 800119c:	4b11      	ldr	r3, [pc, #68]	; (80011e4 <FLASH_FlushCaches+0x88>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d017      	beq.n	80011d8 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80011a8:	4b0e      	ldr	r3, [pc, #56]	; (80011e4 <FLASH_FlushCaches+0x88>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a0d      	ldr	r2, [pc, #52]	; (80011e4 <FLASH_FlushCaches+0x88>)
 80011ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80011b2:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80011b4:	4b0b      	ldr	r3, [pc, #44]	; (80011e4 <FLASH_FlushCaches+0x88>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a0a      	ldr	r2, [pc, #40]	; (80011e4 <FLASH_FlushCaches+0x88>)
 80011ba:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80011be:	6013      	str	r3, [r2, #0]
 80011c0:	4b08      	ldr	r3, [pc, #32]	; (80011e4 <FLASH_FlushCaches+0x88>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a07      	ldr	r2, [pc, #28]	; (80011e4 <FLASH_FlushCaches+0x88>)
 80011c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80011ca:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80011cc:	4b05      	ldr	r3, [pc, #20]	; (80011e4 <FLASH_FlushCaches+0x88>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a04      	ldr	r2, [pc, #16]	; (80011e4 <FLASH_FlushCaches+0x88>)
 80011d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011d6:	6013      	str	r3, [r2, #0]
  }
}
 80011d8:	bf00      	nop
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	40023c00 	.word	0x40023c00

080011e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b089      	sub	sp, #36	; 0x24
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011f2:	2300      	movs	r3, #0
 80011f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011f6:	2300      	movs	r3, #0
 80011f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011fa:	2300      	movs	r3, #0
 80011fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011fe:	2300      	movs	r3, #0
 8001200:	61fb      	str	r3, [r7, #28]
 8001202:	e177      	b.n	80014f4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001204:	2201      	movs	r2, #1
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	fa02 f303 	lsl.w	r3, r2, r3
 800120c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	697a      	ldr	r2, [r7, #20]
 8001214:	4013      	ands	r3, r2
 8001216:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001218:	693a      	ldr	r2, [r7, #16]
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	429a      	cmp	r2, r3
 800121e:	f040 8166 	bne.w	80014ee <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	2b01      	cmp	r3, #1
 8001228:	d00b      	beq.n	8001242 <HAL_GPIO_Init+0x5a>
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	2b02      	cmp	r3, #2
 8001230:	d007      	beq.n	8001242 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001236:	2b11      	cmp	r3, #17
 8001238:	d003      	beq.n	8001242 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	2b12      	cmp	r3, #18
 8001240:	d130      	bne.n	80012a4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	689b      	ldr	r3, [r3, #8]
 8001246:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001248:	69fb      	ldr	r3, [r7, #28]
 800124a:	005b      	lsls	r3, r3, #1
 800124c:	2203      	movs	r2, #3
 800124e:	fa02 f303 	lsl.w	r3, r2, r3
 8001252:	43db      	mvns	r3, r3
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	4013      	ands	r3, r2
 8001258:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	68da      	ldr	r2, [r3, #12]
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	005b      	lsls	r3, r3, #1
 8001262:	fa02 f303 	lsl.w	r3, r2, r3
 8001266:	69ba      	ldr	r2, [r7, #24]
 8001268:	4313      	orrs	r3, r2
 800126a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	69ba      	ldr	r2, [r7, #24]
 8001270:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001278:	2201      	movs	r2, #1
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	fa02 f303 	lsl.w	r3, r2, r3
 8001280:	43db      	mvns	r3, r3
 8001282:	69ba      	ldr	r2, [r7, #24]
 8001284:	4013      	ands	r3, r2
 8001286:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	091b      	lsrs	r3, r3, #4
 800128e:	f003 0201 	and.w	r2, r3, #1
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	fa02 f303 	lsl.w	r3, r2, r3
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	4313      	orrs	r3, r2
 800129c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	69ba      	ldr	r2, [r7, #24]
 80012a2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	68db      	ldr	r3, [r3, #12]
 80012a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	005b      	lsls	r3, r3, #1
 80012ae:	2203      	movs	r2, #3
 80012b0:	fa02 f303 	lsl.w	r3, r2, r3
 80012b4:	43db      	mvns	r3, r3
 80012b6:	69ba      	ldr	r2, [r7, #24]
 80012b8:	4013      	ands	r3, r2
 80012ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	689a      	ldr	r2, [r3, #8]
 80012c0:	69fb      	ldr	r3, [r7, #28]
 80012c2:	005b      	lsls	r3, r3, #1
 80012c4:	fa02 f303 	lsl.w	r3, r2, r3
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	4313      	orrs	r3, r2
 80012cc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	69ba      	ldr	r2, [r7, #24]
 80012d2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	2b02      	cmp	r3, #2
 80012da:	d003      	beq.n	80012e4 <HAL_GPIO_Init+0xfc>
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	2b12      	cmp	r3, #18
 80012e2:	d123      	bne.n	800132c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012e4:	69fb      	ldr	r3, [r7, #28]
 80012e6:	08da      	lsrs	r2, r3, #3
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	3208      	adds	r2, #8
 80012ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	f003 0307 	and.w	r3, r3, #7
 80012f8:	009b      	lsls	r3, r3, #2
 80012fa:	220f      	movs	r2, #15
 80012fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001300:	43db      	mvns	r3, r3
 8001302:	69ba      	ldr	r2, [r7, #24]
 8001304:	4013      	ands	r3, r2
 8001306:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	691a      	ldr	r2, [r3, #16]
 800130c:	69fb      	ldr	r3, [r7, #28]
 800130e:	f003 0307 	and.w	r3, r3, #7
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	fa02 f303 	lsl.w	r3, r2, r3
 8001318:	69ba      	ldr	r2, [r7, #24]
 800131a:	4313      	orrs	r3, r2
 800131c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	08da      	lsrs	r2, r3, #3
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	3208      	adds	r2, #8
 8001326:	69b9      	ldr	r1, [r7, #24]
 8001328:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	005b      	lsls	r3, r3, #1
 8001336:	2203      	movs	r2, #3
 8001338:	fa02 f303 	lsl.w	r3, r2, r3
 800133c:	43db      	mvns	r3, r3
 800133e:	69ba      	ldr	r2, [r7, #24]
 8001340:	4013      	ands	r3, r2
 8001342:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f003 0203 	and.w	r2, r3, #3
 800134c:	69fb      	ldr	r3, [r7, #28]
 800134e:	005b      	lsls	r3, r3, #1
 8001350:	fa02 f303 	lsl.w	r3, r2, r3
 8001354:	69ba      	ldr	r2, [r7, #24]
 8001356:	4313      	orrs	r3, r2
 8001358:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	69ba      	ldr	r2, [r7, #24]
 800135e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001368:	2b00      	cmp	r3, #0
 800136a:	f000 80c0 	beq.w	80014ee <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800136e:	2300      	movs	r3, #0
 8001370:	60fb      	str	r3, [r7, #12]
 8001372:	4b65      	ldr	r3, [pc, #404]	; (8001508 <HAL_GPIO_Init+0x320>)
 8001374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001376:	4a64      	ldr	r2, [pc, #400]	; (8001508 <HAL_GPIO_Init+0x320>)
 8001378:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800137c:	6453      	str	r3, [r2, #68]	; 0x44
 800137e:	4b62      	ldr	r3, [pc, #392]	; (8001508 <HAL_GPIO_Init+0x320>)
 8001380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001382:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001386:	60fb      	str	r3, [r7, #12]
 8001388:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800138a:	4a60      	ldr	r2, [pc, #384]	; (800150c <HAL_GPIO_Init+0x324>)
 800138c:	69fb      	ldr	r3, [r7, #28]
 800138e:	089b      	lsrs	r3, r3, #2
 8001390:	3302      	adds	r3, #2
 8001392:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001396:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001398:	69fb      	ldr	r3, [r7, #28]
 800139a:	f003 0303 	and.w	r3, r3, #3
 800139e:	009b      	lsls	r3, r3, #2
 80013a0:	220f      	movs	r2, #15
 80013a2:	fa02 f303 	lsl.w	r3, r2, r3
 80013a6:	43db      	mvns	r3, r3
 80013a8:	69ba      	ldr	r2, [r7, #24]
 80013aa:	4013      	ands	r3, r2
 80013ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4a57      	ldr	r2, [pc, #348]	; (8001510 <HAL_GPIO_Init+0x328>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d037      	beq.n	8001426 <HAL_GPIO_Init+0x23e>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4a56      	ldr	r2, [pc, #344]	; (8001514 <HAL_GPIO_Init+0x32c>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d031      	beq.n	8001422 <HAL_GPIO_Init+0x23a>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4a55      	ldr	r2, [pc, #340]	; (8001518 <HAL_GPIO_Init+0x330>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d02b      	beq.n	800141e <HAL_GPIO_Init+0x236>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4a54      	ldr	r2, [pc, #336]	; (800151c <HAL_GPIO_Init+0x334>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d025      	beq.n	800141a <HAL_GPIO_Init+0x232>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4a53      	ldr	r2, [pc, #332]	; (8001520 <HAL_GPIO_Init+0x338>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d01f      	beq.n	8001416 <HAL_GPIO_Init+0x22e>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	4a52      	ldr	r2, [pc, #328]	; (8001524 <HAL_GPIO_Init+0x33c>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d019      	beq.n	8001412 <HAL_GPIO_Init+0x22a>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4a51      	ldr	r2, [pc, #324]	; (8001528 <HAL_GPIO_Init+0x340>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d013      	beq.n	800140e <HAL_GPIO_Init+0x226>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	4a50      	ldr	r2, [pc, #320]	; (800152c <HAL_GPIO_Init+0x344>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d00d      	beq.n	800140a <HAL_GPIO_Init+0x222>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	4a4f      	ldr	r2, [pc, #316]	; (8001530 <HAL_GPIO_Init+0x348>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d007      	beq.n	8001406 <HAL_GPIO_Init+0x21e>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4a4e      	ldr	r2, [pc, #312]	; (8001534 <HAL_GPIO_Init+0x34c>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d101      	bne.n	8001402 <HAL_GPIO_Init+0x21a>
 80013fe:	2309      	movs	r3, #9
 8001400:	e012      	b.n	8001428 <HAL_GPIO_Init+0x240>
 8001402:	230a      	movs	r3, #10
 8001404:	e010      	b.n	8001428 <HAL_GPIO_Init+0x240>
 8001406:	2308      	movs	r3, #8
 8001408:	e00e      	b.n	8001428 <HAL_GPIO_Init+0x240>
 800140a:	2307      	movs	r3, #7
 800140c:	e00c      	b.n	8001428 <HAL_GPIO_Init+0x240>
 800140e:	2306      	movs	r3, #6
 8001410:	e00a      	b.n	8001428 <HAL_GPIO_Init+0x240>
 8001412:	2305      	movs	r3, #5
 8001414:	e008      	b.n	8001428 <HAL_GPIO_Init+0x240>
 8001416:	2304      	movs	r3, #4
 8001418:	e006      	b.n	8001428 <HAL_GPIO_Init+0x240>
 800141a:	2303      	movs	r3, #3
 800141c:	e004      	b.n	8001428 <HAL_GPIO_Init+0x240>
 800141e:	2302      	movs	r3, #2
 8001420:	e002      	b.n	8001428 <HAL_GPIO_Init+0x240>
 8001422:	2301      	movs	r3, #1
 8001424:	e000      	b.n	8001428 <HAL_GPIO_Init+0x240>
 8001426:	2300      	movs	r3, #0
 8001428:	69fa      	ldr	r2, [r7, #28]
 800142a:	f002 0203 	and.w	r2, r2, #3
 800142e:	0092      	lsls	r2, r2, #2
 8001430:	4093      	lsls	r3, r2
 8001432:	69ba      	ldr	r2, [r7, #24]
 8001434:	4313      	orrs	r3, r2
 8001436:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001438:	4934      	ldr	r1, [pc, #208]	; (800150c <HAL_GPIO_Init+0x324>)
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	089b      	lsrs	r3, r3, #2
 800143e:	3302      	adds	r3, #2
 8001440:	69ba      	ldr	r2, [r7, #24]
 8001442:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001446:	4b3c      	ldr	r3, [pc, #240]	; (8001538 <HAL_GPIO_Init+0x350>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	43db      	mvns	r3, r3
 8001450:	69ba      	ldr	r2, [r7, #24]
 8001452:	4013      	ands	r3, r2
 8001454:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800145e:	2b00      	cmp	r3, #0
 8001460:	d003      	beq.n	800146a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001462:	69ba      	ldr	r2, [r7, #24]
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	4313      	orrs	r3, r2
 8001468:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800146a:	4a33      	ldr	r2, [pc, #204]	; (8001538 <HAL_GPIO_Init+0x350>)
 800146c:	69bb      	ldr	r3, [r7, #24]
 800146e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001470:	4b31      	ldr	r3, [pc, #196]	; (8001538 <HAL_GPIO_Init+0x350>)
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	43db      	mvns	r3, r3
 800147a:	69ba      	ldr	r2, [r7, #24]
 800147c:	4013      	ands	r3, r2
 800147e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001488:	2b00      	cmp	r3, #0
 800148a:	d003      	beq.n	8001494 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800148c:	69ba      	ldr	r2, [r7, #24]
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	4313      	orrs	r3, r2
 8001492:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001494:	4a28      	ldr	r2, [pc, #160]	; (8001538 <HAL_GPIO_Init+0x350>)
 8001496:	69bb      	ldr	r3, [r7, #24]
 8001498:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800149a:	4b27      	ldr	r3, [pc, #156]	; (8001538 <HAL_GPIO_Init+0x350>)
 800149c:	689b      	ldr	r3, [r3, #8]
 800149e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	43db      	mvns	r3, r3
 80014a4:	69ba      	ldr	r2, [r7, #24]
 80014a6:	4013      	ands	r3, r2
 80014a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d003      	beq.n	80014be <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80014b6:	69ba      	ldr	r2, [r7, #24]
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	4313      	orrs	r3, r2
 80014bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014be:	4a1e      	ldr	r2, [pc, #120]	; (8001538 <HAL_GPIO_Init+0x350>)
 80014c0:	69bb      	ldr	r3, [r7, #24]
 80014c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014c4:	4b1c      	ldr	r3, [pc, #112]	; (8001538 <HAL_GPIO_Init+0x350>)
 80014c6:	68db      	ldr	r3, [r3, #12]
 80014c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	43db      	mvns	r3, r3
 80014ce:	69ba      	ldr	r2, [r7, #24]
 80014d0:	4013      	ands	r3, r2
 80014d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d003      	beq.n	80014e8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80014e0:	69ba      	ldr	r2, [r7, #24]
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	4313      	orrs	r3, r2
 80014e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014e8:	4a13      	ldr	r2, [pc, #76]	; (8001538 <HAL_GPIO_Init+0x350>)
 80014ea:	69bb      	ldr	r3, [r7, #24]
 80014ec:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	3301      	adds	r3, #1
 80014f2:	61fb      	str	r3, [r7, #28]
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	2b0f      	cmp	r3, #15
 80014f8:	f67f ae84 	bls.w	8001204 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014fc:	bf00      	nop
 80014fe:	3724      	adds	r7, #36	; 0x24
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr
 8001508:	40023800 	.word	0x40023800
 800150c:	40013800 	.word	0x40013800
 8001510:	40020000 	.word	0x40020000
 8001514:	40020400 	.word	0x40020400
 8001518:	40020800 	.word	0x40020800
 800151c:	40020c00 	.word	0x40020c00
 8001520:	40021000 	.word	0x40021000
 8001524:	40021400 	.word	0x40021400
 8001528:	40021800 	.word	0x40021800
 800152c:	40021c00 	.word	0x40021c00
 8001530:	40022000 	.word	0x40022000
 8001534:	40022400 	.word	0x40022400
 8001538:	40013c00 	.word	0x40013c00

0800153c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800153c:	b480      	push	{r7}
 800153e:	b085      	sub	sp, #20
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	460b      	mov	r3, r1
 8001546:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	691a      	ldr	r2, [r3, #16]
 800154c:	887b      	ldrh	r3, [r7, #2]
 800154e:	4013      	ands	r3, r2
 8001550:	2b00      	cmp	r3, #0
 8001552:	d002      	beq.n	800155a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001554:	2301      	movs	r3, #1
 8001556:	73fb      	strb	r3, [r7, #15]
 8001558:	e001      	b.n	800155e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800155a:	2300      	movs	r3, #0
 800155c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800155e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001560:	4618      	mov	r0, r3
 8001562:	3714      	adds	r7, #20
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr

0800156c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800156c:	b480      	push	{r7}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
 8001574:	460b      	mov	r3, r1
 8001576:	807b      	strh	r3, [r7, #2]
 8001578:	4613      	mov	r3, r2
 800157a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800157c:	787b      	ldrb	r3, [r7, #1]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d003      	beq.n	800158a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001582:	887a      	ldrh	r2, [r7, #2]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001588:	e003      	b.n	8001592 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800158a:	887b      	ldrh	r3, [r7, #2]
 800158c:	041a      	lsls	r2, r3, #16
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	619a      	str	r2, [r3, #24]
}
 8001592:	bf00      	nop
 8001594:	370c      	adds	r7, #12
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr
	...

080015a0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	4603      	mov	r3, r0
 80015a8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80015aa:	4b08      	ldr	r3, [pc, #32]	; (80015cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80015ac:	695a      	ldr	r2, [r3, #20]
 80015ae:	88fb      	ldrh	r3, [r7, #6]
 80015b0:	4013      	ands	r3, r2
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d006      	beq.n	80015c4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80015b6:	4a05      	ldr	r2, [pc, #20]	; (80015cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80015b8:	88fb      	ldrh	r3, [r7, #6]
 80015ba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80015bc:	88fb      	ldrh	r3, [r7, #6]
 80015be:	4618      	mov	r0, r3
 80015c0:	f000 f806 	bl	80015d0 <HAL_GPIO_EXTI_Callback>
  }
}
 80015c4:	bf00      	nop
 80015c6:	3708      	adds	r7, #8
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	40013c00 	.word	0x40013c00

080015d0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	4603      	mov	r3, r0
 80015d8:	80fb      	strh	r3, [r7, #6]

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */

  if(GPIO_Pin == GPIO_PIN_0)
 80015da:	88fb      	ldrh	r3, [r7, #6]
 80015dc:	2b01      	cmp	r3, #1
 80015de:	d102      	bne.n	80015e6 <HAL_GPIO_EXTI_Callback+0x16>
  {
	  buttonPressed = true;
 80015e0:	4b04      	ldr	r3, [pc, #16]	; (80015f4 <HAL_GPIO_EXTI_Callback+0x24>)
 80015e2:	2201      	movs	r2, #1
 80015e4:	701a      	strb	r2, [r3, #0]
  }

}
 80015e6:	bf00      	nop
 80015e8:	370c      	adds	r7, #12
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	20008768 	.word	0x20008768

080015f8 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80015f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015fa:	b08f      	sub	sp, #60	; 0x3c
 80015fc:	af0a      	add	r7, sp, #40	; 0x28
 80015fe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d101      	bne.n	800160a <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e054      	b.n	80016b4 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8001616:	b2db      	uxtb	r3, r3
 8001618:	2b00      	cmp	r3, #0
 800161a:	d106      	bne.n	800162a <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2200      	movs	r2, #0
 8001620:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	f00b f839 	bl	800c69c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2203      	movs	r2, #3
 800162e:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001636:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800163a:	2b00      	cmp	r3, #0
 800163c:	d102      	bne.n	8001644 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2200      	movs	r2, #0
 8001642:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4618      	mov	r0, r3
 800164a:	f004 faf9 	bl	8005c40 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	603b      	str	r3, [r7, #0]
 8001654:	687e      	ldr	r6, [r7, #4]
 8001656:	466d      	mov	r5, sp
 8001658:	f106 0410 	add.w	r4, r6, #16
 800165c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800165e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001660:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001662:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001664:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001668:	e885 0003 	stmia.w	r5, {r0, r1}
 800166c:	1d33      	adds	r3, r6, #4
 800166e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001670:	6838      	ldr	r0, [r7, #0]
 8001672:	f004 fa73 	bl	8005b5c <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	2101      	movs	r1, #1
 800167c:	4618      	mov	r0, r3
 800167e:	f004 faf0 	bl	8005c62 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	603b      	str	r3, [r7, #0]
 8001688:	687e      	ldr	r6, [r7, #4]
 800168a:	466d      	mov	r5, sp
 800168c:	f106 0410 	add.w	r4, r6, #16
 8001690:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001692:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001694:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001696:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001698:	e894 0003 	ldmia.w	r4, {r0, r1}
 800169c:	e885 0003 	stmia.w	r5, {r0, r1}
 80016a0:	1d33      	adds	r3, r6, #4
 80016a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016a4:	6838      	ldr	r0, [r7, #0]
 80016a6:	f004 fc03 	bl	8005eb0 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2201      	movs	r2, #1
 80016ae:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 80016b2:	2300      	movs	r3, #0
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	3714      	adds	r7, #20
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

080016bc <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80016bc:	b590      	push	{r4, r7, lr}
 80016be:	b089      	sub	sp, #36	; 0x24
 80016c0:	af04      	add	r7, sp, #16
 80016c2:	6078      	str	r0, [r7, #4]
 80016c4:	4608      	mov	r0, r1
 80016c6:	4611      	mov	r1, r2
 80016c8:	461a      	mov	r2, r3
 80016ca:	4603      	mov	r3, r0
 80016cc:	70fb      	strb	r3, [r7, #3]
 80016ce:	460b      	mov	r3, r1
 80016d0:	70bb      	strb	r3, [r7, #2]
 80016d2:	4613      	mov	r3, r2
 80016d4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80016dc:	2b01      	cmp	r3, #1
 80016de:	d101      	bne.n	80016e4 <HAL_HCD_HC_Init+0x28>
 80016e0:	2302      	movs	r3, #2
 80016e2:	e07f      	b.n	80017e4 <HAL_HCD_HC_Init+0x128>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2201      	movs	r2, #1
 80016e8:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 80016ec:	78fa      	ldrb	r2, [r7, #3]
 80016ee:	6879      	ldr	r1, [r7, #4]
 80016f0:	4613      	mov	r3, r2
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	4413      	add	r3, r2
 80016f6:	00db      	lsls	r3, r3, #3
 80016f8:	440b      	add	r3, r1
 80016fa:	333d      	adds	r3, #61	; 0x3d
 80016fc:	2200      	movs	r2, #0
 80016fe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001700:	78fa      	ldrb	r2, [r7, #3]
 8001702:	6879      	ldr	r1, [r7, #4]
 8001704:	4613      	mov	r3, r2
 8001706:	009b      	lsls	r3, r3, #2
 8001708:	4413      	add	r3, r2
 800170a:	00db      	lsls	r3, r3, #3
 800170c:	440b      	add	r3, r1
 800170e:	3338      	adds	r3, #56	; 0x38
 8001710:	787a      	ldrb	r2, [r7, #1]
 8001712:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001714:	78fa      	ldrb	r2, [r7, #3]
 8001716:	6879      	ldr	r1, [r7, #4]
 8001718:	4613      	mov	r3, r2
 800171a:	009b      	lsls	r3, r3, #2
 800171c:	4413      	add	r3, r2
 800171e:	00db      	lsls	r3, r3, #3
 8001720:	440b      	add	r3, r1
 8001722:	3340      	adds	r3, #64	; 0x40
 8001724:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001726:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001728:	78fa      	ldrb	r2, [r7, #3]
 800172a:	6879      	ldr	r1, [r7, #4]
 800172c:	4613      	mov	r3, r2
 800172e:	009b      	lsls	r3, r3, #2
 8001730:	4413      	add	r3, r2
 8001732:	00db      	lsls	r3, r3, #3
 8001734:	440b      	add	r3, r1
 8001736:	3339      	adds	r3, #57	; 0x39
 8001738:	78fa      	ldrb	r2, [r7, #3]
 800173a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800173c:	78fa      	ldrb	r2, [r7, #3]
 800173e:	6879      	ldr	r1, [r7, #4]
 8001740:	4613      	mov	r3, r2
 8001742:	009b      	lsls	r3, r3, #2
 8001744:	4413      	add	r3, r2
 8001746:	00db      	lsls	r3, r3, #3
 8001748:	440b      	add	r3, r1
 800174a:	333f      	adds	r3, #63	; 0x3f
 800174c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001750:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001752:	78fa      	ldrb	r2, [r7, #3]
 8001754:	78bb      	ldrb	r3, [r7, #2]
 8001756:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800175a:	b2d8      	uxtb	r0, r3
 800175c:	6879      	ldr	r1, [r7, #4]
 800175e:	4613      	mov	r3, r2
 8001760:	009b      	lsls	r3, r3, #2
 8001762:	4413      	add	r3, r2
 8001764:	00db      	lsls	r3, r3, #3
 8001766:	440b      	add	r3, r1
 8001768:	333a      	adds	r3, #58	; 0x3a
 800176a:	4602      	mov	r2, r0
 800176c:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 800176e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001772:	2b00      	cmp	r3, #0
 8001774:	da0a      	bge.n	800178c <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001776:	78fa      	ldrb	r2, [r7, #3]
 8001778:	6879      	ldr	r1, [r7, #4]
 800177a:	4613      	mov	r3, r2
 800177c:	009b      	lsls	r3, r3, #2
 800177e:	4413      	add	r3, r2
 8001780:	00db      	lsls	r3, r3, #3
 8001782:	440b      	add	r3, r1
 8001784:	333b      	adds	r3, #59	; 0x3b
 8001786:	2201      	movs	r2, #1
 8001788:	701a      	strb	r2, [r3, #0]
 800178a:	e009      	b.n	80017a0 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800178c:	78fa      	ldrb	r2, [r7, #3]
 800178e:	6879      	ldr	r1, [r7, #4]
 8001790:	4613      	mov	r3, r2
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	4413      	add	r3, r2
 8001796:	00db      	lsls	r3, r3, #3
 8001798:	440b      	add	r3, r1
 800179a:	333b      	adds	r3, #59	; 0x3b
 800179c:	2200      	movs	r2, #0
 800179e:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80017a0:	78fa      	ldrb	r2, [r7, #3]
 80017a2:	6879      	ldr	r1, [r7, #4]
 80017a4:	4613      	mov	r3, r2
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	4413      	add	r3, r2
 80017aa:	00db      	lsls	r3, r3, #3
 80017ac:	440b      	add	r3, r1
 80017ae:	333c      	adds	r3, #60	; 0x3c
 80017b0:	f897 2020 	ldrb.w	r2, [r7, #32]
 80017b4:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6818      	ldr	r0, [r3, #0]
 80017ba:	787c      	ldrb	r4, [r7, #1]
 80017bc:	78ba      	ldrb	r2, [r7, #2]
 80017be:	78f9      	ldrb	r1, [r7, #3]
 80017c0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80017c2:	9302      	str	r3, [sp, #8]
 80017c4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80017c8:	9301      	str	r3, [sp, #4]
 80017ca:	f897 3020 	ldrb.w	r3, [r7, #32]
 80017ce:	9300      	str	r3, [sp, #0]
 80017d0:	4623      	mov	r3, r4
 80017d2:	f004 fcef 	bl	80061b4 <USB_HC_Init>
 80017d6:	4603      	mov	r3, r0
 80017d8:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2200      	movs	r2, #0
 80017de:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80017e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	3714      	adds	r7, #20
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd90      	pop	{r4, r7, pc}

080017ec <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b084      	sub	sp, #16
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
 80017f4:	460b      	mov	r3, r1
 80017f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80017f8:	2300      	movs	r3, #0
 80017fa:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001802:	2b01      	cmp	r3, #1
 8001804:	d101      	bne.n	800180a <HAL_HCD_HC_Halt+0x1e>
 8001806:	2302      	movs	r3, #2
 8001808:	e00f      	b.n	800182a <HAL_HCD_HC_Halt+0x3e>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2201      	movs	r2, #1
 800180e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	78fa      	ldrb	r2, [r7, #3]
 8001818:	4611      	mov	r1, r2
 800181a:	4618      	mov	r0, r3
 800181c:	f004 ff29 	bl	8006672 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2200      	movs	r2, #0
 8001824:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8001828:	7bfb      	ldrb	r3, [r7, #15]
}
 800182a:	4618      	mov	r0, r3
 800182c:	3710      	adds	r7, #16
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
	...

08001834 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	4608      	mov	r0, r1
 800183e:	4611      	mov	r1, r2
 8001840:	461a      	mov	r2, r3
 8001842:	4603      	mov	r3, r0
 8001844:	70fb      	strb	r3, [r7, #3]
 8001846:	460b      	mov	r3, r1
 8001848:	70bb      	strb	r3, [r7, #2]
 800184a:	4613      	mov	r3, r2
 800184c:	707b      	strb	r3, [r7, #1]
  UNUSED(do_ping);

  hhcd->hc[ch_num].ep_is_in = direction;
 800184e:	78fa      	ldrb	r2, [r7, #3]
 8001850:	6879      	ldr	r1, [r7, #4]
 8001852:	4613      	mov	r3, r2
 8001854:	009b      	lsls	r3, r3, #2
 8001856:	4413      	add	r3, r2
 8001858:	00db      	lsls	r3, r3, #3
 800185a:	440b      	add	r3, r1
 800185c:	333b      	adds	r3, #59	; 0x3b
 800185e:	78ba      	ldrb	r2, [r7, #2]
 8001860:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001862:	78fa      	ldrb	r2, [r7, #3]
 8001864:	6879      	ldr	r1, [r7, #4]
 8001866:	4613      	mov	r3, r2
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	4413      	add	r3, r2
 800186c:	00db      	lsls	r3, r3, #3
 800186e:	440b      	add	r3, r1
 8001870:	333f      	adds	r3, #63	; 0x3f
 8001872:	787a      	ldrb	r2, [r7, #1]
 8001874:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001876:	7c3b      	ldrb	r3, [r7, #16]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d10a      	bne.n	8001892 <HAL_HCD_HC_SubmitRequest+0x5e>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800187c:	78fa      	ldrb	r2, [r7, #3]
 800187e:	6879      	ldr	r1, [r7, #4]
 8001880:	4613      	mov	r3, r2
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	4413      	add	r3, r2
 8001886:	00db      	lsls	r3, r3, #3
 8001888:	440b      	add	r3, r1
 800188a:	3342      	adds	r3, #66	; 0x42
 800188c:	2203      	movs	r2, #3
 800188e:	701a      	strb	r2, [r3, #0]
 8001890:	e009      	b.n	80018a6 <HAL_HCD_HC_SubmitRequest+0x72>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001892:	78fa      	ldrb	r2, [r7, #3]
 8001894:	6879      	ldr	r1, [r7, #4]
 8001896:	4613      	mov	r3, r2
 8001898:	009b      	lsls	r3, r3, #2
 800189a:	4413      	add	r3, r2
 800189c:	00db      	lsls	r3, r3, #3
 800189e:	440b      	add	r3, r1
 80018a0:	3342      	adds	r3, #66	; 0x42
 80018a2:	2202      	movs	r2, #2
 80018a4:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80018a6:	787b      	ldrb	r3, [r7, #1]
 80018a8:	2b03      	cmp	r3, #3
 80018aa:	f200 80d6 	bhi.w	8001a5a <HAL_HCD_HC_SubmitRequest+0x226>
 80018ae:	a201      	add	r2, pc, #4	; (adr r2, 80018b4 <HAL_HCD_HC_SubmitRequest+0x80>)
 80018b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018b4:	080018c5 	.word	0x080018c5
 80018b8:	08001a45 	.word	0x08001a45
 80018bc:	08001931 	.word	0x08001931
 80018c0:	080019bb 	.word	0x080019bb
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80018c4:	7c3b      	ldrb	r3, [r7, #16]
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	f040 80c9 	bne.w	8001a5e <HAL_HCD_HC_SubmitRequest+0x22a>
 80018cc:	78bb      	ldrb	r3, [r7, #2]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	f040 80c5 	bne.w	8001a5e <HAL_HCD_HC_SubmitRequest+0x22a>
      {
        if (length == 0U)
 80018d4:	8b3b      	ldrh	r3, [r7, #24]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d109      	bne.n	80018ee <HAL_HCD_HC_SubmitRequest+0xba>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80018da:	78fa      	ldrb	r2, [r7, #3]
 80018dc:	6879      	ldr	r1, [r7, #4]
 80018de:	4613      	mov	r3, r2
 80018e0:	009b      	lsls	r3, r3, #2
 80018e2:	4413      	add	r3, r2
 80018e4:	00db      	lsls	r3, r3, #3
 80018e6:	440b      	add	r3, r1
 80018e8:	3351      	adds	r3, #81	; 0x51
 80018ea:	2201      	movs	r2, #1
 80018ec:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80018ee:	78fa      	ldrb	r2, [r7, #3]
 80018f0:	6879      	ldr	r1, [r7, #4]
 80018f2:	4613      	mov	r3, r2
 80018f4:	009b      	lsls	r3, r3, #2
 80018f6:	4413      	add	r3, r2
 80018f8:	00db      	lsls	r3, r3, #3
 80018fa:	440b      	add	r3, r1
 80018fc:	3351      	adds	r3, #81	; 0x51
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d10a      	bne.n	800191a <HAL_HCD_HC_SubmitRequest+0xe6>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001904:	78fa      	ldrb	r2, [r7, #3]
 8001906:	6879      	ldr	r1, [r7, #4]
 8001908:	4613      	mov	r3, r2
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	4413      	add	r3, r2
 800190e:	00db      	lsls	r3, r3, #3
 8001910:	440b      	add	r3, r1
 8001912:	3342      	adds	r3, #66	; 0x42
 8001914:	2200      	movs	r2, #0
 8001916:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001918:	e0a1      	b.n	8001a5e <HAL_HCD_HC_SubmitRequest+0x22a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800191a:	78fa      	ldrb	r2, [r7, #3]
 800191c:	6879      	ldr	r1, [r7, #4]
 800191e:	4613      	mov	r3, r2
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	4413      	add	r3, r2
 8001924:	00db      	lsls	r3, r3, #3
 8001926:	440b      	add	r3, r1
 8001928:	3342      	adds	r3, #66	; 0x42
 800192a:	2202      	movs	r2, #2
 800192c:	701a      	strb	r2, [r3, #0]
      break;
 800192e:	e096      	b.n	8001a5e <HAL_HCD_HC_SubmitRequest+0x22a>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001930:	78bb      	ldrb	r3, [r7, #2]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d120      	bne.n	8001978 <HAL_HCD_HC_SubmitRequest+0x144>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001936:	78fa      	ldrb	r2, [r7, #3]
 8001938:	6879      	ldr	r1, [r7, #4]
 800193a:	4613      	mov	r3, r2
 800193c:	009b      	lsls	r3, r3, #2
 800193e:	4413      	add	r3, r2
 8001940:	00db      	lsls	r3, r3, #3
 8001942:	440b      	add	r3, r1
 8001944:	3351      	adds	r3, #81	; 0x51
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d10a      	bne.n	8001962 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800194c:	78fa      	ldrb	r2, [r7, #3]
 800194e:	6879      	ldr	r1, [r7, #4]
 8001950:	4613      	mov	r3, r2
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	4413      	add	r3, r2
 8001956:	00db      	lsls	r3, r3, #3
 8001958:	440b      	add	r3, r1
 800195a:	3342      	adds	r3, #66	; 0x42
 800195c:	2200      	movs	r2, #0
 800195e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001960:	e07e      	b.n	8001a60 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001962:	78fa      	ldrb	r2, [r7, #3]
 8001964:	6879      	ldr	r1, [r7, #4]
 8001966:	4613      	mov	r3, r2
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	4413      	add	r3, r2
 800196c:	00db      	lsls	r3, r3, #3
 800196e:	440b      	add	r3, r1
 8001970:	3342      	adds	r3, #66	; 0x42
 8001972:	2202      	movs	r2, #2
 8001974:	701a      	strb	r2, [r3, #0]
      break;
 8001976:	e073      	b.n	8001a60 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001978:	78fa      	ldrb	r2, [r7, #3]
 800197a:	6879      	ldr	r1, [r7, #4]
 800197c:	4613      	mov	r3, r2
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	4413      	add	r3, r2
 8001982:	00db      	lsls	r3, r3, #3
 8001984:	440b      	add	r3, r1
 8001986:	3350      	adds	r3, #80	; 0x50
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d10a      	bne.n	80019a4 <HAL_HCD_HC_SubmitRequest+0x170>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800198e:	78fa      	ldrb	r2, [r7, #3]
 8001990:	6879      	ldr	r1, [r7, #4]
 8001992:	4613      	mov	r3, r2
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	4413      	add	r3, r2
 8001998:	00db      	lsls	r3, r3, #3
 800199a:	440b      	add	r3, r1
 800199c:	3342      	adds	r3, #66	; 0x42
 800199e:	2200      	movs	r2, #0
 80019a0:	701a      	strb	r2, [r3, #0]
      break;
 80019a2:	e05d      	b.n	8001a60 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019a4:	78fa      	ldrb	r2, [r7, #3]
 80019a6:	6879      	ldr	r1, [r7, #4]
 80019a8:	4613      	mov	r3, r2
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	4413      	add	r3, r2
 80019ae:	00db      	lsls	r3, r3, #3
 80019b0:	440b      	add	r3, r1
 80019b2:	3342      	adds	r3, #66	; 0x42
 80019b4:	2202      	movs	r2, #2
 80019b6:	701a      	strb	r2, [r3, #0]
      break;
 80019b8:	e052      	b.n	8001a60 <HAL_HCD_HC_SubmitRequest+0x22c>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80019ba:	78bb      	ldrb	r3, [r7, #2]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d120      	bne.n	8001a02 <HAL_HCD_HC_SubmitRequest+0x1ce>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80019c0:	78fa      	ldrb	r2, [r7, #3]
 80019c2:	6879      	ldr	r1, [r7, #4]
 80019c4:	4613      	mov	r3, r2
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	4413      	add	r3, r2
 80019ca:	00db      	lsls	r3, r3, #3
 80019cc:	440b      	add	r3, r1
 80019ce:	3351      	adds	r3, #81	; 0x51
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d10a      	bne.n	80019ec <HAL_HCD_HC_SubmitRequest+0x1b8>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019d6:	78fa      	ldrb	r2, [r7, #3]
 80019d8:	6879      	ldr	r1, [r7, #4]
 80019da:	4613      	mov	r3, r2
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	4413      	add	r3, r2
 80019e0:	00db      	lsls	r3, r3, #3
 80019e2:	440b      	add	r3, r1
 80019e4:	3342      	adds	r3, #66	; 0x42
 80019e6:	2200      	movs	r2, #0
 80019e8:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80019ea:	e039      	b.n	8001a60 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019ec:	78fa      	ldrb	r2, [r7, #3]
 80019ee:	6879      	ldr	r1, [r7, #4]
 80019f0:	4613      	mov	r3, r2
 80019f2:	009b      	lsls	r3, r3, #2
 80019f4:	4413      	add	r3, r2
 80019f6:	00db      	lsls	r3, r3, #3
 80019f8:	440b      	add	r3, r1
 80019fa:	3342      	adds	r3, #66	; 0x42
 80019fc:	2202      	movs	r2, #2
 80019fe:	701a      	strb	r2, [r3, #0]
      break;
 8001a00:	e02e      	b.n	8001a60 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001a02:	78fa      	ldrb	r2, [r7, #3]
 8001a04:	6879      	ldr	r1, [r7, #4]
 8001a06:	4613      	mov	r3, r2
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	4413      	add	r3, r2
 8001a0c:	00db      	lsls	r3, r3, #3
 8001a0e:	440b      	add	r3, r1
 8001a10:	3350      	adds	r3, #80	; 0x50
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d10a      	bne.n	8001a2e <HAL_HCD_HC_SubmitRequest+0x1fa>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a18:	78fa      	ldrb	r2, [r7, #3]
 8001a1a:	6879      	ldr	r1, [r7, #4]
 8001a1c:	4613      	mov	r3, r2
 8001a1e:	009b      	lsls	r3, r3, #2
 8001a20:	4413      	add	r3, r2
 8001a22:	00db      	lsls	r3, r3, #3
 8001a24:	440b      	add	r3, r1
 8001a26:	3342      	adds	r3, #66	; 0x42
 8001a28:	2200      	movs	r2, #0
 8001a2a:	701a      	strb	r2, [r3, #0]
      break;
 8001a2c:	e018      	b.n	8001a60 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a2e:	78fa      	ldrb	r2, [r7, #3]
 8001a30:	6879      	ldr	r1, [r7, #4]
 8001a32:	4613      	mov	r3, r2
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	4413      	add	r3, r2
 8001a38:	00db      	lsls	r3, r3, #3
 8001a3a:	440b      	add	r3, r1
 8001a3c:	3342      	adds	r3, #66	; 0x42
 8001a3e:	2202      	movs	r2, #2
 8001a40:	701a      	strb	r2, [r3, #0]
      break;
 8001a42:	e00d      	b.n	8001a60 <HAL_HCD_HC_SubmitRequest+0x22c>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a44:	78fa      	ldrb	r2, [r7, #3]
 8001a46:	6879      	ldr	r1, [r7, #4]
 8001a48:	4613      	mov	r3, r2
 8001a4a:	009b      	lsls	r3, r3, #2
 8001a4c:	4413      	add	r3, r2
 8001a4e:	00db      	lsls	r3, r3, #3
 8001a50:	440b      	add	r3, r1
 8001a52:	3342      	adds	r3, #66	; 0x42
 8001a54:	2200      	movs	r2, #0
 8001a56:	701a      	strb	r2, [r3, #0]
      break;
 8001a58:	e002      	b.n	8001a60 <HAL_HCD_HC_SubmitRequest+0x22c>

    default:
      break;
 8001a5a:	bf00      	nop
 8001a5c:	e000      	b.n	8001a60 <HAL_HCD_HC_SubmitRequest+0x22c>
      break;
 8001a5e:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001a60:	78fa      	ldrb	r2, [r7, #3]
 8001a62:	6879      	ldr	r1, [r7, #4]
 8001a64:	4613      	mov	r3, r2
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	4413      	add	r3, r2
 8001a6a:	00db      	lsls	r3, r3, #3
 8001a6c:	440b      	add	r3, r1
 8001a6e:	3344      	adds	r3, #68	; 0x44
 8001a70:	697a      	ldr	r2, [r7, #20]
 8001a72:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001a74:	78fa      	ldrb	r2, [r7, #3]
 8001a76:	8b39      	ldrh	r1, [r7, #24]
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	4613      	mov	r3, r2
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	4413      	add	r3, r2
 8001a80:	00db      	lsls	r3, r3, #3
 8001a82:	4403      	add	r3, r0
 8001a84:	3348      	adds	r3, #72	; 0x48
 8001a86:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001a88:	78fa      	ldrb	r2, [r7, #3]
 8001a8a:	6879      	ldr	r1, [r7, #4]
 8001a8c:	4613      	mov	r3, r2
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	4413      	add	r3, r2
 8001a92:	00db      	lsls	r3, r3, #3
 8001a94:	440b      	add	r3, r1
 8001a96:	335c      	adds	r3, #92	; 0x5c
 8001a98:	2200      	movs	r2, #0
 8001a9a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001a9c:	78fa      	ldrb	r2, [r7, #3]
 8001a9e:	6879      	ldr	r1, [r7, #4]
 8001aa0:	4613      	mov	r3, r2
 8001aa2:	009b      	lsls	r3, r3, #2
 8001aa4:	4413      	add	r3, r2
 8001aa6:	00db      	lsls	r3, r3, #3
 8001aa8:	440b      	add	r3, r1
 8001aaa:	334c      	adds	r3, #76	; 0x4c
 8001aac:	2200      	movs	r2, #0
 8001aae:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001ab0:	78fa      	ldrb	r2, [r7, #3]
 8001ab2:	6879      	ldr	r1, [r7, #4]
 8001ab4:	4613      	mov	r3, r2
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	4413      	add	r3, r2
 8001aba:	00db      	lsls	r3, r3, #3
 8001abc:	440b      	add	r3, r1
 8001abe:	3339      	adds	r3, #57	; 0x39
 8001ac0:	78fa      	ldrb	r2, [r7, #3]
 8001ac2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001ac4:	78fa      	ldrb	r2, [r7, #3]
 8001ac6:	6879      	ldr	r1, [r7, #4]
 8001ac8:	4613      	mov	r3, r2
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	4413      	add	r3, r2
 8001ace:	00db      	lsls	r3, r3, #3
 8001ad0:	440b      	add	r3, r1
 8001ad2:	335d      	adds	r3, #93	; 0x5d
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6818      	ldr	r0, [r3, #0]
 8001adc:	78fa      	ldrb	r2, [r7, #3]
 8001ade:	4613      	mov	r3, r2
 8001ae0:	009b      	lsls	r3, r3, #2
 8001ae2:	4413      	add	r3, r2
 8001ae4:	00db      	lsls	r3, r3, #3
 8001ae6:	3338      	adds	r3, #56	; 0x38
 8001ae8:	687a      	ldr	r2, [r7, #4]
 8001aea:	18d1      	adds	r1, r2, r3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	691b      	ldr	r3, [r3, #16]
 8001af0:	b2db      	uxtb	r3, r3
 8001af2:	461a      	mov	r2, r3
 8001af4:	f004 fc68 	bl	80063c8 <USB_HC_StartXfer>
 8001af8:	4603      	mov	r3, r0
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3708      	adds	r7, #8
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop

08001b04 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b086      	sub	sp, #24
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f004 f985 	bl	8005e2a <USB_GetMode>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	f040 80f1 	bne.w	8001d0a <HAL_HCD_IRQHandler+0x206>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f004 f969 	bl	8005e04 <USB_ReadInterrupts>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	f000 80e7 	beq.w	8001d08 <HAL_HCD_IRQHandler+0x204>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f004 f960 	bl	8005e04 <USB_ReadInterrupts>
 8001b44:	4603      	mov	r3, r0
 8001b46:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b4a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001b4e:	d104      	bne.n	8001b5a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001b58:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f004 f950 	bl	8005e04 <USB_ReadInterrupts>
 8001b64:	4603      	mov	r3, r0
 8001b66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001b6e:	d104      	bne.n	8001b7a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001b78:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f004 f940 	bl	8005e04 <USB_ReadInterrupts>
 8001b84:	4603      	mov	r3, r0
 8001b86:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001b8a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001b8e:	d104      	bne.n	8001b9a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001b98:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f004 f930 	bl	8005e04 <USB_ReadInterrupts>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	f003 0302 	and.w	r3, r3, #2
 8001baa:	2b02      	cmp	r3, #2
 8001bac:	d103      	bne.n	8001bb6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	2202      	movs	r2, #2
 8001bb4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f004 f922 	bl	8005e04 <USB_ReadInterrupts>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001bc6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001bca:	d117      	bne.n	8001bfc <HAL_HCD_IRQHandler+0xf8>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	68fa      	ldr	r2, [r7, #12]
 8001bd6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8001bda:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8001bde:	6013      	str	r3, [r2, #0]

      /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->DisconnectCallback(hhcd);
#else
      HAL_HCD_Disconnect_Callback(hhcd);
 8001be0:	6878      	ldr	r0, [r7, #4]
 8001be2:	f00a fdd5 	bl	800c790 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	2101      	movs	r1, #1
 8001bec:	4618      	mov	r0, r3
 8001bee:	f004 fa1b 	bl	8006028 <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001bfa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4618      	mov	r0, r3
 8001c02:	f004 f8ff 	bl	8005e04 <USB_ReadInterrupts>
 8001c06:	4603      	mov	r3, r0
 8001c08:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c10:	d102      	bne.n	8001c18 <HAL_HCD_IRQHandler+0x114>
    {
      HCD_Port_IRQHandler(hhcd);
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f001 f8c8 	bl	8002da8 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f004 f8f1 	bl	8005e04 <USB_ReadInterrupts>
 8001c22:	4603      	mov	r3, r0
 8001c24:	f003 0308 	and.w	r3, r3, #8
 8001c28:	2b08      	cmp	r3, #8
 8001c2a:	d106      	bne.n	8001c3a <HAL_HCD_IRQHandler+0x136>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001c2c:	6878      	ldr	r0, [r7, #4]
 8001c2e:	f00a fd93 	bl	800c758 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	2208      	movs	r2, #8
 8001c38:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f004 f8e0 	bl	8005e04 <USB_ReadInterrupts>
 8001c44:	4603      	mov	r3, r0
 8001c46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c4a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001c4e:	d138      	bne.n	8001cc2 <HAL_HCD_IRQHandler+0x1be>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4618      	mov	r0, r3
 8001c56:	f004 fcfb 	bl	8006650 <USB_HC_ReadInterrupt>
 8001c5a:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	617b      	str	r3, [r7, #20]
 8001c60:	e025      	b.n	8001cae <HAL_HCD_IRQHandler+0x1aa>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	f003 030f 	and.w	r3, r3, #15
 8001c68:	68ba      	ldr	r2, [r7, #8]
 8001c6a:	fa22 f303 	lsr.w	r3, r2, r3
 8001c6e:	f003 0301 	and.w	r3, r3, #1
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d018      	beq.n	8001ca8 <HAL_HCD_IRQHandler+0x1a4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	015a      	lsls	r2, r3, #5
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	4413      	add	r3, r2
 8001c7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c8c:	d106      	bne.n	8001c9c <HAL_HCD_IRQHandler+0x198>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	4619      	mov	r1, r3
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	f000 f8cf 	bl	8001e38 <HCD_HC_IN_IRQHandler>
 8001c9a:	e005      	b.n	8001ca8 <HAL_HCD_IRQHandler+0x1a4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	f000 fc5f 	bl	8002566 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	3301      	adds	r3, #1
 8001cac:	617b      	str	r3, [r7, #20]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	697a      	ldr	r2, [r7, #20]
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d3d4      	bcc.n	8001c62 <HAL_HCD_IRQHandler+0x15e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cc0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f004 f89c 	bl	8005e04 <USB_ReadInterrupts>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	f003 0310 	and.w	r3, r3, #16
 8001cd2:	2b10      	cmp	r3, #16
 8001cd4:	d101      	bne.n	8001cda <HAL_HCD_IRQHandler+0x1d6>
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e000      	b.n	8001cdc <HAL_HCD_IRQHandler+0x1d8>
 8001cda:	2300      	movs	r3, #0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d014      	beq.n	8001d0a <HAL_HCD_IRQHandler+0x206>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	699a      	ldr	r2, [r3, #24]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f022 0210 	bic.w	r2, r2, #16
 8001cee:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	f000 ffad 	bl	8002c50 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	699a      	ldr	r2, [r3, #24]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f042 0210 	orr.w	r2, r2, #16
 8001d04:	619a      	str	r2, [r3, #24]
 8001d06:	e000      	b.n	8001d0a <HAL_HCD_IRQHandler+0x206>
      return;
 8001d08:	bf00      	nop
    }
  }
}
 8001d0a:	3718      	adds	r7, #24
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}

08001d10 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d101      	bne.n	8001d26 <HAL_HCD_Start+0x16>
 8001d22:	2302      	movs	r3, #2
 8001d24:	e013      	b.n	8001d4e <HAL_HCD_Start+0x3e>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2201      	movs	r2, #1
 8001d2a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4618      	mov	r0, r3
 8001d34:	f003 ff73 	bl	8005c1e <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	2101      	movs	r1, #1
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f004 f9d6 	bl	80060f0 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2200      	movs	r2, #0
 8001d48:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 8001d4c:	2300      	movs	r3, #0
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3708      	adds	r7, #8
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}

08001d56 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001d56:	b580      	push	{r7, lr}
 8001d58:	b082      	sub	sp, #8
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d101      	bne.n	8001d6c <HAL_HCD_Stop+0x16>
 8001d68:	2302      	movs	r3, #2
 8001d6a:	e00d      	b.n	8001d88 <HAL_HCD_Stop+0x32>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2201      	movs	r2, #1
 8001d70:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f004 fdb5 	bl	80068e8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2200      	movs	r2, #0
 8001d82:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 8001d86:	2300      	movs	r3, #0
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	3708      	adds	r7, #8
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}

08001d90 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f004 f97d 	bl	800609c <USB_ResetPort>
 8001da2:	4603      	mov	r3, r0
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3708      	adds	r7, #8
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}

08001dac <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
 8001db4:	460b      	mov	r3, r1
 8001db6:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001db8:	78fa      	ldrb	r2, [r7, #3]
 8001dba:	6879      	ldr	r1, [r7, #4]
 8001dbc:	4613      	mov	r3, r2
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	4413      	add	r3, r2
 8001dc2:	00db      	lsls	r3, r3, #3
 8001dc4:	440b      	add	r3, r1
 8001dc6:	335c      	adds	r3, #92	; 0x5c
 8001dc8:	781b      	ldrb	r3, [r3, #0]
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	370c      	adds	r7, #12
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr

08001dd6 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001dd6:	b480      	push	{r7}
 8001dd8:	b083      	sub	sp, #12
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	6078      	str	r0, [r7, #4]
 8001dde:	460b      	mov	r3, r1
 8001de0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001de2:	78fa      	ldrb	r2, [r7, #3]
 8001de4:	6879      	ldr	r1, [r7, #4]
 8001de6:	4613      	mov	r3, r2
 8001de8:	009b      	lsls	r3, r3, #2
 8001dea:	4413      	add	r3, r2
 8001dec:	00db      	lsls	r3, r3, #3
 8001dee:	440b      	add	r3, r1
 8001df0:	334c      	adds	r3, #76	; 0x4c
 8001df2:	681b      	ldr	r3, [r3, #0]
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	370c      	adds	r7, #12
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr

08001e00 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f004 f9bf 	bl	8006190 <USB_GetCurrentFrame>
 8001e12:	4603      	mov	r3, r0
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3708      	adds	r7, #8
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}

08001e1c <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f004 f99a 	bl	8006162 <USB_GetHostSpeed>
 8001e2e:	4603      	mov	r3, r0
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	3708      	adds	r7, #8
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}

08001e38 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b086      	sub	sp, #24
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
 8001e40:	460b      	mov	r3, r1
 8001e42:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001e4e:	78fb      	ldrb	r3, [r7, #3]
 8001e50:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	015a      	lsls	r2, r3, #5
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	4413      	add	r3, r2
 8001e5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	f003 0304 	and.w	r3, r3, #4
 8001e64:	2b04      	cmp	r3, #4
 8001e66:	d119      	bne.n	8001e9c <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	015a      	lsls	r2, r3, #5
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	4413      	add	r3, r2
 8001e70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e74:	461a      	mov	r2, r3
 8001e76:	2304      	movs	r3, #4
 8001e78:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	015a      	lsls	r2, r3, #5
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	4413      	add	r3, r2
 8001e82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	68fa      	ldr	r2, [r7, #12]
 8001e8a:	0151      	lsls	r1, r2, #5
 8001e8c:	693a      	ldr	r2, [r7, #16]
 8001e8e:	440a      	add	r2, r1
 8001e90:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e94:	f043 0302 	orr.w	r3, r3, #2
 8001e98:	60d3      	str	r3, [r2, #12]
 8001e9a:	e095      	b.n	8001fc8 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	015a      	lsls	r2, r3, #5
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	4413      	add	r3, r2
 8001ea4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	f003 0320 	and.w	r3, r3, #32
 8001eae:	2b20      	cmp	r3, #32
 8001eb0:	d109      	bne.n	8001ec6 <HCD_HC_IN_IRQHandler+0x8e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	015a      	lsls	r2, r3, #5
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	4413      	add	r3, r2
 8001eba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ebe:	461a      	mov	r2, r3
 8001ec0:	2320      	movs	r3, #32
 8001ec2:	6093      	str	r3, [r2, #8]
 8001ec4:	e080      	b.n	8001fc8 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	015a      	lsls	r2, r3, #5
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	4413      	add	r3, r2
 8001ece:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	f003 0308 	and.w	r3, r3, #8
 8001ed8:	2b08      	cmp	r3, #8
 8001eda:	d134      	bne.n	8001f46 <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	015a      	lsls	r2, r3, #5
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	4413      	add	r3, r2
 8001ee4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ee8:	68db      	ldr	r3, [r3, #12]
 8001eea:	68fa      	ldr	r2, [r7, #12]
 8001eec:	0151      	lsls	r1, r2, #5
 8001eee:	693a      	ldr	r2, [r7, #16]
 8001ef0:	440a      	add	r2, r1
 8001ef2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001ef6:	f043 0302 	orr.w	r3, r3, #2
 8001efa:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8001efc:	6879      	ldr	r1, [r7, #4]
 8001efe:	68fa      	ldr	r2, [r7, #12]
 8001f00:	4613      	mov	r3, r2
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	4413      	add	r3, r2
 8001f06:	00db      	lsls	r3, r3, #3
 8001f08:	440b      	add	r3, r1
 8001f0a:	335d      	adds	r3, #93	; 0x5d
 8001f0c:	2205      	movs	r2, #5
 8001f0e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	015a      	lsls	r2, r3, #5
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	4413      	add	r3, r2
 8001f18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f1c:	461a      	mov	r2, r3
 8001f1e:	2310      	movs	r3, #16
 8001f20:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	015a      	lsls	r2, r3, #5
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	4413      	add	r3, r2
 8001f2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f2e:	461a      	mov	r2, r3
 8001f30:	2308      	movs	r3, #8
 8001f32:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	68fa      	ldr	r2, [r7, #12]
 8001f3a:	b2d2      	uxtb	r2, r2
 8001f3c:	4611      	mov	r1, r2
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f004 fb97 	bl	8006672 <USB_HC_Halt>
 8001f44:	e040      	b.n	8001fc8 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	015a      	lsls	r2, r3, #5
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	4413      	add	r3, r2
 8001f4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f5c:	d134      	bne.n	8001fc8 <HCD_HC_IN_IRQHandler+0x190>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	015a      	lsls	r2, r3, #5
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	4413      	add	r3, r2
 8001f66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	68fa      	ldr	r2, [r7, #12]
 8001f6e:	0151      	lsls	r1, r2, #5
 8001f70:	693a      	ldr	r2, [r7, #16]
 8001f72:	440a      	add	r2, r1
 8001f74:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f78:	f043 0302 	orr.w	r3, r3, #2
 8001f7c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	68fa      	ldr	r2, [r7, #12]
 8001f84:	b2d2      	uxtb	r2, r2
 8001f86:	4611      	mov	r1, r2
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f004 fb72 	bl	8006672 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	015a      	lsls	r2, r3, #5
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	4413      	add	r3, r2
 8001f96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	2310      	movs	r3, #16
 8001f9e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001fa0:	6879      	ldr	r1, [r7, #4]
 8001fa2:	68fa      	ldr	r2, [r7, #12]
 8001fa4:	4613      	mov	r3, r2
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	4413      	add	r3, r2
 8001faa:	00db      	lsls	r3, r3, #3
 8001fac:	440b      	add	r3, r1
 8001fae:	335d      	adds	r3, #93	; 0x5d
 8001fb0:	2208      	movs	r2, #8
 8001fb2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	015a      	lsls	r2, r3, #5
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	4413      	add	r3, r2
 8001fbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fc0:	461a      	mov	r2, r3
 8001fc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001fc6:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	015a      	lsls	r2, r3, #5
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	4413      	add	r3, r2
 8001fd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fda:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fde:	d122      	bne.n	8002026 <HCD_HC_IN_IRQHandler+0x1ee>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	015a      	lsls	r2, r3, #5
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	4413      	add	r3, r2
 8001fe8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fec:	68db      	ldr	r3, [r3, #12]
 8001fee:	68fa      	ldr	r2, [r7, #12]
 8001ff0:	0151      	lsls	r1, r2, #5
 8001ff2:	693a      	ldr	r2, [r7, #16]
 8001ff4:	440a      	add	r2, r1
 8001ff6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001ffa:	f043 0302 	orr.w	r3, r3, #2
 8001ffe:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	68fa      	ldr	r2, [r7, #12]
 8002006:	b2d2      	uxtb	r2, r2
 8002008:	4611      	mov	r1, r2
 800200a:	4618      	mov	r0, r3
 800200c:	f004 fb31 	bl	8006672 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	015a      	lsls	r2, r3, #5
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	4413      	add	r3, r2
 8002018:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800201c:	461a      	mov	r2, r3
 800201e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002022:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002024:	e29b      	b.n	800255e <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	015a      	lsls	r2, r3, #5
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	4413      	add	r3, r2
 800202e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	f003 0301 	and.w	r3, r3, #1
 8002038:	2b01      	cmp	r3, #1
 800203a:	f040 80c1 	bne.w	80021c0 <HCD_HC_IN_IRQHandler+0x388>
    if (hhcd->Init.dma_enable != 0U)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	691b      	ldr	r3, [r3, #16]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d01b      	beq.n	800207e <HCD_HC_IN_IRQHandler+0x246>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002046:	6879      	ldr	r1, [r7, #4]
 8002048:	68fa      	ldr	r2, [r7, #12]
 800204a:	4613      	mov	r3, r2
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	4413      	add	r3, r2
 8002050:	00db      	lsls	r3, r3, #3
 8002052:	440b      	add	r3, r1
 8002054:	3348      	adds	r3, #72	; 0x48
 8002056:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	0159      	lsls	r1, r3, #5
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	440b      	add	r3, r1
 8002060:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002064:	691b      	ldr	r3, [r3, #16]
 8002066:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 800206a:	1ad1      	subs	r1, r2, r3
 800206c:	6878      	ldr	r0, [r7, #4]
 800206e:	68fa      	ldr	r2, [r7, #12]
 8002070:	4613      	mov	r3, r2
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	4413      	add	r3, r2
 8002076:	00db      	lsls	r3, r3, #3
 8002078:	4403      	add	r3, r0
 800207a:	334c      	adds	r3, #76	; 0x4c
 800207c:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800207e:	6879      	ldr	r1, [r7, #4]
 8002080:	68fa      	ldr	r2, [r7, #12]
 8002082:	4613      	mov	r3, r2
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	4413      	add	r3, r2
 8002088:	00db      	lsls	r3, r3, #3
 800208a:	440b      	add	r3, r1
 800208c:	335d      	adds	r3, #93	; 0x5d
 800208e:	2201      	movs	r2, #1
 8002090:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002092:	6879      	ldr	r1, [r7, #4]
 8002094:	68fa      	ldr	r2, [r7, #12]
 8002096:	4613      	mov	r3, r2
 8002098:	009b      	lsls	r3, r3, #2
 800209a:	4413      	add	r3, r2
 800209c:	00db      	lsls	r3, r3, #3
 800209e:	440b      	add	r3, r1
 80020a0:	3358      	adds	r3, #88	; 0x58
 80020a2:	2200      	movs	r2, #0
 80020a4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	015a      	lsls	r2, r3, #5
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	4413      	add	r3, r2
 80020ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020b2:	461a      	mov	r2, r3
 80020b4:	2301      	movs	r3, #1
 80020b6:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80020b8:	6879      	ldr	r1, [r7, #4]
 80020ba:	68fa      	ldr	r2, [r7, #12]
 80020bc:	4613      	mov	r3, r2
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	4413      	add	r3, r2
 80020c2:	00db      	lsls	r3, r3, #3
 80020c4:	440b      	add	r3, r1
 80020c6:	333f      	adds	r3, #63	; 0x3f
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d00a      	beq.n	80020e4 <HCD_HC_IN_IRQHandler+0x2ac>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80020ce:	6879      	ldr	r1, [r7, #4]
 80020d0:	68fa      	ldr	r2, [r7, #12]
 80020d2:	4613      	mov	r3, r2
 80020d4:	009b      	lsls	r3, r3, #2
 80020d6:	4413      	add	r3, r2
 80020d8:	00db      	lsls	r3, r3, #3
 80020da:	440b      	add	r3, r1
 80020dc:	333f      	adds	r3, #63	; 0x3f
 80020de:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80020e0:	2b02      	cmp	r3, #2
 80020e2:	d121      	bne.n	8002128 <HCD_HC_IN_IRQHandler+0x2f0>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	015a      	lsls	r2, r3, #5
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	4413      	add	r3, r2
 80020ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020f0:	68db      	ldr	r3, [r3, #12]
 80020f2:	68fa      	ldr	r2, [r7, #12]
 80020f4:	0151      	lsls	r1, r2, #5
 80020f6:	693a      	ldr	r2, [r7, #16]
 80020f8:	440a      	add	r2, r1
 80020fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80020fe:	f043 0302 	orr.w	r3, r3, #2
 8002102:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	68fa      	ldr	r2, [r7, #12]
 800210a:	b2d2      	uxtb	r2, r2
 800210c:	4611      	mov	r1, r2
 800210e:	4618      	mov	r0, r3
 8002110:	f004 faaf 	bl	8006672 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	015a      	lsls	r2, r3, #5
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	4413      	add	r3, r2
 800211c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002120:	461a      	mov	r2, r3
 8002122:	2310      	movs	r3, #16
 8002124:	6093      	str	r3, [r2, #8]
 8002126:	e034      	b.n	8002192 <HCD_HC_IN_IRQHandler+0x35a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002128:	6879      	ldr	r1, [r7, #4]
 800212a:	68fa      	ldr	r2, [r7, #12]
 800212c:	4613      	mov	r3, r2
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	4413      	add	r3, r2
 8002132:	00db      	lsls	r3, r3, #3
 8002134:	440b      	add	r3, r1
 8002136:	333f      	adds	r3, #63	; 0x3f
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	2b03      	cmp	r3, #3
 800213c:	d129      	bne.n	8002192 <HCD_HC_IN_IRQHandler+0x35a>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	015a      	lsls	r2, r3, #5
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	4413      	add	r3, r2
 8002146:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	68fa      	ldr	r2, [r7, #12]
 800214e:	0151      	lsls	r1, r2, #5
 8002150:	693a      	ldr	r2, [r7, #16]
 8002152:	440a      	add	r2, r1
 8002154:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002158:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800215c:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800215e:	6879      	ldr	r1, [r7, #4]
 8002160:	68fa      	ldr	r2, [r7, #12]
 8002162:	4613      	mov	r3, r2
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	4413      	add	r3, r2
 8002168:	00db      	lsls	r3, r3, #3
 800216a:	440b      	add	r3, r1
 800216c:	335c      	adds	r3, #92	; 0x5c
 800216e:	2201      	movs	r2, #1
 8002170:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	b2d8      	uxtb	r0, r3
 8002176:	6879      	ldr	r1, [r7, #4]
 8002178:	68fa      	ldr	r2, [r7, #12]
 800217a:	4613      	mov	r3, r2
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	4413      	add	r3, r2
 8002180:	00db      	lsls	r3, r3, #3
 8002182:	440b      	add	r3, r1
 8002184:	335c      	adds	r3, #92	; 0x5c
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	461a      	mov	r2, r3
 800218a:	4601      	mov	r1, r0
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	f00a fb0d 	bl	800c7ac <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8002192:	6879      	ldr	r1, [r7, #4]
 8002194:	68fa      	ldr	r2, [r7, #12]
 8002196:	4613      	mov	r3, r2
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	4413      	add	r3, r2
 800219c:	00db      	lsls	r3, r3, #3
 800219e:	440b      	add	r3, r1
 80021a0:	3350      	adds	r3, #80	; 0x50
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	f083 0301 	eor.w	r3, r3, #1
 80021a8:	b2d8      	uxtb	r0, r3
 80021aa:	6879      	ldr	r1, [r7, #4]
 80021ac:	68fa      	ldr	r2, [r7, #12]
 80021ae:	4613      	mov	r3, r2
 80021b0:	009b      	lsls	r3, r3, #2
 80021b2:	4413      	add	r3, r2
 80021b4:	00db      	lsls	r3, r3, #3
 80021b6:	440b      	add	r3, r1
 80021b8:	3350      	adds	r3, #80	; 0x50
 80021ba:	4602      	mov	r2, r0
 80021bc:	701a      	strb	r2, [r3, #0]
}
 80021be:	e1ce      	b.n	800255e <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	015a      	lsls	r2, r3, #5
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	4413      	add	r3, r2
 80021c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	f003 0302 	and.w	r3, r3, #2
 80021d2:	2b02      	cmp	r3, #2
 80021d4:	f040 80f1 	bne.w	80023ba <HCD_HC_IN_IRQHandler+0x582>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	015a      	lsls	r2, r3, #5
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	4413      	add	r3, r2
 80021e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021e4:	68db      	ldr	r3, [r3, #12]
 80021e6:	68fa      	ldr	r2, [r7, #12]
 80021e8:	0151      	lsls	r1, r2, #5
 80021ea:	693a      	ldr	r2, [r7, #16]
 80021ec:	440a      	add	r2, r1
 80021ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80021f2:	f023 0302 	bic.w	r3, r3, #2
 80021f6:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80021f8:	6879      	ldr	r1, [r7, #4]
 80021fa:	68fa      	ldr	r2, [r7, #12]
 80021fc:	4613      	mov	r3, r2
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	4413      	add	r3, r2
 8002202:	00db      	lsls	r3, r3, #3
 8002204:	440b      	add	r3, r1
 8002206:	335d      	adds	r3, #93	; 0x5d
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	2b01      	cmp	r3, #1
 800220c:	d10a      	bne.n	8002224 <HCD_HC_IN_IRQHandler+0x3ec>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800220e:	6879      	ldr	r1, [r7, #4]
 8002210:	68fa      	ldr	r2, [r7, #12]
 8002212:	4613      	mov	r3, r2
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	4413      	add	r3, r2
 8002218:	00db      	lsls	r3, r3, #3
 800221a:	440b      	add	r3, r1
 800221c:	335c      	adds	r3, #92	; 0x5c
 800221e:	2201      	movs	r2, #1
 8002220:	701a      	strb	r2, [r3, #0]
 8002222:	e0b0      	b.n	8002386 <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002224:	6879      	ldr	r1, [r7, #4]
 8002226:	68fa      	ldr	r2, [r7, #12]
 8002228:	4613      	mov	r3, r2
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	4413      	add	r3, r2
 800222e:	00db      	lsls	r3, r3, #3
 8002230:	440b      	add	r3, r1
 8002232:	335d      	adds	r3, #93	; 0x5d
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	2b05      	cmp	r3, #5
 8002238:	d10a      	bne.n	8002250 <HCD_HC_IN_IRQHandler+0x418>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800223a:	6879      	ldr	r1, [r7, #4]
 800223c:	68fa      	ldr	r2, [r7, #12]
 800223e:	4613      	mov	r3, r2
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	4413      	add	r3, r2
 8002244:	00db      	lsls	r3, r3, #3
 8002246:	440b      	add	r3, r1
 8002248:	335c      	adds	r3, #92	; 0x5c
 800224a:	2205      	movs	r2, #5
 800224c:	701a      	strb	r2, [r3, #0]
 800224e:	e09a      	b.n	8002386 <HCD_HC_IN_IRQHandler+0x54e>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002250:	6879      	ldr	r1, [r7, #4]
 8002252:	68fa      	ldr	r2, [r7, #12]
 8002254:	4613      	mov	r3, r2
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	4413      	add	r3, r2
 800225a:	00db      	lsls	r3, r3, #3
 800225c:	440b      	add	r3, r1
 800225e:	335d      	adds	r3, #93	; 0x5d
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	2b06      	cmp	r3, #6
 8002264:	d00a      	beq.n	800227c <HCD_HC_IN_IRQHandler+0x444>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002266:	6879      	ldr	r1, [r7, #4]
 8002268:	68fa      	ldr	r2, [r7, #12]
 800226a:	4613      	mov	r3, r2
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	4413      	add	r3, r2
 8002270:	00db      	lsls	r3, r3, #3
 8002272:	440b      	add	r3, r1
 8002274:	335d      	adds	r3, #93	; 0x5d
 8002276:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002278:	2b08      	cmp	r3, #8
 800227a:	d156      	bne.n	800232a <HCD_HC_IN_IRQHandler+0x4f2>
      hhcd->hc[ch_num].ErrCnt++;
 800227c:	6879      	ldr	r1, [r7, #4]
 800227e:	68fa      	ldr	r2, [r7, #12]
 8002280:	4613      	mov	r3, r2
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	4413      	add	r3, r2
 8002286:	00db      	lsls	r3, r3, #3
 8002288:	440b      	add	r3, r1
 800228a:	3358      	adds	r3, #88	; 0x58
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	1c59      	adds	r1, r3, #1
 8002290:	6878      	ldr	r0, [r7, #4]
 8002292:	68fa      	ldr	r2, [r7, #12]
 8002294:	4613      	mov	r3, r2
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	4413      	add	r3, r2
 800229a:	00db      	lsls	r3, r3, #3
 800229c:	4403      	add	r3, r0
 800229e:	3358      	adds	r3, #88	; 0x58
 80022a0:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80022a2:	6879      	ldr	r1, [r7, #4]
 80022a4:	68fa      	ldr	r2, [r7, #12]
 80022a6:	4613      	mov	r3, r2
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	4413      	add	r3, r2
 80022ac:	00db      	lsls	r3, r3, #3
 80022ae:	440b      	add	r3, r1
 80022b0:	3358      	adds	r3, #88	; 0x58
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	2b03      	cmp	r3, #3
 80022b6:	d914      	bls.n	80022e2 <HCD_HC_IN_IRQHandler+0x4aa>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80022b8:	6879      	ldr	r1, [r7, #4]
 80022ba:	68fa      	ldr	r2, [r7, #12]
 80022bc:	4613      	mov	r3, r2
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	4413      	add	r3, r2
 80022c2:	00db      	lsls	r3, r3, #3
 80022c4:	440b      	add	r3, r1
 80022c6:	3358      	adds	r3, #88	; 0x58
 80022c8:	2200      	movs	r2, #0
 80022ca:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80022cc:	6879      	ldr	r1, [r7, #4]
 80022ce:	68fa      	ldr	r2, [r7, #12]
 80022d0:	4613      	mov	r3, r2
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	4413      	add	r3, r2
 80022d6:	00db      	lsls	r3, r3, #3
 80022d8:	440b      	add	r3, r1
 80022da:	335c      	adds	r3, #92	; 0x5c
 80022dc:	2204      	movs	r2, #4
 80022de:	701a      	strb	r2, [r3, #0]
 80022e0:	e009      	b.n	80022f6 <HCD_HC_IN_IRQHandler+0x4be>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80022e2:	6879      	ldr	r1, [r7, #4]
 80022e4:	68fa      	ldr	r2, [r7, #12]
 80022e6:	4613      	mov	r3, r2
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	4413      	add	r3, r2
 80022ec:	00db      	lsls	r3, r3, #3
 80022ee:	440b      	add	r3, r1
 80022f0:	335c      	adds	r3, #92	; 0x5c
 80022f2:	2202      	movs	r2, #2
 80022f4:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	015a      	lsls	r2, r3, #5
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	4413      	add	r3, r2
 80022fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800230c:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002314:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	015a      	lsls	r2, r3, #5
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	4413      	add	r3, r2
 800231e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002322:	461a      	mov	r2, r3
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	6013      	str	r3, [r2, #0]
 8002328:	e02d      	b.n	8002386 <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800232a:	6879      	ldr	r1, [r7, #4]
 800232c:	68fa      	ldr	r2, [r7, #12]
 800232e:	4613      	mov	r3, r2
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	4413      	add	r3, r2
 8002334:	00db      	lsls	r3, r3, #3
 8002336:	440b      	add	r3, r1
 8002338:	335d      	adds	r3, #93	; 0x5d
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	2b03      	cmp	r3, #3
 800233e:	d122      	bne.n	8002386 <HCD_HC_IN_IRQHandler+0x54e>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002340:	6879      	ldr	r1, [r7, #4]
 8002342:	68fa      	ldr	r2, [r7, #12]
 8002344:	4613      	mov	r3, r2
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	4413      	add	r3, r2
 800234a:	00db      	lsls	r3, r3, #3
 800234c:	440b      	add	r3, r1
 800234e:	335c      	adds	r3, #92	; 0x5c
 8002350:	2202      	movs	r2, #2
 8002352:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	015a      	lsls	r2, r3, #5
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	4413      	add	r3, r2
 800235c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800236a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002372:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	015a      	lsls	r2, r3, #5
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	4413      	add	r3, r2
 800237c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002380:	461a      	mov	r2, r3
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	015a      	lsls	r2, r3, #5
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	4413      	add	r3, r2
 800238e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002392:	461a      	mov	r2, r3
 8002394:	2302      	movs	r3, #2
 8002396:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	b2d8      	uxtb	r0, r3
 800239c:	6879      	ldr	r1, [r7, #4]
 800239e:	68fa      	ldr	r2, [r7, #12]
 80023a0:	4613      	mov	r3, r2
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	4413      	add	r3, r2
 80023a6:	00db      	lsls	r3, r3, #3
 80023a8:	440b      	add	r3, r1
 80023aa:	335c      	adds	r3, #92	; 0x5c
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	461a      	mov	r2, r3
 80023b0:	4601      	mov	r1, r0
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f00a f9fa 	bl	800c7ac <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80023b8:	e0d1      	b.n	800255e <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	015a      	lsls	r2, r3, #5
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	4413      	add	r3, r2
 80023c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023cc:	2b80      	cmp	r3, #128	; 0x80
 80023ce:	d13e      	bne.n	800244e <HCD_HC_IN_IRQHandler+0x616>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	015a      	lsls	r2, r3, #5
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	4413      	add	r3, r2
 80023d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023dc:	68db      	ldr	r3, [r3, #12]
 80023de:	68fa      	ldr	r2, [r7, #12]
 80023e0:	0151      	lsls	r1, r2, #5
 80023e2:	693a      	ldr	r2, [r7, #16]
 80023e4:	440a      	add	r2, r1
 80023e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80023ea:	f043 0302 	orr.w	r3, r3, #2
 80023ee:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 80023f0:	6879      	ldr	r1, [r7, #4]
 80023f2:	68fa      	ldr	r2, [r7, #12]
 80023f4:	4613      	mov	r3, r2
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	4413      	add	r3, r2
 80023fa:	00db      	lsls	r3, r3, #3
 80023fc:	440b      	add	r3, r1
 80023fe:	3358      	adds	r3, #88	; 0x58
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	1c59      	adds	r1, r3, #1
 8002404:	6878      	ldr	r0, [r7, #4]
 8002406:	68fa      	ldr	r2, [r7, #12]
 8002408:	4613      	mov	r3, r2
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	4413      	add	r3, r2
 800240e:	00db      	lsls	r3, r3, #3
 8002410:	4403      	add	r3, r0
 8002412:	3358      	adds	r3, #88	; 0x58
 8002414:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002416:	6879      	ldr	r1, [r7, #4]
 8002418:	68fa      	ldr	r2, [r7, #12]
 800241a:	4613      	mov	r3, r2
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	4413      	add	r3, r2
 8002420:	00db      	lsls	r3, r3, #3
 8002422:	440b      	add	r3, r1
 8002424:	335d      	adds	r3, #93	; 0x5d
 8002426:	2206      	movs	r2, #6
 8002428:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	68fa      	ldr	r2, [r7, #12]
 8002430:	b2d2      	uxtb	r2, r2
 8002432:	4611      	mov	r1, r2
 8002434:	4618      	mov	r0, r3
 8002436:	f004 f91c 	bl	8006672 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	015a      	lsls	r2, r3, #5
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	4413      	add	r3, r2
 8002442:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002446:	461a      	mov	r2, r3
 8002448:	2380      	movs	r3, #128	; 0x80
 800244a:	6093      	str	r3, [r2, #8]
}
 800244c:	e087      	b.n	800255e <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	015a      	lsls	r2, r3, #5
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	4413      	add	r3, r2
 8002456:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	f003 0310 	and.w	r3, r3, #16
 8002460:	2b10      	cmp	r3, #16
 8002462:	d17c      	bne.n	800255e <HCD_HC_IN_IRQHandler+0x726>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002464:	6879      	ldr	r1, [r7, #4]
 8002466:	68fa      	ldr	r2, [r7, #12]
 8002468:	4613      	mov	r3, r2
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	4413      	add	r3, r2
 800246e:	00db      	lsls	r3, r3, #3
 8002470:	440b      	add	r3, r1
 8002472:	333f      	adds	r3, #63	; 0x3f
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	2b03      	cmp	r3, #3
 8002478:	d122      	bne.n	80024c0 <HCD_HC_IN_IRQHandler+0x688>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800247a:	6879      	ldr	r1, [r7, #4]
 800247c:	68fa      	ldr	r2, [r7, #12]
 800247e:	4613      	mov	r3, r2
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	4413      	add	r3, r2
 8002484:	00db      	lsls	r3, r3, #3
 8002486:	440b      	add	r3, r1
 8002488:	3358      	adds	r3, #88	; 0x58
 800248a:	2200      	movs	r2, #0
 800248c:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	015a      	lsls	r2, r3, #5
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	4413      	add	r3, r2
 8002496:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	68fa      	ldr	r2, [r7, #12]
 800249e:	0151      	lsls	r1, r2, #5
 80024a0:	693a      	ldr	r2, [r7, #16]
 80024a2:	440a      	add	r2, r1
 80024a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80024a8:	f043 0302 	orr.w	r3, r3, #2
 80024ac:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	68fa      	ldr	r2, [r7, #12]
 80024b4:	b2d2      	uxtb	r2, r2
 80024b6:	4611      	mov	r1, r2
 80024b8:	4618      	mov	r0, r3
 80024ba:	f004 f8da 	bl	8006672 <USB_HC_Halt>
 80024be:	e045      	b.n	800254c <HCD_HC_IN_IRQHandler+0x714>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80024c0:	6879      	ldr	r1, [r7, #4]
 80024c2:	68fa      	ldr	r2, [r7, #12]
 80024c4:	4613      	mov	r3, r2
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	4413      	add	r3, r2
 80024ca:	00db      	lsls	r3, r3, #3
 80024cc:	440b      	add	r3, r1
 80024ce:	333f      	adds	r3, #63	; 0x3f
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d00a      	beq.n	80024ec <HCD_HC_IN_IRQHandler+0x6b4>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80024d6:	6879      	ldr	r1, [r7, #4]
 80024d8:	68fa      	ldr	r2, [r7, #12]
 80024da:	4613      	mov	r3, r2
 80024dc:	009b      	lsls	r3, r3, #2
 80024de:	4413      	add	r3, r2
 80024e0:	00db      	lsls	r3, r3, #3
 80024e2:	440b      	add	r3, r1
 80024e4:	333f      	adds	r3, #63	; 0x3f
 80024e6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80024e8:	2b02      	cmp	r3, #2
 80024ea:	d12f      	bne.n	800254c <HCD_HC_IN_IRQHandler+0x714>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80024ec:	6879      	ldr	r1, [r7, #4]
 80024ee:	68fa      	ldr	r2, [r7, #12]
 80024f0:	4613      	mov	r3, r2
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	4413      	add	r3, r2
 80024f6:	00db      	lsls	r3, r3, #3
 80024f8:	440b      	add	r3, r1
 80024fa:	3358      	adds	r3, #88	; 0x58
 80024fc:	2200      	movs	r2, #0
 80024fe:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	691b      	ldr	r3, [r3, #16]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d121      	bne.n	800254c <HCD_HC_IN_IRQHandler+0x714>
        hhcd->hc[ch_num].state = HC_NAK;
 8002508:	6879      	ldr	r1, [r7, #4]
 800250a:	68fa      	ldr	r2, [r7, #12]
 800250c:	4613      	mov	r3, r2
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	4413      	add	r3, r2
 8002512:	00db      	lsls	r3, r3, #3
 8002514:	440b      	add	r3, r1
 8002516:	335d      	adds	r3, #93	; 0x5d
 8002518:	2203      	movs	r2, #3
 800251a:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	015a      	lsls	r2, r3, #5
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	4413      	add	r3, r2
 8002524:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002528:	68db      	ldr	r3, [r3, #12]
 800252a:	68fa      	ldr	r2, [r7, #12]
 800252c:	0151      	lsls	r1, r2, #5
 800252e:	693a      	ldr	r2, [r7, #16]
 8002530:	440a      	add	r2, r1
 8002532:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002536:	f043 0302 	orr.w	r3, r3, #2
 800253a:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	68fa      	ldr	r2, [r7, #12]
 8002542:	b2d2      	uxtb	r2, r2
 8002544:	4611      	mov	r1, r2
 8002546:	4618      	mov	r0, r3
 8002548:	f004 f893 	bl	8006672 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	015a      	lsls	r2, r3, #5
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	4413      	add	r3, r2
 8002554:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002558:	461a      	mov	r2, r3
 800255a:	2310      	movs	r3, #16
 800255c:	6093      	str	r3, [r2, #8]
}
 800255e:	bf00      	nop
 8002560:	3718      	adds	r7, #24
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}

08002566 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002566:	b580      	push	{r7, lr}
 8002568:	b086      	sub	sp, #24
 800256a:	af00      	add	r7, sp, #0
 800256c:	6078      	str	r0, [r7, #4]
 800256e:	460b      	mov	r3, r1
 8002570:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800257c:	78fb      	ldrb	r3, [r7, #3]
 800257e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	015a      	lsls	r2, r3, #5
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	4413      	add	r3, r2
 8002588:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	f003 0304 	and.w	r3, r3, #4
 8002592:	2b04      	cmp	r3, #4
 8002594:	d119      	bne.n	80025ca <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	015a      	lsls	r2, r3, #5
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	4413      	add	r3, r2
 800259e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025a2:	461a      	mov	r2, r3
 80025a4:	2304      	movs	r3, #4
 80025a6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	015a      	lsls	r2, r3, #5
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	4413      	add	r3, r2
 80025b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025b4:	68db      	ldr	r3, [r3, #12]
 80025b6:	68fa      	ldr	r2, [r7, #12]
 80025b8:	0151      	lsls	r1, r2, #5
 80025ba:	693a      	ldr	r2, [r7, #16]
 80025bc:	440a      	add	r2, r1
 80025be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80025c2:	f043 0302 	orr.w	r3, r3, #2
 80025c6:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80025c8:	e33e      	b.n	8002c48 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	015a      	lsls	r2, r3, #5
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	4413      	add	r3, r2
 80025d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	f003 0320 	and.w	r3, r3, #32
 80025dc:	2b20      	cmp	r3, #32
 80025de:	d141      	bne.n	8002664 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	015a      	lsls	r2, r3, #5
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	4413      	add	r3, r2
 80025e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025ec:	461a      	mov	r2, r3
 80025ee:	2320      	movs	r3, #32
 80025f0:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80025f2:	6879      	ldr	r1, [r7, #4]
 80025f4:	68fa      	ldr	r2, [r7, #12]
 80025f6:	4613      	mov	r3, r2
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	4413      	add	r3, r2
 80025fc:	00db      	lsls	r3, r3, #3
 80025fe:	440b      	add	r3, r1
 8002600:	333d      	adds	r3, #61	; 0x3d
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	2b01      	cmp	r3, #1
 8002606:	f040 831f 	bne.w	8002c48 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 800260a:	6879      	ldr	r1, [r7, #4]
 800260c:	68fa      	ldr	r2, [r7, #12]
 800260e:	4613      	mov	r3, r2
 8002610:	009b      	lsls	r3, r3, #2
 8002612:	4413      	add	r3, r2
 8002614:	00db      	lsls	r3, r3, #3
 8002616:	440b      	add	r3, r1
 8002618:	333d      	adds	r3, #61	; 0x3d
 800261a:	2200      	movs	r2, #0
 800261c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800261e:	6879      	ldr	r1, [r7, #4]
 8002620:	68fa      	ldr	r2, [r7, #12]
 8002622:	4613      	mov	r3, r2
 8002624:	009b      	lsls	r3, r3, #2
 8002626:	4413      	add	r3, r2
 8002628:	00db      	lsls	r3, r3, #3
 800262a:	440b      	add	r3, r1
 800262c:	335c      	adds	r3, #92	; 0x5c
 800262e:	2202      	movs	r2, #2
 8002630:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	015a      	lsls	r2, r3, #5
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	4413      	add	r3, r2
 800263a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	68fa      	ldr	r2, [r7, #12]
 8002642:	0151      	lsls	r1, r2, #5
 8002644:	693a      	ldr	r2, [r7, #16]
 8002646:	440a      	add	r2, r1
 8002648:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800264c:	f043 0302 	orr.w	r3, r3, #2
 8002650:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	68fa      	ldr	r2, [r7, #12]
 8002658:	b2d2      	uxtb	r2, r2
 800265a:	4611      	mov	r1, r2
 800265c:	4618      	mov	r0, r3
 800265e:	f004 f808 	bl	8006672 <USB_HC_Halt>
}
 8002662:	e2f1      	b.n	8002c48 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	015a      	lsls	r2, r3, #5
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	4413      	add	r3, r2
 800266c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002676:	2b40      	cmp	r3, #64	; 0x40
 8002678:	d13f      	bne.n	80026fa <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 800267a:	6879      	ldr	r1, [r7, #4]
 800267c:	68fa      	ldr	r2, [r7, #12]
 800267e:	4613      	mov	r3, r2
 8002680:	009b      	lsls	r3, r3, #2
 8002682:	4413      	add	r3, r2
 8002684:	00db      	lsls	r3, r3, #3
 8002686:	440b      	add	r3, r1
 8002688:	335d      	adds	r3, #93	; 0x5d
 800268a:	2204      	movs	r2, #4
 800268c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800268e:	6879      	ldr	r1, [r7, #4]
 8002690:	68fa      	ldr	r2, [r7, #12]
 8002692:	4613      	mov	r3, r2
 8002694:	009b      	lsls	r3, r3, #2
 8002696:	4413      	add	r3, r2
 8002698:	00db      	lsls	r3, r3, #3
 800269a:	440b      	add	r3, r1
 800269c:	333d      	adds	r3, #61	; 0x3d
 800269e:	2201      	movs	r2, #1
 80026a0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80026a2:	6879      	ldr	r1, [r7, #4]
 80026a4:	68fa      	ldr	r2, [r7, #12]
 80026a6:	4613      	mov	r3, r2
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	4413      	add	r3, r2
 80026ac:	00db      	lsls	r3, r3, #3
 80026ae:	440b      	add	r3, r1
 80026b0:	3358      	adds	r3, #88	; 0x58
 80026b2:	2200      	movs	r2, #0
 80026b4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	015a      	lsls	r2, r3, #5
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	4413      	add	r3, r2
 80026be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	68fa      	ldr	r2, [r7, #12]
 80026c6:	0151      	lsls	r1, r2, #5
 80026c8:	693a      	ldr	r2, [r7, #16]
 80026ca:	440a      	add	r2, r1
 80026cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80026d0:	f043 0302 	orr.w	r3, r3, #2
 80026d4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	68fa      	ldr	r2, [r7, #12]
 80026dc:	b2d2      	uxtb	r2, r2
 80026de:	4611      	mov	r1, r2
 80026e0:	4618      	mov	r0, r3
 80026e2:	f003 ffc6 	bl	8006672 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	015a      	lsls	r2, r3, #5
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	4413      	add	r3, r2
 80026ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026f2:	461a      	mov	r2, r3
 80026f4:	2340      	movs	r3, #64	; 0x40
 80026f6:	6093      	str	r3, [r2, #8]
}
 80026f8:	e2a6      	b.n	8002c48 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	015a      	lsls	r2, r3, #5
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	4413      	add	r3, r2
 8002702:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800270c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002710:	d122      	bne.n	8002758 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	015a      	lsls	r2, r3, #5
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	4413      	add	r3, r2
 800271a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	68fa      	ldr	r2, [r7, #12]
 8002722:	0151      	lsls	r1, r2, #5
 8002724:	693a      	ldr	r2, [r7, #16]
 8002726:	440a      	add	r2, r1
 8002728:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800272c:	f043 0302 	orr.w	r3, r3, #2
 8002730:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	68fa      	ldr	r2, [r7, #12]
 8002738:	b2d2      	uxtb	r2, r2
 800273a:	4611      	mov	r1, r2
 800273c:	4618      	mov	r0, r3
 800273e:	f003 ff98 	bl	8006672 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	015a      	lsls	r2, r3, #5
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	4413      	add	r3, r2
 800274a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800274e:	461a      	mov	r2, r3
 8002750:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002754:	6093      	str	r3, [r2, #8]
}
 8002756:	e277      	b.n	8002c48 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	015a      	lsls	r2, r3, #5
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	4413      	add	r3, r2
 8002760:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	f003 0301 	and.w	r3, r3, #1
 800276a:	2b01      	cmp	r3, #1
 800276c:	d135      	bne.n	80027da <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800276e:	6879      	ldr	r1, [r7, #4]
 8002770:	68fa      	ldr	r2, [r7, #12]
 8002772:	4613      	mov	r3, r2
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	4413      	add	r3, r2
 8002778:	00db      	lsls	r3, r3, #3
 800277a:	440b      	add	r3, r1
 800277c:	3358      	adds	r3, #88	; 0x58
 800277e:	2200      	movs	r2, #0
 8002780:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	015a      	lsls	r2, r3, #5
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	4413      	add	r3, r2
 800278a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	68fa      	ldr	r2, [r7, #12]
 8002792:	0151      	lsls	r1, r2, #5
 8002794:	693a      	ldr	r2, [r7, #16]
 8002796:	440a      	add	r2, r1
 8002798:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800279c:	f043 0302 	orr.w	r3, r3, #2
 80027a0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	68fa      	ldr	r2, [r7, #12]
 80027a8:	b2d2      	uxtb	r2, r2
 80027aa:	4611      	mov	r1, r2
 80027ac:	4618      	mov	r0, r3
 80027ae:	f003 ff60 	bl	8006672 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	015a      	lsls	r2, r3, #5
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	4413      	add	r3, r2
 80027ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027be:	461a      	mov	r2, r3
 80027c0:	2301      	movs	r3, #1
 80027c2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80027c4:	6879      	ldr	r1, [r7, #4]
 80027c6:	68fa      	ldr	r2, [r7, #12]
 80027c8:	4613      	mov	r3, r2
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	4413      	add	r3, r2
 80027ce:	00db      	lsls	r3, r3, #3
 80027d0:	440b      	add	r3, r1
 80027d2:	335d      	adds	r3, #93	; 0x5d
 80027d4:	2201      	movs	r2, #1
 80027d6:	701a      	strb	r2, [r3, #0]
}
 80027d8:	e236      	b.n	8002c48 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	015a      	lsls	r2, r3, #5
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	4413      	add	r3, r2
 80027e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	f003 0308 	and.w	r3, r3, #8
 80027ec:	2b08      	cmp	r3, #8
 80027ee:	d12b      	bne.n	8002848 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	015a      	lsls	r2, r3, #5
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	4413      	add	r3, r2
 80027f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027fc:	461a      	mov	r2, r3
 80027fe:	2308      	movs	r3, #8
 8002800:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	015a      	lsls	r2, r3, #5
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	4413      	add	r3, r2
 800280a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	68fa      	ldr	r2, [r7, #12]
 8002812:	0151      	lsls	r1, r2, #5
 8002814:	693a      	ldr	r2, [r7, #16]
 8002816:	440a      	add	r2, r1
 8002818:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800281c:	f043 0302 	orr.w	r3, r3, #2
 8002820:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	68fa      	ldr	r2, [r7, #12]
 8002828:	b2d2      	uxtb	r2, r2
 800282a:	4611      	mov	r1, r2
 800282c:	4618      	mov	r0, r3
 800282e:	f003 ff20 	bl	8006672 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8002832:	6879      	ldr	r1, [r7, #4]
 8002834:	68fa      	ldr	r2, [r7, #12]
 8002836:	4613      	mov	r3, r2
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	4413      	add	r3, r2
 800283c:	00db      	lsls	r3, r3, #3
 800283e:	440b      	add	r3, r1
 8002840:	335d      	adds	r3, #93	; 0x5d
 8002842:	2205      	movs	r2, #5
 8002844:	701a      	strb	r2, [r3, #0]
}
 8002846:	e1ff      	b.n	8002c48 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	015a      	lsls	r2, r3, #5
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	4413      	add	r3, r2
 8002850:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	f003 0310 	and.w	r3, r3, #16
 800285a:	2b10      	cmp	r3, #16
 800285c:	d155      	bne.n	800290a <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800285e:	6879      	ldr	r1, [r7, #4]
 8002860:	68fa      	ldr	r2, [r7, #12]
 8002862:	4613      	mov	r3, r2
 8002864:	009b      	lsls	r3, r3, #2
 8002866:	4413      	add	r3, r2
 8002868:	00db      	lsls	r3, r3, #3
 800286a:	440b      	add	r3, r1
 800286c:	3358      	adds	r3, #88	; 0x58
 800286e:	2200      	movs	r2, #0
 8002870:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002872:	6879      	ldr	r1, [r7, #4]
 8002874:	68fa      	ldr	r2, [r7, #12]
 8002876:	4613      	mov	r3, r2
 8002878:	009b      	lsls	r3, r3, #2
 800287a:	4413      	add	r3, r2
 800287c:	00db      	lsls	r3, r3, #3
 800287e:	440b      	add	r3, r1
 8002880:	335d      	adds	r3, #93	; 0x5d
 8002882:	2203      	movs	r2, #3
 8002884:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002886:	6879      	ldr	r1, [r7, #4]
 8002888:	68fa      	ldr	r2, [r7, #12]
 800288a:	4613      	mov	r3, r2
 800288c:	009b      	lsls	r3, r3, #2
 800288e:	4413      	add	r3, r2
 8002890:	00db      	lsls	r3, r3, #3
 8002892:	440b      	add	r3, r1
 8002894:	333d      	adds	r3, #61	; 0x3d
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d114      	bne.n	80028c6 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 800289c:	6879      	ldr	r1, [r7, #4]
 800289e:	68fa      	ldr	r2, [r7, #12]
 80028a0:	4613      	mov	r3, r2
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	4413      	add	r3, r2
 80028a6:	00db      	lsls	r3, r3, #3
 80028a8:	440b      	add	r3, r1
 80028aa:	333c      	adds	r3, #60	; 0x3c
 80028ac:	781b      	ldrb	r3, [r3, #0]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d109      	bne.n	80028c6 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 80028b2:	6879      	ldr	r1, [r7, #4]
 80028b4:	68fa      	ldr	r2, [r7, #12]
 80028b6:	4613      	mov	r3, r2
 80028b8:	009b      	lsls	r3, r3, #2
 80028ba:	4413      	add	r3, r2
 80028bc:	00db      	lsls	r3, r3, #3
 80028be:	440b      	add	r3, r1
 80028c0:	333d      	adds	r3, #61	; 0x3d
 80028c2:	2201      	movs	r2, #1
 80028c4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	015a      	lsls	r2, r3, #5
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	4413      	add	r3, r2
 80028ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	68fa      	ldr	r2, [r7, #12]
 80028d6:	0151      	lsls	r1, r2, #5
 80028d8:	693a      	ldr	r2, [r7, #16]
 80028da:	440a      	add	r2, r1
 80028dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80028e0:	f043 0302 	orr.w	r3, r3, #2
 80028e4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	68fa      	ldr	r2, [r7, #12]
 80028ec:	b2d2      	uxtb	r2, r2
 80028ee:	4611      	mov	r1, r2
 80028f0:	4618      	mov	r0, r3
 80028f2:	f003 febe 	bl	8006672 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	015a      	lsls	r2, r3, #5
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	4413      	add	r3, r2
 80028fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002902:	461a      	mov	r2, r3
 8002904:	2310      	movs	r3, #16
 8002906:	6093      	str	r3, [r2, #8]
}
 8002908:	e19e      	b.n	8002c48 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	015a      	lsls	r2, r3, #5
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	4413      	add	r3, r2
 8002912:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800291c:	2b80      	cmp	r3, #128	; 0x80
 800291e:	d12b      	bne.n	8002978 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	015a      	lsls	r2, r3, #5
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	4413      	add	r3, r2
 8002928:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800292c:	68db      	ldr	r3, [r3, #12]
 800292e:	68fa      	ldr	r2, [r7, #12]
 8002930:	0151      	lsls	r1, r2, #5
 8002932:	693a      	ldr	r2, [r7, #16]
 8002934:	440a      	add	r2, r1
 8002936:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800293a:	f043 0302 	orr.w	r3, r3, #2
 800293e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	68fa      	ldr	r2, [r7, #12]
 8002946:	b2d2      	uxtb	r2, r2
 8002948:	4611      	mov	r1, r2
 800294a:	4618      	mov	r0, r3
 800294c:	f003 fe91 	bl	8006672 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002950:	6879      	ldr	r1, [r7, #4]
 8002952:	68fa      	ldr	r2, [r7, #12]
 8002954:	4613      	mov	r3, r2
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	4413      	add	r3, r2
 800295a:	00db      	lsls	r3, r3, #3
 800295c:	440b      	add	r3, r1
 800295e:	335d      	adds	r3, #93	; 0x5d
 8002960:	2206      	movs	r2, #6
 8002962:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	015a      	lsls	r2, r3, #5
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	4413      	add	r3, r2
 800296c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002970:	461a      	mov	r2, r3
 8002972:	2380      	movs	r3, #128	; 0x80
 8002974:	6093      	str	r3, [r2, #8]
}
 8002976:	e167      	b.n	8002c48 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	015a      	lsls	r2, r3, #5
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	4413      	add	r3, r2
 8002980:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800298a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800298e:	d135      	bne.n	80029fc <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	015a      	lsls	r2, r3, #5
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	4413      	add	r3, r2
 8002998:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800299c:	68db      	ldr	r3, [r3, #12]
 800299e:	68fa      	ldr	r2, [r7, #12]
 80029a0:	0151      	lsls	r1, r2, #5
 80029a2:	693a      	ldr	r2, [r7, #16]
 80029a4:	440a      	add	r2, r1
 80029a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80029aa:	f043 0302 	orr.w	r3, r3, #2
 80029ae:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	68fa      	ldr	r2, [r7, #12]
 80029b6:	b2d2      	uxtb	r2, r2
 80029b8:	4611      	mov	r1, r2
 80029ba:	4618      	mov	r0, r3
 80029bc:	f003 fe59 	bl	8006672 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	015a      	lsls	r2, r3, #5
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	4413      	add	r3, r2
 80029c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029cc:	461a      	mov	r2, r3
 80029ce:	2310      	movs	r3, #16
 80029d0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	015a      	lsls	r2, r3, #5
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	4413      	add	r3, r2
 80029da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029de:	461a      	mov	r2, r3
 80029e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029e4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80029e6:	6879      	ldr	r1, [r7, #4]
 80029e8:	68fa      	ldr	r2, [r7, #12]
 80029ea:	4613      	mov	r3, r2
 80029ec:	009b      	lsls	r3, r3, #2
 80029ee:	4413      	add	r3, r2
 80029f0:	00db      	lsls	r3, r3, #3
 80029f2:	440b      	add	r3, r1
 80029f4:	335d      	adds	r3, #93	; 0x5d
 80029f6:	2208      	movs	r2, #8
 80029f8:	701a      	strb	r2, [r3, #0]
}
 80029fa:	e125      	b.n	8002c48 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	015a      	lsls	r2, r3, #5
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	4413      	add	r3, r2
 8002a04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	f003 0302 	and.w	r3, r3, #2
 8002a0e:	2b02      	cmp	r3, #2
 8002a10:	f040 811a 	bne.w	8002c48 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	015a      	lsls	r2, r3, #5
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	4413      	add	r3, r2
 8002a1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a20:	68db      	ldr	r3, [r3, #12]
 8002a22:	68fa      	ldr	r2, [r7, #12]
 8002a24:	0151      	lsls	r1, r2, #5
 8002a26:	693a      	ldr	r2, [r7, #16]
 8002a28:	440a      	add	r2, r1
 8002a2a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a2e:	f023 0302 	bic.w	r3, r3, #2
 8002a32:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002a34:	6879      	ldr	r1, [r7, #4]
 8002a36:	68fa      	ldr	r2, [r7, #12]
 8002a38:	4613      	mov	r3, r2
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	4413      	add	r3, r2
 8002a3e:	00db      	lsls	r3, r3, #3
 8002a40:	440b      	add	r3, r1
 8002a42:	335d      	adds	r3, #93	; 0x5d
 8002a44:	781b      	ldrb	r3, [r3, #0]
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d137      	bne.n	8002aba <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002a4a:	6879      	ldr	r1, [r7, #4]
 8002a4c:	68fa      	ldr	r2, [r7, #12]
 8002a4e:	4613      	mov	r3, r2
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	4413      	add	r3, r2
 8002a54:	00db      	lsls	r3, r3, #3
 8002a56:	440b      	add	r3, r1
 8002a58:	335c      	adds	r3, #92	; 0x5c
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002a5e:	6879      	ldr	r1, [r7, #4]
 8002a60:	68fa      	ldr	r2, [r7, #12]
 8002a62:	4613      	mov	r3, r2
 8002a64:	009b      	lsls	r3, r3, #2
 8002a66:	4413      	add	r3, r2
 8002a68:	00db      	lsls	r3, r3, #3
 8002a6a:	440b      	add	r3, r1
 8002a6c:	333f      	adds	r3, #63	; 0x3f
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	2b02      	cmp	r3, #2
 8002a72:	d00b      	beq.n	8002a8c <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002a74:	6879      	ldr	r1, [r7, #4]
 8002a76:	68fa      	ldr	r2, [r7, #12]
 8002a78:	4613      	mov	r3, r2
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	4413      	add	r3, r2
 8002a7e:	00db      	lsls	r3, r3, #3
 8002a80:	440b      	add	r3, r1
 8002a82:	333f      	adds	r3, #63	; 0x3f
 8002a84:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002a86:	2b03      	cmp	r3, #3
 8002a88:	f040 80c5 	bne.w	8002c16 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8002a8c:	6879      	ldr	r1, [r7, #4]
 8002a8e:	68fa      	ldr	r2, [r7, #12]
 8002a90:	4613      	mov	r3, r2
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	4413      	add	r3, r2
 8002a96:	00db      	lsls	r3, r3, #3
 8002a98:	440b      	add	r3, r1
 8002a9a:	3351      	adds	r3, #81	; 0x51
 8002a9c:	781b      	ldrb	r3, [r3, #0]
 8002a9e:	f083 0301 	eor.w	r3, r3, #1
 8002aa2:	b2d8      	uxtb	r0, r3
 8002aa4:	6879      	ldr	r1, [r7, #4]
 8002aa6:	68fa      	ldr	r2, [r7, #12]
 8002aa8:	4613      	mov	r3, r2
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	4413      	add	r3, r2
 8002aae:	00db      	lsls	r3, r3, #3
 8002ab0:	440b      	add	r3, r1
 8002ab2:	3351      	adds	r3, #81	; 0x51
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	701a      	strb	r2, [r3, #0]
 8002ab8:	e0ad      	b.n	8002c16 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002aba:	6879      	ldr	r1, [r7, #4]
 8002abc:	68fa      	ldr	r2, [r7, #12]
 8002abe:	4613      	mov	r3, r2
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	4413      	add	r3, r2
 8002ac4:	00db      	lsls	r3, r3, #3
 8002ac6:	440b      	add	r3, r1
 8002ac8:	335d      	adds	r3, #93	; 0x5d
 8002aca:	781b      	ldrb	r3, [r3, #0]
 8002acc:	2b03      	cmp	r3, #3
 8002ace:	d10a      	bne.n	8002ae6 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002ad0:	6879      	ldr	r1, [r7, #4]
 8002ad2:	68fa      	ldr	r2, [r7, #12]
 8002ad4:	4613      	mov	r3, r2
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	4413      	add	r3, r2
 8002ada:	00db      	lsls	r3, r3, #3
 8002adc:	440b      	add	r3, r1
 8002ade:	335c      	adds	r3, #92	; 0x5c
 8002ae0:	2202      	movs	r2, #2
 8002ae2:	701a      	strb	r2, [r3, #0]
 8002ae4:	e097      	b.n	8002c16 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002ae6:	6879      	ldr	r1, [r7, #4]
 8002ae8:	68fa      	ldr	r2, [r7, #12]
 8002aea:	4613      	mov	r3, r2
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	4413      	add	r3, r2
 8002af0:	00db      	lsls	r3, r3, #3
 8002af2:	440b      	add	r3, r1
 8002af4:	335d      	adds	r3, #93	; 0x5d
 8002af6:	781b      	ldrb	r3, [r3, #0]
 8002af8:	2b04      	cmp	r3, #4
 8002afa:	d10a      	bne.n	8002b12 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002afc:	6879      	ldr	r1, [r7, #4]
 8002afe:	68fa      	ldr	r2, [r7, #12]
 8002b00:	4613      	mov	r3, r2
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	4413      	add	r3, r2
 8002b06:	00db      	lsls	r3, r3, #3
 8002b08:	440b      	add	r3, r1
 8002b0a:	335c      	adds	r3, #92	; 0x5c
 8002b0c:	2202      	movs	r2, #2
 8002b0e:	701a      	strb	r2, [r3, #0]
 8002b10:	e081      	b.n	8002c16 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002b12:	6879      	ldr	r1, [r7, #4]
 8002b14:	68fa      	ldr	r2, [r7, #12]
 8002b16:	4613      	mov	r3, r2
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	4413      	add	r3, r2
 8002b1c:	00db      	lsls	r3, r3, #3
 8002b1e:	440b      	add	r3, r1
 8002b20:	335d      	adds	r3, #93	; 0x5d
 8002b22:	781b      	ldrb	r3, [r3, #0]
 8002b24:	2b05      	cmp	r3, #5
 8002b26:	d10a      	bne.n	8002b3e <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002b28:	6879      	ldr	r1, [r7, #4]
 8002b2a:	68fa      	ldr	r2, [r7, #12]
 8002b2c:	4613      	mov	r3, r2
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	4413      	add	r3, r2
 8002b32:	00db      	lsls	r3, r3, #3
 8002b34:	440b      	add	r3, r1
 8002b36:	335c      	adds	r3, #92	; 0x5c
 8002b38:	2205      	movs	r2, #5
 8002b3a:	701a      	strb	r2, [r3, #0]
 8002b3c:	e06b      	b.n	8002c16 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002b3e:	6879      	ldr	r1, [r7, #4]
 8002b40:	68fa      	ldr	r2, [r7, #12]
 8002b42:	4613      	mov	r3, r2
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	4413      	add	r3, r2
 8002b48:	00db      	lsls	r3, r3, #3
 8002b4a:	440b      	add	r3, r1
 8002b4c:	335d      	adds	r3, #93	; 0x5d
 8002b4e:	781b      	ldrb	r3, [r3, #0]
 8002b50:	2b06      	cmp	r3, #6
 8002b52:	d00a      	beq.n	8002b6a <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002b54:	6879      	ldr	r1, [r7, #4]
 8002b56:	68fa      	ldr	r2, [r7, #12]
 8002b58:	4613      	mov	r3, r2
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	4413      	add	r3, r2
 8002b5e:	00db      	lsls	r3, r3, #3
 8002b60:	440b      	add	r3, r1
 8002b62:	335d      	adds	r3, #93	; 0x5d
 8002b64:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002b66:	2b08      	cmp	r3, #8
 8002b68:	d155      	bne.n	8002c16 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8002b6a:	6879      	ldr	r1, [r7, #4]
 8002b6c:	68fa      	ldr	r2, [r7, #12]
 8002b6e:	4613      	mov	r3, r2
 8002b70:	009b      	lsls	r3, r3, #2
 8002b72:	4413      	add	r3, r2
 8002b74:	00db      	lsls	r3, r3, #3
 8002b76:	440b      	add	r3, r1
 8002b78:	3358      	adds	r3, #88	; 0x58
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	1c59      	adds	r1, r3, #1
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	68fa      	ldr	r2, [r7, #12]
 8002b82:	4613      	mov	r3, r2
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	4413      	add	r3, r2
 8002b88:	00db      	lsls	r3, r3, #3
 8002b8a:	4403      	add	r3, r0
 8002b8c:	3358      	adds	r3, #88	; 0x58
 8002b8e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002b90:	6879      	ldr	r1, [r7, #4]
 8002b92:	68fa      	ldr	r2, [r7, #12]
 8002b94:	4613      	mov	r3, r2
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	4413      	add	r3, r2
 8002b9a:	00db      	lsls	r3, r3, #3
 8002b9c:	440b      	add	r3, r1
 8002b9e:	3358      	adds	r3, #88	; 0x58
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	2b03      	cmp	r3, #3
 8002ba4:	d914      	bls.n	8002bd0 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002ba6:	6879      	ldr	r1, [r7, #4]
 8002ba8:	68fa      	ldr	r2, [r7, #12]
 8002baa:	4613      	mov	r3, r2
 8002bac:	009b      	lsls	r3, r3, #2
 8002bae:	4413      	add	r3, r2
 8002bb0:	00db      	lsls	r3, r3, #3
 8002bb2:	440b      	add	r3, r1
 8002bb4:	3358      	adds	r3, #88	; 0x58
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002bba:	6879      	ldr	r1, [r7, #4]
 8002bbc:	68fa      	ldr	r2, [r7, #12]
 8002bbe:	4613      	mov	r3, r2
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	4413      	add	r3, r2
 8002bc4:	00db      	lsls	r3, r3, #3
 8002bc6:	440b      	add	r3, r1
 8002bc8:	335c      	adds	r3, #92	; 0x5c
 8002bca:	2204      	movs	r2, #4
 8002bcc:	701a      	strb	r2, [r3, #0]
 8002bce:	e009      	b.n	8002be4 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002bd0:	6879      	ldr	r1, [r7, #4]
 8002bd2:	68fa      	ldr	r2, [r7, #12]
 8002bd4:	4613      	mov	r3, r2
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	4413      	add	r3, r2
 8002bda:	00db      	lsls	r3, r3, #3
 8002bdc:	440b      	add	r3, r1
 8002bde:	335c      	adds	r3, #92	; 0x5c
 8002be0:	2202      	movs	r2, #2
 8002be2:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	015a      	lsls	r2, r3, #5
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	4413      	add	r3, r2
 8002bec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002bfa:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002c02:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	015a      	lsls	r2, r3, #5
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	4413      	add	r3, r2
 8002c0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c10:	461a      	mov	r2, r3
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	015a      	lsls	r2, r3, #5
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	4413      	add	r3, r2
 8002c1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c22:	461a      	mov	r2, r3
 8002c24:	2302      	movs	r3, #2
 8002c26:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	b2d8      	uxtb	r0, r3
 8002c2c:	6879      	ldr	r1, [r7, #4]
 8002c2e:	68fa      	ldr	r2, [r7, #12]
 8002c30:	4613      	mov	r3, r2
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	4413      	add	r3, r2
 8002c36:	00db      	lsls	r3, r3, #3
 8002c38:	440b      	add	r3, r1
 8002c3a:	335c      	adds	r3, #92	; 0x5c
 8002c3c:	781b      	ldrb	r3, [r3, #0]
 8002c3e:	461a      	mov	r2, r3
 8002c40:	4601      	mov	r1, r0
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f009 fdb2 	bl	800c7ac <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002c48:	bf00      	nop
 8002c4a:	3718      	adds	r7, #24
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}

08002c50 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b08a      	sub	sp, #40	; 0x28
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c60:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	6a1b      	ldr	r3, [r3, #32]
 8002c68:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	f003 030f 	and.w	r3, r3, #15
 8002c70:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	0c5b      	lsrs	r3, r3, #17
 8002c76:	f003 030f 	and.w	r3, r3, #15
 8002c7a:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	091b      	lsrs	r3, r3, #4
 8002c80:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c84:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	2b02      	cmp	r3, #2
 8002c8a:	d003      	beq.n	8002c94 <HCD_RXQLVL_IRQHandler+0x44>
 8002c8c:	2b05      	cmp	r3, #5
 8002c8e:	f000 8082 	beq.w	8002d96 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002c92:	e083      	b.n	8002d9c <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d07f      	beq.n	8002d9a <HCD_RXQLVL_IRQHandler+0x14a>
 8002c9a:	6879      	ldr	r1, [r7, #4]
 8002c9c:	69ba      	ldr	r2, [r7, #24]
 8002c9e:	4613      	mov	r3, r2
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	4413      	add	r3, r2
 8002ca4:	00db      	lsls	r3, r3, #3
 8002ca6:	440b      	add	r3, r1
 8002ca8:	3344      	adds	r3, #68	; 0x44
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d074      	beq.n	8002d9a <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6818      	ldr	r0, [r3, #0]
 8002cb4:	6879      	ldr	r1, [r7, #4]
 8002cb6:	69ba      	ldr	r2, [r7, #24]
 8002cb8:	4613      	mov	r3, r2
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	4413      	add	r3, r2
 8002cbe:	00db      	lsls	r3, r3, #3
 8002cc0:	440b      	add	r3, r1
 8002cc2:	3344      	adds	r3, #68	; 0x44
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	693a      	ldr	r2, [r7, #16]
 8002cc8:	b292      	uxth	r2, r2
 8002cca:	4619      	mov	r1, r3
 8002ccc:	f003 f871 	bl	8005db2 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002cd0:	6879      	ldr	r1, [r7, #4]
 8002cd2:	69ba      	ldr	r2, [r7, #24]
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	4413      	add	r3, r2
 8002cda:	00db      	lsls	r3, r3, #3
 8002cdc:	440b      	add	r3, r1
 8002cde:	3344      	adds	r3, #68	; 0x44
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	18d1      	adds	r1, r2, r3
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	69ba      	ldr	r2, [r7, #24]
 8002cea:	4613      	mov	r3, r2
 8002cec:	009b      	lsls	r3, r3, #2
 8002cee:	4413      	add	r3, r2
 8002cf0:	00db      	lsls	r3, r3, #3
 8002cf2:	4403      	add	r3, r0
 8002cf4:	3344      	adds	r3, #68	; 0x44
 8002cf6:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8002cf8:	6879      	ldr	r1, [r7, #4]
 8002cfa:	69ba      	ldr	r2, [r7, #24]
 8002cfc:	4613      	mov	r3, r2
 8002cfe:	009b      	lsls	r3, r3, #2
 8002d00:	4413      	add	r3, r2
 8002d02:	00db      	lsls	r3, r3, #3
 8002d04:	440b      	add	r3, r1
 8002d06:	334c      	adds	r3, #76	; 0x4c
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	18d1      	adds	r1, r2, r3
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	69ba      	ldr	r2, [r7, #24]
 8002d12:	4613      	mov	r3, r2
 8002d14:	009b      	lsls	r3, r3, #2
 8002d16:	4413      	add	r3, r2
 8002d18:	00db      	lsls	r3, r3, #3
 8002d1a:	4403      	add	r3, r0
 8002d1c:	334c      	adds	r3, #76	; 0x4c
 8002d1e:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8002d20:	69bb      	ldr	r3, [r7, #24]
 8002d22:	015a      	lsls	r2, r3, #5
 8002d24:	6a3b      	ldr	r3, [r7, #32]
 8002d26:	4413      	add	r3, r2
 8002d28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d2c:	691a      	ldr	r2, [r3, #16]
 8002d2e:	4b1d      	ldr	r3, [pc, #116]	; (8002da4 <HCD_RXQLVL_IRQHandler+0x154>)
 8002d30:	4013      	ands	r3, r2
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d031      	beq.n	8002d9a <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002d36:	69bb      	ldr	r3, [r7, #24]
 8002d38:	015a      	lsls	r2, r3, #5
 8002d3a:	6a3b      	ldr	r3, [r7, #32]
 8002d3c:	4413      	add	r3, r2
 8002d3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002d4c:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002d54:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002d56:	69bb      	ldr	r3, [r7, #24]
 8002d58:	015a      	lsls	r2, r3, #5
 8002d5a:	6a3b      	ldr	r3, [r7, #32]
 8002d5c:	4413      	add	r3, r2
 8002d5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d62:	461a      	mov	r2, r3
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8002d68:	6879      	ldr	r1, [r7, #4]
 8002d6a:	69ba      	ldr	r2, [r7, #24]
 8002d6c:	4613      	mov	r3, r2
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	4413      	add	r3, r2
 8002d72:	00db      	lsls	r3, r3, #3
 8002d74:	440b      	add	r3, r1
 8002d76:	3350      	adds	r3, #80	; 0x50
 8002d78:	781b      	ldrb	r3, [r3, #0]
 8002d7a:	f083 0301 	eor.w	r3, r3, #1
 8002d7e:	b2d8      	uxtb	r0, r3
 8002d80:	6879      	ldr	r1, [r7, #4]
 8002d82:	69ba      	ldr	r2, [r7, #24]
 8002d84:	4613      	mov	r3, r2
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	4413      	add	r3, r2
 8002d8a:	00db      	lsls	r3, r3, #3
 8002d8c:	440b      	add	r3, r1
 8002d8e:	3350      	adds	r3, #80	; 0x50
 8002d90:	4602      	mov	r2, r0
 8002d92:	701a      	strb	r2, [r3, #0]
      break;
 8002d94:	e001      	b.n	8002d9a <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8002d96:	bf00      	nop
 8002d98:	e000      	b.n	8002d9c <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8002d9a:	bf00      	nop
  }
}
 8002d9c:	bf00      	nop
 8002d9e:	3728      	adds	r7, #40	; 0x28
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}
 8002da4:	1ff80000 	.word	0x1ff80000

08002da8 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b086      	sub	sp, #24
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002dd4:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	f003 0302 	and.w	r3, r3, #2
 8002ddc:	2b02      	cmp	r3, #2
 8002dde:	d113      	bne.n	8002e08 <HCD_Port_IRQHandler+0x60>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	f003 0301 	and.w	r3, r3, #1
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d10a      	bne.n	8002e00 <HCD_Port_IRQHandler+0x58>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	699a      	ldr	r2, [r3, #24]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8002df8:	619a      	str	r2, [r3, #24]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f009 fcba 	bl	800c774 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	f043 0302 	orr.w	r3, r3, #2
 8002e06:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	f003 0308 	and.w	r3, r3, #8
 8002e0e:	2b08      	cmp	r3, #8
 8002e10:	d147      	bne.n	8002ea2 <HCD_Port_IRQHandler+0xfa>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	f043 0308 	orr.w	r3, r3, #8
 8002e18:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	f003 0304 	and.w	r3, r3, #4
 8002e20:	2b04      	cmp	r3, #4
 8002e22:	d129      	bne.n	8002e78 <HCD_Port_IRQHandler+0xd0>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	699b      	ldr	r3, [r3, #24]
 8002e28:	2b02      	cmp	r3, #2
 8002e2a:	d113      	bne.n	8002e54 <HCD_Port_IRQHandler+0xac>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002e32:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002e36:	d106      	bne.n	8002e46 <HCD_Port_IRQHandler+0x9e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	2102      	movs	r1, #2
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f003 f8f2 	bl	8006028 <USB_InitFSLSPClkSel>
 8002e44:	e011      	b.n	8002e6a <HCD_Port_IRQHandler+0xc2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	2101      	movs	r1, #1
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f003 f8eb 	bl	8006028 <USB_InitFSLSPClkSel>
 8002e52:	e00a      	b.n	8002e6a <HCD_Port_IRQHandler+0xc2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d106      	bne.n	8002e6a <HCD_Port_IRQHandler+0xc2>
        {
          USBx_HOST->HFIR = 60000U;
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e62:	461a      	mov	r2, r3
 8002e64:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002e68:	6053      	str	r3, [r2, #4]
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f009 fcb0 	bl	800c7d0 <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	f009 fc7f 	bl	800c774 <HAL_HCD_Connect_Callback>
 8002e76:	e014      	b.n	8002ea2 <HCD_Port_IRQHandler+0xfa>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002e78:	6878      	ldr	r0, [r7, #4]
 8002e7a:	f009 fcb7 	bl	800c7ec <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	693a      	ldr	r2, [r7, #16]
 8002e88:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8002e8c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002e90:	6013      	str	r3, [r2, #0]
                      USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	699a      	ldr	r2, [r3, #24]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002ea0:	619a      	str	r2, [r3, #24]
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	f003 0320 	and.w	r3, r3, #32
 8002ea8:	2b20      	cmp	r3, #32
 8002eaa:	d103      	bne.n	8002eb4 <HCD_Port_IRQHandler+0x10c>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	f043 0320 	orr.w	r3, r3, #32
 8002eb2:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002eba:	461a      	mov	r2, r3
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	6013      	str	r3, [r2, #0]
}
 8002ec0:	bf00      	nop
 8002ec2:	3718      	adds	r7, #24
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}

08002ec8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b084      	sub	sp, #16
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d101      	bne.n	8002eda <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e11f      	b.n	800311a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d106      	bne.n	8002ef4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f008 ffcc 	bl	800be8c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2224      	movs	r2, #36	; 0x24
 8002ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f022 0201 	bic.w	r2, r2, #1
 8002f0a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f1a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f2a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002f2c:	f001 f922 	bl	8004174 <HAL_RCC_GetPCLK1Freq>
 8002f30:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	4a7b      	ldr	r2, [pc, #492]	; (8003124 <HAL_I2C_Init+0x25c>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d807      	bhi.n	8002f4c <HAL_I2C_Init+0x84>
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	4a7a      	ldr	r2, [pc, #488]	; (8003128 <HAL_I2C_Init+0x260>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	bf94      	ite	ls
 8002f44:	2301      	movls	r3, #1
 8002f46:	2300      	movhi	r3, #0
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	e006      	b.n	8002f5a <HAL_I2C_Init+0x92>
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	4a77      	ldr	r2, [pc, #476]	; (800312c <HAL_I2C_Init+0x264>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	bf94      	ite	ls
 8002f54:	2301      	movls	r3, #1
 8002f56:	2300      	movhi	r3, #0
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d001      	beq.n	8002f62 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e0db      	b.n	800311a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	4a72      	ldr	r2, [pc, #456]	; (8003130 <HAL_I2C_Init+0x268>)
 8002f66:	fba2 2303 	umull	r2, r3, r2, r3
 8002f6a:	0c9b      	lsrs	r3, r3, #18
 8002f6c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	68ba      	ldr	r2, [r7, #8]
 8002f7e:	430a      	orrs	r2, r1
 8002f80:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	6a1b      	ldr	r3, [r3, #32]
 8002f88:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	4a64      	ldr	r2, [pc, #400]	; (8003124 <HAL_I2C_Init+0x25c>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d802      	bhi.n	8002f9c <HAL_I2C_Init+0xd4>
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	3301      	adds	r3, #1
 8002f9a:	e009      	b.n	8002fb0 <HAL_I2C_Init+0xe8>
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002fa2:	fb02 f303 	mul.w	r3, r2, r3
 8002fa6:	4a63      	ldr	r2, [pc, #396]	; (8003134 <HAL_I2C_Init+0x26c>)
 8002fa8:	fba2 2303 	umull	r2, r3, r2, r3
 8002fac:	099b      	lsrs	r3, r3, #6
 8002fae:	3301      	adds	r3, #1
 8002fb0:	687a      	ldr	r2, [r7, #4]
 8002fb2:	6812      	ldr	r2, [r2, #0]
 8002fb4:	430b      	orrs	r3, r1
 8002fb6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	69db      	ldr	r3, [r3, #28]
 8002fbe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002fc2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	4956      	ldr	r1, [pc, #344]	; (8003124 <HAL_I2C_Init+0x25c>)
 8002fcc:	428b      	cmp	r3, r1
 8002fce:	d80d      	bhi.n	8002fec <HAL_I2C_Init+0x124>
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	1e59      	subs	r1, r3, #1
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	005b      	lsls	r3, r3, #1
 8002fda:	fbb1 f3f3 	udiv	r3, r1, r3
 8002fde:	3301      	adds	r3, #1
 8002fe0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fe4:	2b04      	cmp	r3, #4
 8002fe6:	bf38      	it	cc
 8002fe8:	2304      	movcc	r3, #4
 8002fea:	e04f      	b.n	800308c <HAL_I2C_Init+0x1c4>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d111      	bne.n	8003018 <HAL_I2C_Init+0x150>
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	1e58      	subs	r0, r3, #1
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6859      	ldr	r1, [r3, #4]
 8002ffc:	460b      	mov	r3, r1
 8002ffe:	005b      	lsls	r3, r3, #1
 8003000:	440b      	add	r3, r1
 8003002:	fbb0 f3f3 	udiv	r3, r0, r3
 8003006:	3301      	adds	r3, #1
 8003008:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800300c:	2b00      	cmp	r3, #0
 800300e:	bf0c      	ite	eq
 8003010:	2301      	moveq	r3, #1
 8003012:	2300      	movne	r3, #0
 8003014:	b2db      	uxtb	r3, r3
 8003016:	e012      	b.n	800303e <HAL_I2C_Init+0x176>
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	1e58      	subs	r0, r3, #1
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6859      	ldr	r1, [r3, #4]
 8003020:	460b      	mov	r3, r1
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	440b      	add	r3, r1
 8003026:	0099      	lsls	r1, r3, #2
 8003028:	440b      	add	r3, r1
 800302a:	fbb0 f3f3 	udiv	r3, r0, r3
 800302e:	3301      	adds	r3, #1
 8003030:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003034:	2b00      	cmp	r3, #0
 8003036:	bf0c      	ite	eq
 8003038:	2301      	moveq	r3, #1
 800303a:	2300      	movne	r3, #0
 800303c:	b2db      	uxtb	r3, r3
 800303e:	2b00      	cmp	r3, #0
 8003040:	d001      	beq.n	8003046 <HAL_I2C_Init+0x17e>
 8003042:	2301      	movs	r3, #1
 8003044:	e022      	b.n	800308c <HAL_I2C_Init+0x1c4>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d10e      	bne.n	800306c <HAL_I2C_Init+0x1a4>
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	1e58      	subs	r0, r3, #1
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6859      	ldr	r1, [r3, #4]
 8003056:	460b      	mov	r3, r1
 8003058:	005b      	lsls	r3, r3, #1
 800305a:	440b      	add	r3, r1
 800305c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003060:	3301      	adds	r3, #1
 8003062:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003066:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800306a:	e00f      	b.n	800308c <HAL_I2C_Init+0x1c4>
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	1e58      	subs	r0, r3, #1
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6859      	ldr	r1, [r3, #4]
 8003074:	460b      	mov	r3, r1
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	440b      	add	r3, r1
 800307a:	0099      	lsls	r1, r3, #2
 800307c:	440b      	add	r3, r1
 800307e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003082:	3301      	adds	r3, #1
 8003084:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003088:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800308c:	6879      	ldr	r1, [r7, #4]
 800308e:	6809      	ldr	r1, [r1, #0]
 8003090:	4313      	orrs	r3, r2
 8003092:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	69da      	ldr	r2, [r3, #28]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6a1b      	ldr	r3, [r3, #32]
 80030a6:	431a      	orrs	r2, r3
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	430a      	orrs	r2, r1
 80030ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80030ba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	6911      	ldr	r1, [r2, #16]
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	68d2      	ldr	r2, [r2, #12]
 80030c6:	4311      	orrs	r1, r2
 80030c8:	687a      	ldr	r2, [r7, #4]
 80030ca:	6812      	ldr	r2, [r2, #0]
 80030cc:	430b      	orrs	r3, r1
 80030ce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	68db      	ldr	r3, [r3, #12]
 80030d6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	695a      	ldr	r2, [r3, #20]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	699b      	ldr	r3, [r3, #24]
 80030e2:	431a      	orrs	r2, r3
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	430a      	orrs	r2, r1
 80030ea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f042 0201 	orr.w	r2, r2, #1
 80030fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2200      	movs	r2, #0
 8003100:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2220      	movs	r2, #32
 8003106:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2200      	movs	r2, #0
 800310e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2200      	movs	r2, #0
 8003114:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003118:	2300      	movs	r3, #0
}
 800311a:	4618      	mov	r0, r3
 800311c:	3710      	adds	r7, #16
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
 8003122:	bf00      	nop
 8003124:	000186a0 	.word	0x000186a0
 8003128:	001e847f 	.word	0x001e847f
 800312c:	003d08ff 	.word	0x003d08ff
 8003130:	431bde83 	.word	0x431bde83
 8003134:	10624dd3 	.word	0x10624dd3

08003138 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003138:	b480      	push	{r7}
 800313a:	b083      	sub	sp, #12
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
 8003140:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003148:	b2db      	uxtb	r3, r3
 800314a:	2b20      	cmp	r3, #32
 800314c:	d129      	bne.n	80031a2 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2224      	movs	r2, #36	; 0x24
 8003152:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f022 0201 	bic.w	r2, r2, #1
 8003164:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f022 0210 	bic.w	r2, r2, #16
 8003174:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	683a      	ldr	r2, [r7, #0]
 8003182:	430a      	orrs	r2, r1
 8003184:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f042 0201 	orr.w	r2, r2, #1
 8003194:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2220      	movs	r2, #32
 800319a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800319e:	2300      	movs	r3, #0
 80031a0:	e000      	b.n	80031a4 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80031a2:	2302      	movs	r3, #2
  }
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	370c      	adds	r7, #12
 80031a8:	46bd      	mov	sp, r7
 80031aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ae:	4770      	bx	lr

080031b0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b085      	sub	sp, #20
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
 80031b8:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80031ba:	2300      	movs	r3, #0
 80031bc:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	2b20      	cmp	r3, #32
 80031c8:	d12a      	bne.n	8003220 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2224      	movs	r2, #36	; 0x24
 80031ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f022 0201 	bic.w	r2, r2, #1
 80031e0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e8:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80031ea:	89fb      	ldrh	r3, [r7, #14]
 80031ec:	f023 030f 	bic.w	r3, r3, #15
 80031f0:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	b29a      	uxth	r2, r3
 80031f6:	89fb      	ldrh	r3, [r7, #14]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	89fa      	ldrh	r2, [r7, #14]
 8003202:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f042 0201 	orr.w	r2, r2, #1
 8003212:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2220      	movs	r2, #32
 8003218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800321c:	2300      	movs	r3, #0
 800321e:	e000      	b.n	8003222 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003220:	2302      	movs	r3, #2
  }
}
 8003222:	4618      	mov	r0, r3
 8003224:	3714      	adds	r7, #20
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr
	...

08003230 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b084      	sub	sp, #16
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d101      	bne.n	8003242 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e0bf      	b.n	80033c2 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8003248:	b2db      	uxtb	r3, r3
 800324a:	2b00      	cmp	r3, #0
 800324c:	d106      	bne.n	800325c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2200      	movs	r2, #0
 8003252:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f008 fe82 	bl	800bf60 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2202      	movs	r2, #2
 8003260:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	699a      	ldr	r2, [r3, #24]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8003272:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	6999      	ldr	r1, [r3, #24]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	685a      	ldr	r2, [r3, #4]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003288:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	691b      	ldr	r3, [r3, #16]
 800328e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	430a      	orrs	r2, r1
 8003296:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	6899      	ldr	r1, [r3, #8]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	4b4a      	ldr	r3, [pc, #296]	; (80033cc <HAL_LTDC_Init+0x19c>)
 80032a4:	400b      	ands	r3, r1
 80032a6:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	695b      	ldr	r3, [r3, #20]
 80032ac:	041b      	lsls	r3, r3, #16
 80032ae:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	6899      	ldr	r1, [r3, #8]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	699a      	ldr	r2, [r3, #24]
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	431a      	orrs	r2, r3
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	430a      	orrs	r2, r1
 80032c4:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	68d9      	ldr	r1, [r3, #12]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	4b3e      	ldr	r3, [pc, #248]	; (80033cc <HAL_LTDC_Init+0x19c>)
 80032d2:	400b      	ands	r3, r1
 80032d4:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	69db      	ldr	r3, [r3, #28]
 80032da:	041b      	lsls	r3, r3, #16
 80032dc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	68d9      	ldr	r1, [r3, #12]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6a1a      	ldr	r2, [r3, #32]
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	431a      	orrs	r2, r3
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	430a      	orrs	r2, r1
 80032f2:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	6919      	ldr	r1, [r3, #16]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	4b33      	ldr	r3, [pc, #204]	; (80033cc <HAL_LTDC_Init+0x19c>)
 8003300:	400b      	ands	r3, r1
 8003302:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003308:	041b      	lsls	r3, r3, #16
 800330a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	6919      	ldr	r1, [r3, #16]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	431a      	orrs	r2, r3
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	430a      	orrs	r2, r1
 8003320:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	6959      	ldr	r1, [r3, #20]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	4b27      	ldr	r3, [pc, #156]	; (80033cc <HAL_LTDC_Init+0x19c>)
 800332e:	400b      	ands	r3, r1
 8003330:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003336:	041b      	lsls	r3, r3, #16
 8003338:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	6959      	ldr	r1, [r3, #20]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	431a      	orrs	r2, r3
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	430a      	orrs	r2, r1
 800334e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003356:	021b      	lsls	r3, r3, #8
 8003358:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003360:	041b      	lsls	r3, r3, #16
 8003362:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8003372:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800337a:	68ba      	ldr	r2, [r7, #8]
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	4313      	orrs	r3, r2
 8003380:	687a      	ldr	r2, [r7, #4]
 8003382:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8003386:	431a      	orrs	r2, r3
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	430a      	orrs	r2, r1
 800338e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f042 0206 	orr.w	r2, r2, #6
 800339e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	699a      	ldr	r2, [r3, #24]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f042 0201 	orr.w	r2, r2, #1
 80033ae:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2200      	movs	r2, #0
 80033b4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2201      	movs	r2, #1
 80033bc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80033c0:	2300      	movs	r3, #0
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3710      	adds	r7, #16
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	f000f800 	.word	0xf000f800

080033d0 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b084      	sub	sp, #16
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033de:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033e6:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	f003 0304 	and.w	r3, r3, #4
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d023      	beq.n	800343a <HAL_LTDC_IRQHandler+0x6a>
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	f003 0304 	and.w	r3, r3, #4
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d01e      	beq.n	800343a <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f022 0204 	bic.w	r2, r2, #4
 800340a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	2204      	movs	r2, #4
 8003412:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800341a:	f043 0201 	orr.w	r2, r3, #1
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2204      	movs	r2, #4
 8003428:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2200      	movs	r2, #0
 8003430:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f000 f86f 	bl	8003518 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	f003 0302 	and.w	r3, r3, #2
 8003440:	2b00      	cmp	r3, #0
 8003442:	d023      	beq.n	800348c <HAL_LTDC_IRQHandler+0xbc>
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	f003 0302 	and.w	r3, r3, #2
 800344a:	2b00      	cmp	r3, #0
 800344c:	d01e      	beq.n	800348c <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f022 0202 	bic.w	r2, r2, #2
 800345c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	2202      	movs	r2, #2
 8003464:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800346c:	f043 0202 	orr.w	r2, r3, #2
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2204      	movs	r2, #4
 800347a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2200      	movs	r2, #0
 8003482:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f000 f846 	bl	8003518 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	f003 0301 	and.w	r3, r3, #1
 8003492:	2b00      	cmp	r3, #0
 8003494:	d01b      	beq.n	80034ce <HAL_LTDC_IRQHandler+0xfe>
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	f003 0301 	and.w	r3, r3, #1
 800349c:	2b00      	cmp	r3, #0
 800349e:	d016      	beq.n	80034ce <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f022 0201 	bic.w	r2, r2, #1
 80034ae:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	2201      	movs	r2, #1
 80034b6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2201      	movs	r2, #1
 80034bc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2200      	movs	r2, #0
 80034c4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	f000 f82f 	bl	800352c <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	f003 0308 	and.w	r3, r3, #8
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d01b      	beq.n	8003510 <HAL_LTDC_IRQHandler+0x140>
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	f003 0308 	and.w	r3, r3, #8
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d016      	beq.n	8003510 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f022 0208 	bic.w	r2, r2, #8
 80034f0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	2208      	movs	r2, #8
 80034f8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2201      	movs	r2, #1
 80034fe:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2200      	movs	r2, #0
 8003506:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f000 f818 	bl	8003540 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8003510:	bf00      	nop
 8003512:	3710      	adds	r7, #16
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}

08003518 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8003518:	b480      	push	{r7}
 800351a:	b083      	sub	sp, #12
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8003520:	bf00      	nop
 8003522:	370c      	adds	r7, #12
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr

0800352c <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800352c:	b480      	push	{r7}
 800352e:	b083      	sub	sp, #12
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8003534:	bf00      	nop
 8003536:	370c      	adds	r7, #12
 8003538:	46bd      	mov	sp, r7
 800353a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353e:	4770      	bx	lr

08003540 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8003540:	b480      	push	{r7}
 8003542:	b083      	sub	sp, #12
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8003548:	bf00      	nop
 800354a:	370c      	adds	r7, #12
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr

08003554 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003554:	b5b0      	push	{r4, r5, r7, lr}
 8003556:	b084      	sub	sp, #16
 8003558:	af00      	add	r7, sp, #0
 800355a:	60f8      	str	r0, [r7, #12]
 800355c:	60b9      	str	r1, [r7, #8]
 800355e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8003566:	2b01      	cmp	r3, #1
 8003568:	d101      	bne.n	800356e <HAL_LTDC_ConfigLayer+0x1a>
 800356a:	2302      	movs	r3, #2
 800356c:	e02c      	b.n	80035c8 <HAL_LTDC_ConfigLayer+0x74>
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2201      	movs	r2, #1
 8003572:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2202      	movs	r2, #2
 800357a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800357e:	68fa      	ldr	r2, [r7, #12]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2134      	movs	r1, #52	; 0x34
 8003584:	fb01 f303 	mul.w	r3, r1, r3
 8003588:	4413      	add	r3, r2
 800358a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	4614      	mov	r4, r2
 8003592:	461d      	mov	r5, r3
 8003594:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003596:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003598:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800359a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800359c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800359e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80035a0:	682b      	ldr	r3, [r5, #0]
 80035a2:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80035a4:	687a      	ldr	r2, [r7, #4]
 80035a6:	68b9      	ldr	r1, [r7, #8]
 80035a8:	68f8      	ldr	r0, [r7, #12]
 80035aa:	f000 f811 	bl	80035d0 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	2201      	movs	r2, #1
 80035b4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2201      	movs	r2, #1
 80035ba:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2200      	movs	r2, #0
 80035c2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80035c6:	2300      	movs	r3, #0
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	3710      	adds	r7, #16
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bdb0      	pop	{r4, r5, r7, pc}

080035d0 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b089      	sub	sp, #36	; 0x24
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	60f8      	str	r0, [r7, #12]
 80035d8:	60b9      	str	r1, [r7, #8]
 80035da:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	685a      	ldr	r2, [r3, #4]
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	68db      	ldr	r3, [r3, #12]
 80035e6:	0c1b      	lsrs	r3, r3, #16
 80035e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035ec:	4413      	add	r3, r2
 80035ee:	041b      	lsls	r3, r3, #16
 80035f0:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	461a      	mov	r2, r3
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	01db      	lsls	r3, r3, #7
 80035fc:	4413      	add	r3, r2
 80035fe:	3384      	adds	r3, #132	; 0x84
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	68fa      	ldr	r2, [r7, #12]
 8003604:	6812      	ldr	r2, [r2, #0]
 8003606:	4611      	mov	r1, r2
 8003608:	687a      	ldr	r2, [r7, #4]
 800360a:	01d2      	lsls	r2, r2, #7
 800360c:	440a      	add	r2, r1
 800360e:	3284      	adds	r2, #132	; 0x84
 8003610:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003614:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	68db      	ldr	r3, [r3, #12]
 8003620:	0c1b      	lsrs	r3, r3, #16
 8003622:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003626:	4413      	add	r3, r2
 8003628:	1c5a      	adds	r2, r3, #1
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4619      	mov	r1, r3
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	01db      	lsls	r3, r3, #7
 8003634:	440b      	add	r3, r1
 8003636:	3384      	adds	r3, #132	; 0x84
 8003638:	4619      	mov	r1, r3
 800363a:	69fb      	ldr	r3, [r7, #28]
 800363c:	4313      	orrs	r3, r2
 800363e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	68da      	ldr	r2, [r3, #12]
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	68db      	ldr	r3, [r3, #12]
 800364a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800364e:	4413      	add	r3, r2
 8003650:	041b      	lsls	r3, r3, #16
 8003652:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	461a      	mov	r2, r3
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	01db      	lsls	r3, r3, #7
 800365e:	4413      	add	r3, r2
 8003660:	3384      	adds	r3, #132	; 0x84
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	68fa      	ldr	r2, [r7, #12]
 8003666:	6812      	ldr	r2, [r2, #0]
 8003668:	4611      	mov	r1, r2
 800366a:	687a      	ldr	r2, [r7, #4]
 800366c:	01d2      	lsls	r2, r2, #7
 800366e:	440a      	add	r2, r1
 8003670:	3284      	adds	r2, #132	; 0x84
 8003672:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003676:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	689a      	ldr	r2, [r3, #8]
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	68db      	ldr	r3, [r3, #12]
 8003682:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003686:	4413      	add	r3, r2
 8003688:	1c5a      	adds	r2, r3, #1
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4619      	mov	r1, r3
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	01db      	lsls	r3, r3, #7
 8003694:	440b      	add	r3, r1
 8003696:	3384      	adds	r3, #132	; 0x84
 8003698:	4619      	mov	r1, r3
 800369a:	69fb      	ldr	r3, [r7, #28]
 800369c:	4313      	orrs	r3, r2
 800369e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	461a      	mov	r2, r3
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	01db      	lsls	r3, r3, #7
 80036aa:	4413      	add	r3, r2
 80036ac:	3384      	adds	r3, #132	; 0x84
 80036ae:	691b      	ldr	r3, [r3, #16]
 80036b0:	68fa      	ldr	r2, [r7, #12]
 80036b2:	6812      	ldr	r2, [r2, #0]
 80036b4:	4611      	mov	r1, r2
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	01d2      	lsls	r2, r2, #7
 80036ba:	440a      	add	r2, r1
 80036bc:	3284      	adds	r2, #132	; 0x84
 80036be:	f023 0307 	bic.w	r3, r3, #7
 80036c2:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	461a      	mov	r2, r3
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	01db      	lsls	r3, r3, #7
 80036ce:	4413      	add	r3, r2
 80036d0:	3384      	adds	r3, #132	; 0x84
 80036d2:	461a      	mov	r2, r3
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	691b      	ldr	r3, [r3, #16]
 80036d8:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80036e0:	021b      	lsls	r3, r3, #8
 80036e2:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80036ea:	041b      	lsls	r3, r3, #16
 80036ec:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	699b      	ldr	r3, [r3, #24]
 80036f2:	061b      	lsls	r3, r3, #24
 80036f4:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	461a      	mov	r2, r3
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	01db      	lsls	r3, r3, #7
 8003700:	4413      	add	r3, r2
 8003702:	3384      	adds	r3, #132	; 0x84
 8003704:	699b      	ldr	r3, [r3, #24]
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	461a      	mov	r2, r3
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	01db      	lsls	r3, r3, #7
 8003710:	4413      	add	r3, r2
 8003712:	3384      	adds	r3, #132	; 0x84
 8003714:	461a      	mov	r2, r3
 8003716:	2300      	movs	r3, #0
 8003718:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003720:	461a      	mov	r2, r3
 8003722:	69fb      	ldr	r3, [r7, #28]
 8003724:	431a      	orrs	r2, r3
 8003726:	69bb      	ldr	r3, [r7, #24]
 8003728:	431a      	orrs	r2, r3
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4619      	mov	r1, r3
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	01db      	lsls	r3, r3, #7
 8003734:	440b      	add	r3, r1
 8003736:	3384      	adds	r3, #132	; 0x84
 8003738:	4619      	mov	r1, r3
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	4313      	orrs	r3, r2
 800373e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	461a      	mov	r2, r3
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	01db      	lsls	r3, r3, #7
 800374a:	4413      	add	r3, r2
 800374c:	3384      	adds	r3, #132	; 0x84
 800374e:	695b      	ldr	r3, [r3, #20]
 8003750:	68fa      	ldr	r2, [r7, #12]
 8003752:	6812      	ldr	r2, [r2, #0]
 8003754:	4611      	mov	r1, r2
 8003756:	687a      	ldr	r2, [r7, #4]
 8003758:	01d2      	lsls	r2, r2, #7
 800375a:	440a      	add	r2, r1
 800375c:	3284      	adds	r2, #132	; 0x84
 800375e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003762:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	461a      	mov	r2, r3
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	01db      	lsls	r3, r3, #7
 800376e:	4413      	add	r3, r2
 8003770:	3384      	adds	r3, #132	; 0x84
 8003772:	461a      	mov	r2, r3
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	695b      	ldr	r3, [r3, #20]
 8003778:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	461a      	mov	r2, r3
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	01db      	lsls	r3, r3, #7
 8003784:	4413      	add	r3, r2
 8003786:	3384      	adds	r3, #132	; 0x84
 8003788:	69db      	ldr	r3, [r3, #28]
 800378a:	68fa      	ldr	r2, [r7, #12]
 800378c:	6812      	ldr	r2, [r2, #0]
 800378e:	4611      	mov	r1, r2
 8003790:	687a      	ldr	r2, [r7, #4]
 8003792:	01d2      	lsls	r2, r2, #7
 8003794:	440a      	add	r2, r1
 8003796:	3284      	adds	r2, #132	; 0x84
 8003798:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800379c:	f023 0307 	bic.w	r3, r3, #7
 80037a0:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	69da      	ldr	r2, [r3, #28]
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	6a1b      	ldr	r3, [r3, #32]
 80037aa:	68f9      	ldr	r1, [r7, #12]
 80037ac:	6809      	ldr	r1, [r1, #0]
 80037ae:	4608      	mov	r0, r1
 80037b0:	6879      	ldr	r1, [r7, #4]
 80037b2:	01c9      	lsls	r1, r1, #7
 80037b4:	4401      	add	r1, r0
 80037b6:	3184      	adds	r1, #132	; 0x84
 80037b8:	4313      	orrs	r3, r2
 80037ba:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	461a      	mov	r2, r3
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	01db      	lsls	r3, r3, #7
 80037c6:	4413      	add	r3, r2
 80037c8:	3384      	adds	r3, #132	; 0x84
 80037ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	461a      	mov	r2, r3
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	01db      	lsls	r3, r3, #7
 80037d6:	4413      	add	r3, r2
 80037d8:	3384      	adds	r3, #132	; 0x84
 80037da:	461a      	mov	r2, r3
 80037dc:	2300      	movs	r3, #0
 80037de:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	461a      	mov	r2, r3
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	01db      	lsls	r3, r3, #7
 80037ea:	4413      	add	r3, r2
 80037ec:	3384      	adds	r3, #132	; 0x84
 80037ee:	461a      	mov	r2, r3
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f4:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	691b      	ldr	r3, [r3, #16]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d102      	bne.n	8003804 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 80037fe:	2304      	movs	r3, #4
 8003800:	61fb      	str	r3, [r7, #28]
 8003802:	e01b      	b.n	800383c <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	691b      	ldr	r3, [r3, #16]
 8003808:	2b01      	cmp	r3, #1
 800380a:	d102      	bne.n	8003812 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 800380c:	2303      	movs	r3, #3
 800380e:	61fb      	str	r3, [r7, #28]
 8003810:	e014      	b.n	800383c <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	691b      	ldr	r3, [r3, #16]
 8003816:	2b04      	cmp	r3, #4
 8003818:	d00b      	beq.n	8003832 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800381e:	2b02      	cmp	r3, #2
 8003820:	d007      	beq.n	8003832 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003826:	2b03      	cmp	r3, #3
 8003828:	d003      	beq.n	8003832 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800382e:	2b07      	cmp	r3, #7
 8003830:	d102      	bne.n	8003838 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8003832:	2302      	movs	r3, #2
 8003834:	61fb      	str	r3, [r7, #28]
 8003836:	e001      	b.n	800383c <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8003838:	2301      	movs	r3, #1
 800383a:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	461a      	mov	r2, r3
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	01db      	lsls	r3, r3, #7
 8003846:	4413      	add	r3, r2
 8003848:	3384      	adds	r3, #132	; 0x84
 800384a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800384c:	68fa      	ldr	r2, [r7, #12]
 800384e:	6812      	ldr	r2, [r2, #0]
 8003850:	4611      	mov	r1, r2
 8003852:	687a      	ldr	r2, [r7, #4]
 8003854:	01d2      	lsls	r2, r2, #7
 8003856:	440a      	add	r2, r1
 8003858:	3284      	adds	r2, #132	; 0x84
 800385a:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800385e:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003864:	69fa      	ldr	r2, [r7, #28]
 8003866:	fb02 f303 	mul.w	r3, r2, r3
 800386a:	041a      	lsls	r2, r3, #16
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	6859      	ldr	r1, [r3, #4]
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	1acb      	subs	r3, r1, r3
 8003876:	69f9      	ldr	r1, [r7, #28]
 8003878:	fb01 f303 	mul.w	r3, r1, r3
 800387c:	3303      	adds	r3, #3
 800387e:	68f9      	ldr	r1, [r7, #12]
 8003880:	6809      	ldr	r1, [r1, #0]
 8003882:	4608      	mov	r0, r1
 8003884:	6879      	ldr	r1, [r7, #4]
 8003886:	01c9      	lsls	r1, r1, #7
 8003888:	4401      	add	r1, r0
 800388a:	3184      	adds	r1, #132	; 0x84
 800388c:	4313      	orrs	r3, r2
 800388e:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	461a      	mov	r2, r3
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	01db      	lsls	r3, r3, #7
 800389a:	4413      	add	r3, r2
 800389c:	3384      	adds	r3, #132	; 0x84
 800389e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a0:	68fa      	ldr	r2, [r7, #12]
 80038a2:	6812      	ldr	r2, [r2, #0]
 80038a4:	4611      	mov	r1, r2
 80038a6:	687a      	ldr	r2, [r7, #4]
 80038a8:	01d2      	lsls	r2, r2, #7
 80038aa:	440a      	add	r2, r1
 80038ac:	3284      	adds	r2, #132	; 0x84
 80038ae:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80038b2:	f023 0307 	bic.w	r3, r3, #7
 80038b6:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	461a      	mov	r2, r3
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	01db      	lsls	r3, r3, #7
 80038c2:	4413      	add	r3, r2
 80038c4:	3384      	adds	r3, #132	; 0x84
 80038c6:	461a      	mov	r2, r3
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038cc:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	461a      	mov	r2, r3
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	01db      	lsls	r3, r3, #7
 80038d8:	4413      	add	r3, r2
 80038da:	3384      	adds	r3, #132	; 0x84
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	68fa      	ldr	r2, [r7, #12]
 80038e0:	6812      	ldr	r2, [r2, #0]
 80038e2:	4611      	mov	r1, r2
 80038e4:	687a      	ldr	r2, [r7, #4]
 80038e6:	01d2      	lsls	r2, r2, #7
 80038e8:	440a      	add	r2, r1
 80038ea:	3284      	adds	r2, #132	; 0x84
 80038ec:	f043 0301 	orr.w	r3, r3, #1
 80038f0:	6013      	str	r3, [r2, #0]
}
 80038f2:	bf00      	nop
 80038f4:	3724      	adds	r7, #36	; 0x24
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr
	...

08003900 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b086      	sub	sp, #24
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d101      	bne.n	8003912 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e25b      	b.n	8003dca <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 0301 	and.w	r3, r3, #1
 800391a:	2b00      	cmp	r3, #0
 800391c:	d075      	beq.n	8003a0a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800391e:	4ba3      	ldr	r3, [pc, #652]	; (8003bac <HAL_RCC_OscConfig+0x2ac>)
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	f003 030c 	and.w	r3, r3, #12
 8003926:	2b04      	cmp	r3, #4
 8003928:	d00c      	beq.n	8003944 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800392a:	4ba0      	ldr	r3, [pc, #640]	; (8003bac <HAL_RCC_OscConfig+0x2ac>)
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003932:	2b08      	cmp	r3, #8
 8003934:	d112      	bne.n	800395c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003936:	4b9d      	ldr	r3, [pc, #628]	; (8003bac <HAL_RCC_OscConfig+0x2ac>)
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800393e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003942:	d10b      	bne.n	800395c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003944:	4b99      	ldr	r3, [pc, #612]	; (8003bac <HAL_RCC_OscConfig+0x2ac>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800394c:	2b00      	cmp	r3, #0
 800394e:	d05b      	beq.n	8003a08 <HAL_RCC_OscConfig+0x108>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d157      	bne.n	8003a08 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	e236      	b.n	8003dca <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003964:	d106      	bne.n	8003974 <HAL_RCC_OscConfig+0x74>
 8003966:	4b91      	ldr	r3, [pc, #580]	; (8003bac <HAL_RCC_OscConfig+0x2ac>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a90      	ldr	r2, [pc, #576]	; (8003bac <HAL_RCC_OscConfig+0x2ac>)
 800396c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003970:	6013      	str	r3, [r2, #0]
 8003972:	e01d      	b.n	80039b0 <HAL_RCC_OscConfig+0xb0>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800397c:	d10c      	bne.n	8003998 <HAL_RCC_OscConfig+0x98>
 800397e:	4b8b      	ldr	r3, [pc, #556]	; (8003bac <HAL_RCC_OscConfig+0x2ac>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a8a      	ldr	r2, [pc, #552]	; (8003bac <HAL_RCC_OscConfig+0x2ac>)
 8003984:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003988:	6013      	str	r3, [r2, #0]
 800398a:	4b88      	ldr	r3, [pc, #544]	; (8003bac <HAL_RCC_OscConfig+0x2ac>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a87      	ldr	r2, [pc, #540]	; (8003bac <HAL_RCC_OscConfig+0x2ac>)
 8003990:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003994:	6013      	str	r3, [r2, #0]
 8003996:	e00b      	b.n	80039b0 <HAL_RCC_OscConfig+0xb0>
 8003998:	4b84      	ldr	r3, [pc, #528]	; (8003bac <HAL_RCC_OscConfig+0x2ac>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a83      	ldr	r2, [pc, #524]	; (8003bac <HAL_RCC_OscConfig+0x2ac>)
 800399e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039a2:	6013      	str	r3, [r2, #0]
 80039a4:	4b81      	ldr	r3, [pc, #516]	; (8003bac <HAL_RCC_OscConfig+0x2ac>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a80      	ldr	r2, [pc, #512]	; (8003bac <HAL_RCC_OscConfig+0x2ac>)
 80039aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d013      	beq.n	80039e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039b8:	f7fc fdd0 	bl	800055c <HAL_GetTick>
 80039bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039be:	e008      	b.n	80039d2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039c0:	f7fc fdcc 	bl	800055c <HAL_GetTick>
 80039c4:	4602      	mov	r2, r0
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	1ad3      	subs	r3, r2, r3
 80039ca:	2b64      	cmp	r3, #100	; 0x64
 80039cc:	d901      	bls.n	80039d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80039ce:	2303      	movs	r3, #3
 80039d0:	e1fb      	b.n	8003dca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039d2:	4b76      	ldr	r3, [pc, #472]	; (8003bac <HAL_RCC_OscConfig+0x2ac>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d0f0      	beq.n	80039c0 <HAL_RCC_OscConfig+0xc0>
 80039de:	e014      	b.n	8003a0a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039e0:	f7fc fdbc 	bl	800055c <HAL_GetTick>
 80039e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039e6:	e008      	b.n	80039fa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039e8:	f7fc fdb8 	bl	800055c <HAL_GetTick>
 80039ec:	4602      	mov	r2, r0
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	1ad3      	subs	r3, r2, r3
 80039f2:	2b64      	cmp	r3, #100	; 0x64
 80039f4:	d901      	bls.n	80039fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80039f6:	2303      	movs	r3, #3
 80039f8:	e1e7      	b.n	8003dca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039fa:	4b6c      	ldr	r3, [pc, #432]	; (8003bac <HAL_RCC_OscConfig+0x2ac>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d1f0      	bne.n	80039e8 <HAL_RCC_OscConfig+0xe8>
 8003a06:	e000      	b.n	8003a0a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 0302 	and.w	r3, r3, #2
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d063      	beq.n	8003ade <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a16:	4b65      	ldr	r3, [pc, #404]	; (8003bac <HAL_RCC_OscConfig+0x2ac>)
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	f003 030c 	and.w	r3, r3, #12
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d00b      	beq.n	8003a3a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a22:	4b62      	ldr	r3, [pc, #392]	; (8003bac <HAL_RCC_OscConfig+0x2ac>)
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a2a:	2b08      	cmp	r3, #8
 8003a2c:	d11c      	bne.n	8003a68 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a2e:	4b5f      	ldr	r3, [pc, #380]	; (8003bac <HAL_RCC_OscConfig+0x2ac>)
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d116      	bne.n	8003a68 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a3a:	4b5c      	ldr	r3, [pc, #368]	; (8003bac <HAL_RCC_OscConfig+0x2ac>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 0302 	and.w	r3, r3, #2
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d005      	beq.n	8003a52 <HAL_RCC_OscConfig+0x152>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	68db      	ldr	r3, [r3, #12]
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	d001      	beq.n	8003a52 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e1bb      	b.n	8003dca <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a52:	4b56      	ldr	r3, [pc, #344]	; (8003bac <HAL_RCC_OscConfig+0x2ac>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	691b      	ldr	r3, [r3, #16]
 8003a5e:	00db      	lsls	r3, r3, #3
 8003a60:	4952      	ldr	r1, [pc, #328]	; (8003bac <HAL_RCC_OscConfig+0x2ac>)
 8003a62:	4313      	orrs	r3, r2
 8003a64:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a66:	e03a      	b.n	8003ade <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	68db      	ldr	r3, [r3, #12]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d020      	beq.n	8003ab2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a70:	4b4f      	ldr	r3, [pc, #316]	; (8003bb0 <HAL_RCC_OscConfig+0x2b0>)
 8003a72:	2201      	movs	r2, #1
 8003a74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a76:	f7fc fd71 	bl	800055c <HAL_GetTick>
 8003a7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a7c:	e008      	b.n	8003a90 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a7e:	f7fc fd6d 	bl	800055c <HAL_GetTick>
 8003a82:	4602      	mov	r2, r0
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	1ad3      	subs	r3, r2, r3
 8003a88:	2b02      	cmp	r3, #2
 8003a8a:	d901      	bls.n	8003a90 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003a8c:	2303      	movs	r3, #3
 8003a8e:	e19c      	b.n	8003dca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a90:	4b46      	ldr	r3, [pc, #280]	; (8003bac <HAL_RCC_OscConfig+0x2ac>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f003 0302 	and.w	r3, r3, #2
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d0f0      	beq.n	8003a7e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a9c:	4b43      	ldr	r3, [pc, #268]	; (8003bac <HAL_RCC_OscConfig+0x2ac>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	691b      	ldr	r3, [r3, #16]
 8003aa8:	00db      	lsls	r3, r3, #3
 8003aaa:	4940      	ldr	r1, [pc, #256]	; (8003bac <HAL_RCC_OscConfig+0x2ac>)
 8003aac:	4313      	orrs	r3, r2
 8003aae:	600b      	str	r3, [r1, #0]
 8003ab0:	e015      	b.n	8003ade <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ab2:	4b3f      	ldr	r3, [pc, #252]	; (8003bb0 <HAL_RCC_OscConfig+0x2b0>)
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ab8:	f7fc fd50 	bl	800055c <HAL_GetTick>
 8003abc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003abe:	e008      	b.n	8003ad2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ac0:	f7fc fd4c 	bl	800055c <HAL_GetTick>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	2b02      	cmp	r3, #2
 8003acc:	d901      	bls.n	8003ad2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003ace:	2303      	movs	r3, #3
 8003ad0:	e17b      	b.n	8003dca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ad2:	4b36      	ldr	r3, [pc, #216]	; (8003bac <HAL_RCC_OscConfig+0x2ac>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 0302 	and.w	r3, r3, #2
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d1f0      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 0308 	and.w	r3, r3, #8
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d030      	beq.n	8003b4c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	695b      	ldr	r3, [r3, #20]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d016      	beq.n	8003b20 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003af2:	4b30      	ldr	r3, [pc, #192]	; (8003bb4 <HAL_RCC_OscConfig+0x2b4>)
 8003af4:	2201      	movs	r2, #1
 8003af6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003af8:	f7fc fd30 	bl	800055c <HAL_GetTick>
 8003afc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003afe:	e008      	b.n	8003b12 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b00:	f7fc fd2c 	bl	800055c <HAL_GetTick>
 8003b04:	4602      	mov	r2, r0
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	1ad3      	subs	r3, r2, r3
 8003b0a:	2b02      	cmp	r3, #2
 8003b0c:	d901      	bls.n	8003b12 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003b0e:	2303      	movs	r3, #3
 8003b10:	e15b      	b.n	8003dca <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b12:	4b26      	ldr	r3, [pc, #152]	; (8003bac <HAL_RCC_OscConfig+0x2ac>)
 8003b14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b16:	f003 0302 	and.w	r3, r3, #2
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d0f0      	beq.n	8003b00 <HAL_RCC_OscConfig+0x200>
 8003b1e:	e015      	b.n	8003b4c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b20:	4b24      	ldr	r3, [pc, #144]	; (8003bb4 <HAL_RCC_OscConfig+0x2b4>)
 8003b22:	2200      	movs	r2, #0
 8003b24:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b26:	f7fc fd19 	bl	800055c <HAL_GetTick>
 8003b2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b2c:	e008      	b.n	8003b40 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b2e:	f7fc fd15 	bl	800055c <HAL_GetTick>
 8003b32:	4602      	mov	r2, r0
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	1ad3      	subs	r3, r2, r3
 8003b38:	2b02      	cmp	r3, #2
 8003b3a:	d901      	bls.n	8003b40 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003b3c:	2303      	movs	r3, #3
 8003b3e:	e144      	b.n	8003dca <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b40:	4b1a      	ldr	r3, [pc, #104]	; (8003bac <HAL_RCC_OscConfig+0x2ac>)
 8003b42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b44:	f003 0302 	and.w	r3, r3, #2
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d1f0      	bne.n	8003b2e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f003 0304 	and.w	r3, r3, #4
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	f000 80a0 	beq.w	8003c9a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b5e:	4b13      	ldr	r3, [pc, #76]	; (8003bac <HAL_RCC_OscConfig+0x2ac>)
 8003b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d10f      	bne.n	8003b8a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	60bb      	str	r3, [r7, #8]
 8003b6e:	4b0f      	ldr	r3, [pc, #60]	; (8003bac <HAL_RCC_OscConfig+0x2ac>)
 8003b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b72:	4a0e      	ldr	r2, [pc, #56]	; (8003bac <HAL_RCC_OscConfig+0x2ac>)
 8003b74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b78:	6413      	str	r3, [r2, #64]	; 0x40
 8003b7a:	4b0c      	ldr	r3, [pc, #48]	; (8003bac <HAL_RCC_OscConfig+0x2ac>)
 8003b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b82:	60bb      	str	r3, [r7, #8]
 8003b84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b86:	2301      	movs	r3, #1
 8003b88:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b8a:	4b0b      	ldr	r3, [pc, #44]	; (8003bb8 <HAL_RCC_OscConfig+0x2b8>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d121      	bne.n	8003bda <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b96:	4b08      	ldr	r3, [pc, #32]	; (8003bb8 <HAL_RCC_OscConfig+0x2b8>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a07      	ldr	r2, [pc, #28]	; (8003bb8 <HAL_RCC_OscConfig+0x2b8>)
 8003b9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ba0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ba2:	f7fc fcdb 	bl	800055c <HAL_GetTick>
 8003ba6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ba8:	e011      	b.n	8003bce <HAL_RCC_OscConfig+0x2ce>
 8003baa:	bf00      	nop
 8003bac:	40023800 	.word	0x40023800
 8003bb0:	42470000 	.word	0x42470000
 8003bb4:	42470e80 	.word	0x42470e80
 8003bb8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bbc:	f7fc fcce 	bl	800055c <HAL_GetTick>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	2b02      	cmp	r3, #2
 8003bc8:	d901      	bls.n	8003bce <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	e0fd      	b.n	8003dca <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bce:	4b81      	ldr	r3, [pc, #516]	; (8003dd4 <HAL_RCC_OscConfig+0x4d4>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d0f0      	beq.n	8003bbc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d106      	bne.n	8003bf0 <HAL_RCC_OscConfig+0x2f0>
 8003be2:	4b7d      	ldr	r3, [pc, #500]	; (8003dd8 <HAL_RCC_OscConfig+0x4d8>)
 8003be4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003be6:	4a7c      	ldr	r2, [pc, #496]	; (8003dd8 <HAL_RCC_OscConfig+0x4d8>)
 8003be8:	f043 0301 	orr.w	r3, r3, #1
 8003bec:	6713      	str	r3, [r2, #112]	; 0x70
 8003bee:	e01c      	b.n	8003c2a <HAL_RCC_OscConfig+0x32a>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	2b05      	cmp	r3, #5
 8003bf6:	d10c      	bne.n	8003c12 <HAL_RCC_OscConfig+0x312>
 8003bf8:	4b77      	ldr	r3, [pc, #476]	; (8003dd8 <HAL_RCC_OscConfig+0x4d8>)
 8003bfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bfc:	4a76      	ldr	r2, [pc, #472]	; (8003dd8 <HAL_RCC_OscConfig+0x4d8>)
 8003bfe:	f043 0304 	orr.w	r3, r3, #4
 8003c02:	6713      	str	r3, [r2, #112]	; 0x70
 8003c04:	4b74      	ldr	r3, [pc, #464]	; (8003dd8 <HAL_RCC_OscConfig+0x4d8>)
 8003c06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c08:	4a73      	ldr	r2, [pc, #460]	; (8003dd8 <HAL_RCC_OscConfig+0x4d8>)
 8003c0a:	f043 0301 	orr.w	r3, r3, #1
 8003c0e:	6713      	str	r3, [r2, #112]	; 0x70
 8003c10:	e00b      	b.n	8003c2a <HAL_RCC_OscConfig+0x32a>
 8003c12:	4b71      	ldr	r3, [pc, #452]	; (8003dd8 <HAL_RCC_OscConfig+0x4d8>)
 8003c14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c16:	4a70      	ldr	r2, [pc, #448]	; (8003dd8 <HAL_RCC_OscConfig+0x4d8>)
 8003c18:	f023 0301 	bic.w	r3, r3, #1
 8003c1c:	6713      	str	r3, [r2, #112]	; 0x70
 8003c1e:	4b6e      	ldr	r3, [pc, #440]	; (8003dd8 <HAL_RCC_OscConfig+0x4d8>)
 8003c20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c22:	4a6d      	ldr	r2, [pc, #436]	; (8003dd8 <HAL_RCC_OscConfig+0x4d8>)
 8003c24:	f023 0304 	bic.w	r3, r3, #4
 8003c28:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d015      	beq.n	8003c5e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c32:	f7fc fc93 	bl	800055c <HAL_GetTick>
 8003c36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c38:	e00a      	b.n	8003c50 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c3a:	f7fc fc8f 	bl	800055c <HAL_GetTick>
 8003c3e:	4602      	mov	r2, r0
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	1ad3      	subs	r3, r2, r3
 8003c44:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d901      	bls.n	8003c50 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003c4c:	2303      	movs	r3, #3
 8003c4e:	e0bc      	b.n	8003dca <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c50:	4b61      	ldr	r3, [pc, #388]	; (8003dd8 <HAL_RCC_OscConfig+0x4d8>)
 8003c52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c54:	f003 0302 	and.w	r3, r3, #2
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d0ee      	beq.n	8003c3a <HAL_RCC_OscConfig+0x33a>
 8003c5c:	e014      	b.n	8003c88 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c5e:	f7fc fc7d 	bl	800055c <HAL_GetTick>
 8003c62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c64:	e00a      	b.n	8003c7c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c66:	f7fc fc79 	bl	800055c <HAL_GetTick>
 8003c6a:	4602      	mov	r2, r0
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	1ad3      	subs	r3, r2, r3
 8003c70:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d901      	bls.n	8003c7c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003c78:	2303      	movs	r3, #3
 8003c7a:	e0a6      	b.n	8003dca <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c7c:	4b56      	ldr	r3, [pc, #344]	; (8003dd8 <HAL_RCC_OscConfig+0x4d8>)
 8003c7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c80:	f003 0302 	and.w	r3, r3, #2
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d1ee      	bne.n	8003c66 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c88:	7dfb      	ldrb	r3, [r7, #23]
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d105      	bne.n	8003c9a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c8e:	4b52      	ldr	r3, [pc, #328]	; (8003dd8 <HAL_RCC_OscConfig+0x4d8>)
 8003c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c92:	4a51      	ldr	r2, [pc, #324]	; (8003dd8 <HAL_RCC_OscConfig+0x4d8>)
 8003c94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c98:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	699b      	ldr	r3, [r3, #24]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	f000 8092 	beq.w	8003dc8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ca4:	4b4c      	ldr	r3, [pc, #304]	; (8003dd8 <HAL_RCC_OscConfig+0x4d8>)
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	f003 030c 	and.w	r3, r3, #12
 8003cac:	2b08      	cmp	r3, #8
 8003cae:	d05c      	beq.n	8003d6a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	699b      	ldr	r3, [r3, #24]
 8003cb4:	2b02      	cmp	r3, #2
 8003cb6:	d141      	bne.n	8003d3c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cb8:	4b48      	ldr	r3, [pc, #288]	; (8003ddc <HAL_RCC_OscConfig+0x4dc>)
 8003cba:	2200      	movs	r2, #0
 8003cbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cbe:	f7fc fc4d 	bl	800055c <HAL_GetTick>
 8003cc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cc4:	e008      	b.n	8003cd8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cc6:	f7fc fc49 	bl	800055c <HAL_GetTick>
 8003cca:	4602      	mov	r2, r0
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	1ad3      	subs	r3, r2, r3
 8003cd0:	2b02      	cmp	r3, #2
 8003cd2:	d901      	bls.n	8003cd8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003cd4:	2303      	movs	r3, #3
 8003cd6:	e078      	b.n	8003dca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cd8:	4b3f      	ldr	r3, [pc, #252]	; (8003dd8 <HAL_RCC_OscConfig+0x4d8>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d1f0      	bne.n	8003cc6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	69da      	ldr	r2, [r3, #28]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6a1b      	ldr	r3, [r3, #32]
 8003cec:	431a      	orrs	r2, r3
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf2:	019b      	lsls	r3, r3, #6
 8003cf4:	431a      	orrs	r2, r3
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cfa:	085b      	lsrs	r3, r3, #1
 8003cfc:	3b01      	subs	r3, #1
 8003cfe:	041b      	lsls	r3, r3, #16
 8003d00:	431a      	orrs	r2, r3
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d06:	061b      	lsls	r3, r3, #24
 8003d08:	4933      	ldr	r1, [pc, #204]	; (8003dd8 <HAL_RCC_OscConfig+0x4d8>)
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d0e:	4b33      	ldr	r3, [pc, #204]	; (8003ddc <HAL_RCC_OscConfig+0x4dc>)
 8003d10:	2201      	movs	r2, #1
 8003d12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d14:	f7fc fc22 	bl	800055c <HAL_GetTick>
 8003d18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d1a:	e008      	b.n	8003d2e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d1c:	f7fc fc1e 	bl	800055c <HAL_GetTick>
 8003d20:	4602      	mov	r2, r0
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	1ad3      	subs	r3, r2, r3
 8003d26:	2b02      	cmp	r3, #2
 8003d28:	d901      	bls.n	8003d2e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003d2a:	2303      	movs	r3, #3
 8003d2c:	e04d      	b.n	8003dca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d2e:	4b2a      	ldr	r3, [pc, #168]	; (8003dd8 <HAL_RCC_OscConfig+0x4d8>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d0f0      	beq.n	8003d1c <HAL_RCC_OscConfig+0x41c>
 8003d3a:	e045      	b.n	8003dc8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d3c:	4b27      	ldr	r3, [pc, #156]	; (8003ddc <HAL_RCC_OscConfig+0x4dc>)
 8003d3e:	2200      	movs	r2, #0
 8003d40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d42:	f7fc fc0b 	bl	800055c <HAL_GetTick>
 8003d46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d48:	e008      	b.n	8003d5c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d4a:	f7fc fc07 	bl	800055c <HAL_GetTick>
 8003d4e:	4602      	mov	r2, r0
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	1ad3      	subs	r3, r2, r3
 8003d54:	2b02      	cmp	r3, #2
 8003d56:	d901      	bls.n	8003d5c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003d58:	2303      	movs	r3, #3
 8003d5a:	e036      	b.n	8003dca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d5c:	4b1e      	ldr	r3, [pc, #120]	; (8003dd8 <HAL_RCC_OscConfig+0x4d8>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d1f0      	bne.n	8003d4a <HAL_RCC_OscConfig+0x44a>
 8003d68:	e02e      	b.n	8003dc8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	699b      	ldr	r3, [r3, #24]
 8003d6e:	2b01      	cmp	r3, #1
 8003d70:	d101      	bne.n	8003d76 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e029      	b.n	8003dca <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003d76:	4b18      	ldr	r3, [pc, #96]	; (8003dd8 <HAL_RCC_OscConfig+0x4d8>)
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	69db      	ldr	r3, [r3, #28]
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d11c      	bne.n	8003dc4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d115      	bne.n	8003dc4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003d98:	68fa      	ldr	r2, [r7, #12]
 8003d9a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003d9e:	4013      	ands	r3, r2
 8003da0:	687a      	ldr	r2, [r7, #4]
 8003da2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d10d      	bne.n	8003dc4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003db2:	429a      	cmp	r2, r3
 8003db4:	d106      	bne.n	8003dc4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003dc0:	429a      	cmp	r2, r3
 8003dc2:	d001      	beq.n	8003dc8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	e000      	b.n	8003dca <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003dc8:	2300      	movs	r3, #0
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	3718      	adds	r7, #24
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}
 8003dd2:	bf00      	nop
 8003dd4:	40007000 	.word	0x40007000
 8003dd8:	40023800 	.word	0x40023800
 8003ddc:	42470060 	.word	0x42470060

08003de0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b084      	sub	sp, #16
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
 8003de8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d101      	bne.n	8003df4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	e0cc      	b.n	8003f8e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003df4:	4b68      	ldr	r3, [pc, #416]	; (8003f98 <HAL_RCC_ClockConfig+0x1b8>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 030f 	and.w	r3, r3, #15
 8003dfc:	683a      	ldr	r2, [r7, #0]
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d90c      	bls.n	8003e1c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e02:	4b65      	ldr	r3, [pc, #404]	; (8003f98 <HAL_RCC_ClockConfig+0x1b8>)
 8003e04:	683a      	ldr	r2, [r7, #0]
 8003e06:	b2d2      	uxtb	r2, r2
 8003e08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e0a:	4b63      	ldr	r3, [pc, #396]	; (8003f98 <HAL_RCC_ClockConfig+0x1b8>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f003 030f 	and.w	r3, r3, #15
 8003e12:	683a      	ldr	r2, [r7, #0]
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d001      	beq.n	8003e1c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	e0b8      	b.n	8003f8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f003 0302 	and.w	r3, r3, #2
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d020      	beq.n	8003e6a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f003 0304 	and.w	r3, r3, #4
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d005      	beq.n	8003e40 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e34:	4b59      	ldr	r3, [pc, #356]	; (8003f9c <HAL_RCC_ClockConfig+0x1bc>)
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	4a58      	ldr	r2, [pc, #352]	; (8003f9c <HAL_RCC_ClockConfig+0x1bc>)
 8003e3a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003e3e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 0308 	and.w	r3, r3, #8
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d005      	beq.n	8003e58 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e4c:	4b53      	ldr	r3, [pc, #332]	; (8003f9c <HAL_RCC_ClockConfig+0x1bc>)
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	4a52      	ldr	r2, [pc, #328]	; (8003f9c <HAL_RCC_ClockConfig+0x1bc>)
 8003e52:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003e56:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e58:	4b50      	ldr	r3, [pc, #320]	; (8003f9c <HAL_RCC_ClockConfig+0x1bc>)
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	494d      	ldr	r1, [pc, #308]	; (8003f9c <HAL_RCC_ClockConfig+0x1bc>)
 8003e66:	4313      	orrs	r3, r2
 8003e68:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f003 0301 	and.w	r3, r3, #1
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d044      	beq.n	8003f00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	d107      	bne.n	8003e8e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e7e:	4b47      	ldr	r3, [pc, #284]	; (8003f9c <HAL_RCC_ClockConfig+0x1bc>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d119      	bne.n	8003ebe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e07f      	b.n	8003f8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	2b02      	cmp	r3, #2
 8003e94:	d003      	beq.n	8003e9e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e9a:	2b03      	cmp	r3, #3
 8003e9c:	d107      	bne.n	8003eae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e9e:	4b3f      	ldr	r3, [pc, #252]	; (8003f9c <HAL_RCC_ClockConfig+0x1bc>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d109      	bne.n	8003ebe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e06f      	b.n	8003f8e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003eae:	4b3b      	ldr	r3, [pc, #236]	; (8003f9c <HAL_RCC_ClockConfig+0x1bc>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 0302 	and.w	r3, r3, #2
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d101      	bne.n	8003ebe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e067      	b.n	8003f8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ebe:	4b37      	ldr	r3, [pc, #220]	; (8003f9c <HAL_RCC_ClockConfig+0x1bc>)
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	f023 0203 	bic.w	r2, r3, #3
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	4934      	ldr	r1, [pc, #208]	; (8003f9c <HAL_RCC_ClockConfig+0x1bc>)
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ed0:	f7fc fb44 	bl	800055c <HAL_GetTick>
 8003ed4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ed6:	e00a      	b.n	8003eee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ed8:	f7fc fb40 	bl	800055c <HAL_GetTick>
 8003edc:	4602      	mov	r2, r0
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	1ad3      	subs	r3, r2, r3
 8003ee2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d901      	bls.n	8003eee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003eea:	2303      	movs	r3, #3
 8003eec:	e04f      	b.n	8003f8e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eee:	4b2b      	ldr	r3, [pc, #172]	; (8003f9c <HAL_RCC_ClockConfig+0x1bc>)
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	f003 020c 	and.w	r2, r3, #12
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	009b      	lsls	r3, r3, #2
 8003efc:	429a      	cmp	r2, r3
 8003efe:	d1eb      	bne.n	8003ed8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f00:	4b25      	ldr	r3, [pc, #148]	; (8003f98 <HAL_RCC_ClockConfig+0x1b8>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 030f 	and.w	r3, r3, #15
 8003f08:	683a      	ldr	r2, [r7, #0]
 8003f0a:	429a      	cmp	r2, r3
 8003f0c:	d20c      	bcs.n	8003f28 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f0e:	4b22      	ldr	r3, [pc, #136]	; (8003f98 <HAL_RCC_ClockConfig+0x1b8>)
 8003f10:	683a      	ldr	r2, [r7, #0]
 8003f12:	b2d2      	uxtb	r2, r2
 8003f14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f16:	4b20      	ldr	r3, [pc, #128]	; (8003f98 <HAL_RCC_ClockConfig+0x1b8>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 030f 	and.w	r3, r3, #15
 8003f1e:	683a      	ldr	r2, [r7, #0]
 8003f20:	429a      	cmp	r2, r3
 8003f22:	d001      	beq.n	8003f28 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003f24:	2301      	movs	r3, #1
 8003f26:	e032      	b.n	8003f8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f003 0304 	and.w	r3, r3, #4
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d008      	beq.n	8003f46 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f34:	4b19      	ldr	r3, [pc, #100]	; (8003f9c <HAL_RCC_ClockConfig+0x1bc>)
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	68db      	ldr	r3, [r3, #12]
 8003f40:	4916      	ldr	r1, [pc, #88]	; (8003f9c <HAL_RCC_ClockConfig+0x1bc>)
 8003f42:	4313      	orrs	r3, r2
 8003f44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f003 0308 	and.w	r3, r3, #8
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d009      	beq.n	8003f66 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f52:	4b12      	ldr	r3, [pc, #72]	; (8003f9c <HAL_RCC_ClockConfig+0x1bc>)
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	691b      	ldr	r3, [r3, #16]
 8003f5e:	00db      	lsls	r3, r3, #3
 8003f60:	490e      	ldr	r1, [pc, #56]	; (8003f9c <HAL_RCC_ClockConfig+0x1bc>)
 8003f62:	4313      	orrs	r3, r2
 8003f64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003f66:	f000 f821 	bl	8003fac <HAL_RCC_GetSysClockFreq>
 8003f6a:	4601      	mov	r1, r0
 8003f6c:	4b0b      	ldr	r3, [pc, #44]	; (8003f9c <HAL_RCC_ClockConfig+0x1bc>)
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	091b      	lsrs	r3, r3, #4
 8003f72:	f003 030f 	and.w	r3, r3, #15
 8003f76:	4a0a      	ldr	r2, [pc, #40]	; (8003fa0 <HAL_RCC_ClockConfig+0x1c0>)
 8003f78:	5cd3      	ldrb	r3, [r2, r3]
 8003f7a:	fa21 f303 	lsr.w	r3, r1, r3
 8003f7e:	4a09      	ldr	r2, [pc, #36]	; (8003fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8003f80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003f82:	4b09      	ldr	r3, [pc, #36]	; (8003fa8 <HAL_RCC_ClockConfig+0x1c8>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4618      	mov	r0, r3
 8003f88:	f008 fa4e 	bl	800c428 <HAL_InitTick>

  return HAL_OK;
 8003f8c:	2300      	movs	r3, #0
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	3710      	adds	r7, #16
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}
 8003f96:	bf00      	nop
 8003f98:	40023c00 	.word	0x40023c00
 8003f9c:	40023800 	.word	0x40023800
 8003fa0:	0800ceec 	.word	0x0800ceec
 8003fa4:	20000038 	.word	0x20000038
 8003fa8:	20000000 	.word	0x20000000

08003fac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fae:	b085      	sub	sp, #20
 8003fb0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	607b      	str	r3, [r7, #4]
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	60fb      	str	r3, [r7, #12]
 8003fba:	2300      	movs	r3, #0
 8003fbc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003fc2:	4b63      	ldr	r3, [pc, #396]	; (8004150 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003fc4:	689b      	ldr	r3, [r3, #8]
 8003fc6:	f003 030c 	and.w	r3, r3, #12
 8003fca:	2b04      	cmp	r3, #4
 8003fcc:	d007      	beq.n	8003fde <HAL_RCC_GetSysClockFreq+0x32>
 8003fce:	2b08      	cmp	r3, #8
 8003fd0:	d008      	beq.n	8003fe4 <HAL_RCC_GetSysClockFreq+0x38>
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	f040 80b4 	bne.w	8004140 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003fd8:	4b5e      	ldr	r3, [pc, #376]	; (8004154 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003fda:	60bb      	str	r3, [r7, #8]
       break;
 8003fdc:	e0b3      	b.n	8004146 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003fde:	4b5e      	ldr	r3, [pc, #376]	; (8004158 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003fe0:	60bb      	str	r3, [r7, #8]
      break;
 8003fe2:	e0b0      	b.n	8004146 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003fe4:	4b5a      	ldr	r3, [pc, #360]	; (8004150 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003fec:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003fee:	4b58      	ldr	r3, [pc, #352]	; (8004150 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d04a      	beq.n	8004090 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ffa:	4b55      	ldr	r3, [pc, #340]	; (8004150 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	099b      	lsrs	r3, r3, #6
 8004000:	f04f 0400 	mov.w	r4, #0
 8004004:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004008:	f04f 0200 	mov.w	r2, #0
 800400c:	ea03 0501 	and.w	r5, r3, r1
 8004010:	ea04 0602 	and.w	r6, r4, r2
 8004014:	4629      	mov	r1, r5
 8004016:	4632      	mov	r2, r6
 8004018:	f04f 0300 	mov.w	r3, #0
 800401c:	f04f 0400 	mov.w	r4, #0
 8004020:	0154      	lsls	r4, r2, #5
 8004022:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004026:	014b      	lsls	r3, r1, #5
 8004028:	4619      	mov	r1, r3
 800402a:	4622      	mov	r2, r4
 800402c:	1b49      	subs	r1, r1, r5
 800402e:	eb62 0206 	sbc.w	r2, r2, r6
 8004032:	f04f 0300 	mov.w	r3, #0
 8004036:	f04f 0400 	mov.w	r4, #0
 800403a:	0194      	lsls	r4, r2, #6
 800403c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004040:	018b      	lsls	r3, r1, #6
 8004042:	1a5b      	subs	r3, r3, r1
 8004044:	eb64 0402 	sbc.w	r4, r4, r2
 8004048:	f04f 0100 	mov.w	r1, #0
 800404c:	f04f 0200 	mov.w	r2, #0
 8004050:	00e2      	lsls	r2, r4, #3
 8004052:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004056:	00d9      	lsls	r1, r3, #3
 8004058:	460b      	mov	r3, r1
 800405a:	4614      	mov	r4, r2
 800405c:	195b      	adds	r3, r3, r5
 800405e:	eb44 0406 	adc.w	r4, r4, r6
 8004062:	f04f 0100 	mov.w	r1, #0
 8004066:	f04f 0200 	mov.w	r2, #0
 800406a:	0262      	lsls	r2, r4, #9
 800406c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004070:	0259      	lsls	r1, r3, #9
 8004072:	460b      	mov	r3, r1
 8004074:	4614      	mov	r4, r2
 8004076:	4618      	mov	r0, r3
 8004078:	4621      	mov	r1, r4
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	f04f 0400 	mov.w	r4, #0
 8004080:	461a      	mov	r2, r3
 8004082:	4623      	mov	r3, r4
 8004084:	f7fc f8b4 	bl	80001f0 <__aeabi_uldivmod>
 8004088:	4603      	mov	r3, r0
 800408a:	460c      	mov	r4, r1
 800408c:	60fb      	str	r3, [r7, #12]
 800408e:	e049      	b.n	8004124 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004090:	4b2f      	ldr	r3, [pc, #188]	; (8004150 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	099b      	lsrs	r3, r3, #6
 8004096:	f04f 0400 	mov.w	r4, #0
 800409a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800409e:	f04f 0200 	mov.w	r2, #0
 80040a2:	ea03 0501 	and.w	r5, r3, r1
 80040a6:	ea04 0602 	and.w	r6, r4, r2
 80040aa:	4629      	mov	r1, r5
 80040ac:	4632      	mov	r2, r6
 80040ae:	f04f 0300 	mov.w	r3, #0
 80040b2:	f04f 0400 	mov.w	r4, #0
 80040b6:	0154      	lsls	r4, r2, #5
 80040b8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80040bc:	014b      	lsls	r3, r1, #5
 80040be:	4619      	mov	r1, r3
 80040c0:	4622      	mov	r2, r4
 80040c2:	1b49      	subs	r1, r1, r5
 80040c4:	eb62 0206 	sbc.w	r2, r2, r6
 80040c8:	f04f 0300 	mov.w	r3, #0
 80040cc:	f04f 0400 	mov.w	r4, #0
 80040d0:	0194      	lsls	r4, r2, #6
 80040d2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80040d6:	018b      	lsls	r3, r1, #6
 80040d8:	1a5b      	subs	r3, r3, r1
 80040da:	eb64 0402 	sbc.w	r4, r4, r2
 80040de:	f04f 0100 	mov.w	r1, #0
 80040e2:	f04f 0200 	mov.w	r2, #0
 80040e6:	00e2      	lsls	r2, r4, #3
 80040e8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80040ec:	00d9      	lsls	r1, r3, #3
 80040ee:	460b      	mov	r3, r1
 80040f0:	4614      	mov	r4, r2
 80040f2:	195b      	adds	r3, r3, r5
 80040f4:	eb44 0406 	adc.w	r4, r4, r6
 80040f8:	f04f 0100 	mov.w	r1, #0
 80040fc:	f04f 0200 	mov.w	r2, #0
 8004100:	02a2      	lsls	r2, r4, #10
 8004102:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004106:	0299      	lsls	r1, r3, #10
 8004108:	460b      	mov	r3, r1
 800410a:	4614      	mov	r4, r2
 800410c:	4618      	mov	r0, r3
 800410e:	4621      	mov	r1, r4
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	f04f 0400 	mov.w	r4, #0
 8004116:	461a      	mov	r2, r3
 8004118:	4623      	mov	r3, r4
 800411a:	f7fc f869 	bl	80001f0 <__aeabi_uldivmod>
 800411e:	4603      	mov	r3, r0
 8004120:	460c      	mov	r4, r1
 8004122:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004124:	4b0a      	ldr	r3, [pc, #40]	; (8004150 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	0c1b      	lsrs	r3, r3, #16
 800412a:	f003 0303 	and.w	r3, r3, #3
 800412e:	3301      	adds	r3, #1
 8004130:	005b      	lsls	r3, r3, #1
 8004132:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004134:	68fa      	ldr	r2, [r7, #12]
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	fbb2 f3f3 	udiv	r3, r2, r3
 800413c:	60bb      	str	r3, [r7, #8]
      break;
 800413e:	e002      	b.n	8004146 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004140:	4b04      	ldr	r3, [pc, #16]	; (8004154 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004142:	60bb      	str	r3, [r7, #8]
      break;
 8004144:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004146:	68bb      	ldr	r3, [r7, #8]
}
 8004148:	4618      	mov	r0, r3
 800414a:	3714      	adds	r7, #20
 800414c:	46bd      	mov	sp, r7
 800414e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004150:	40023800 	.word	0x40023800
 8004154:	00f42400 	.word	0x00f42400
 8004158:	007a1200 	.word	0x007a1200

0800415c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800415c:	b480      	push	{r7}
 800415e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004160:	4b03      	ldr	r3, [pc, #12]	; (8004170 <HAL_RCC_GetHCLKFreq+0x14>)
 8004162:	681b      	ldr	r3, [r3, #0]
}
 8004164:	4618      	mov	r0, r3
 8004166:	46bd      	mov	sp, r7
 8004168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416c:	4770      	bx	lr
 800416e:	bf00      	nop
 8004170:	20000038 	.word	0x20000038

08004174 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004178:	f7ff fff0 	bl	800415c <HAL_RCC_GetHCLKFreq>
 800417c:	4601      	mov	r1, r0
 800417e:	4b05      	ldr	r3, [pc, #20]	; (8004194 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	0a9b      	lsrs	r3, r3, #10
 8004184:	f003 0307 	and.w	r3, r3, #7
 8004188:	4a03      	ldr	r2, [pc, #12]	; (8004198 <HAL_RCC_GetPCLK1Freq+0x24>)
 800418a:	5cd3      	ldrb	r3, [r2, r3]
 800418c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004190:	4618      	mov	r0, r3
 8004192:	bd80      	pop	{r7, pc}
 8004194:	40023800 	.word	0x40023800
 8004198:	0800cefc 	.word	0x0800cefc

0800419c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80041a0:	f7ff ffdc 	bl	800415c <HAL_RCC_GetHCLKFreq>
 80041a4:	4601      	mov	r1, r0
 80041a6:	4b05      	ldr	r3, [pc, #20]	; (80041bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	0b5b      	lsrs	r3, r3, #13
 80041ac:	f003 0307 	and.w	r3, r3, #7
 80041b0:	4a03      	ldr	r2, [pc, #12]	; (80041c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80041b2:	5cd3      	ldrb	r3, [r2, r3]
 80041b4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	bd80      	pop	{r7, pc}
 80041bc:	40023800 	.word	0x40023800
 80041c0:	0800cefc 	.word	0x0800cefc

080041c4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b083      	sub	sp, #12
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
 80041cc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	220f      	movs	r2, #15
 80041d2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80041d4:	4b12      	ldr	r3, [pc, #72]	; (8004220 <HAL_RCC_GetClockConfig+0x5c>)
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	f003 0203 	and.w	r2, r3, #3
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80041e0:	4b0f      	ldr	r3, [pc, #60]	; (8004220 <HAL_RCC_GetClockConfig+0x5c>)
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80041ec:	4b0c      	ldr	r3, [pc, #48]	; (8004220 <HAL_RCC_GetClockConfig+0x5c>)
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80041f8:	4b09      	ldr	r3, [pc, #36]	; (8004220 <HAL_RCC_GetClockConfig+0x5c>)
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	08db      	lsrs	r3, r3, #3
 80041fe:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004206:	4b07      	ldr	r3, [pc, #28]	; (8004224 <HAL_RCC_GetClockConfig+0x60>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f003 020f 	and.w	r2, r3, #15
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	601a      	str	r2, [r3, #0]
}
 8004212:	bf00      	nop
 8004214:	370c      	adds	r7, #12
 8004216:	46bd      	mov	sp, r7
 8004218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421c:	4770      	bx	lr
 800421e:	bf00      	nop
 8004220:	40023800 	.word	0x40023800
 8004224:	40023c00 	.word	0x40023c00

08004228 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b086      	sub	sp, #24
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004230:	2300      	movs	r3, #0
 8004232:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004234:	2300      	movs	r3, #0
 8004236:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f003 0301 	and.w	r3, r3, #1
 8004240:	2b00      	cmp	r3, #0
 8004242:	d10b      	bne.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800424c:	2b00      	cmp	r3, #0
 800424e:	d105      	bne.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004258:	2b00      	cmp	r3, #0
 800425a:	d075      	beq.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800425c:	4bad      	ldr	r3, [pc, #692]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800425e:	2200      	movs	r2, #0
 8004260:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004262:	f7fc f97b 	bl	800055c <HAL_GetTick>
 8004266:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004268:	e008      	b.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800426a:	f7fc f977 	bl	800055c <HAL_GetTick>
 800426e:	4602      	mov	r2, r0
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	1ad3      	subs	r3, r2, r3
 8004274:	2b02      	cmp	r3, #2
 8004276:	d901      	bls.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004278:	2303      	movs	r3, #3
 800427a:	e18b      	b.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800427c:	4ba6      	ldr	r3, [pc, #664]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004284:	2b00      	cmp	r3, #0
 8004286:	d1f0      	bne.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 0301 	and.w	r3, r3, #1
 8004290:	2b00      	cmp	r3, #0
 8004292:	d009      	beq.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	019a      	lsls	r2, r3, #6
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	071b      	lsls	r3, r3, #28
 80042a0:	499d      	ldr	r1, [pc, #628]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80042a2:	4313      	orrs	r3, r2
 80042a4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f003 0302 	and.w	r3, r3, #2
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d01f      	beq.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80042b4:	4b98      	ldr	r3, [pc, #608]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80042b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042ba:	0f1b      	lsrs	r3, r3, #28
 80042bc:	f003 0307 	and.w	r3, r3, #7
 80042c0:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	019a      	lsls	r2, r3, #6
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	68db      	ldr	r3, [r3, #12]
 80042cc:	061b      	lsls	r3, r3, #24
 80042ce:	431a      	orrs	r2, r3
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	071b      	lsls	r3, r3, #28
 80042d4:	4990      	ldr	r1, [pc, #576]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80042d6:	4313      	orrs	r3, r2
 80042d8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80042dc:	4b8e      	ldr	r3, [pc, #568]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80042de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042e2:	f023 021f 	bic.w	r2, r3, #31
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	69db      	ldr	r3, [r3, #28]
 80042ea:	3b01      	subs	r3, #1
 80042ec:	498a      	ldr	r1, [pc, #552]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80042ee:	4313      	orrs	r3, r2
 80042f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d00d      	beq.n	800431c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	019a      	lsls	r2, r3, #6
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	68db      	ldr	r3, [r3, #12]
 800430a:	061b      	lsls	r3, r3, #24
 800430c:	431a      	orrs	r2, r3
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	071b      	lsls	r3, r3, #28
 8004314:	4980      	ldr	r1, [pc, #512]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004316:	4313      	orrs	r3, r2
 8004318:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800431c:	4b7d      	ldr	r3, [pc, #500]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800431e:	2201      	movs	r2, #1
 8004320:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004322:	f7fc f91b 	bl	800055c <HAL_GetTick>
 8004326:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004328:	e008      	b.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800432a:	f7fc f917 	bl	800055c <HAL_GetTick>
 800432e:	4602      	mov	r2, r0
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	1ad3      	subs	r3, r2, r3
 8004334:	2b02      	cmp	r3, #2
 8004336:	d901      	bls.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004338:	2303      	movs	r3, #3
 800433a:	e12b      	b.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800433c:	4b76      	ldr	r3, [pc, #472]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004344:	2b00      	cmp	r3, #0
 8004346:	d0f0      	beq.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f003 0304 	and.w	r3, r3, #4
 8004350:	2b00      	cmp	r3, #0
 8004352:	d105      	bne.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800435c:	2b00      	cmp	r3, #0
 800435e:	d079      	beq.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004360:	4b6e      	ldr	r3, [pc, #440]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004362:	2200      	movs	r2, #0
 8004364:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004366:	f7fc f8f9 	bl	800055c <HAL_GetTick>
 800436a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800436c:	e008      	b.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800436e:	f7fc f8f5 	bl	800055c <HAL_GetTick>
 8004372:	4602      	mov	r2, r0
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	1ad3      	subs	r3, r2, r3
 8004378:	2b02      	cmp	r3, #2
 800437a:	d901      	bls.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800437c:	2303      	movs	r3, #3
 800437e:	e109      	b.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004380:	4b65      	ldr	r3, [pc, #404]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004388:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800438c:	d0ef      	beq.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f003 0304 	and.w	r3, r3, #4
 8004396:	2b00      	cmp	r3, #0
 8004398:	d020      	beq.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800439a:	4b5f      	ldr	r3, [pc, #380]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800439c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043a0:	0f1b      	lsrs	r3, r3, #28
 80043a2:	f003 0307 	and.w	r3, r3, #7
 80043a6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	691b      	ldr	r3, [r3, #16]
 80043ac:	019a      	lsls	r2, r3, #6
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	695b      	ldr	r3, [r3, #20]
 80043b2:	061b      	lsls	r3, r3, #24
 80043b4:	431a      	orrs	r2, r3
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	071b      	lsls	r3, r3, #28
 80043ba:	4957      	ldr	r1, [pc, #348]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80043bc:	4313      	orrs	r3, r2
 80043be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80043c2:	4b55      	ldr	r3, [pc, #340]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80043c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043c8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6a1b      	ldr	r3, [r3, #32]
 80043d0:	3b01      	subs	r3, #1
 80043d2:	021b      	lsls	r3, r3, #8
 80043d4:	4950      	ldr	r1, [pc, #320]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80043d6:	4313      	orrs	r3, r2
 80043d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f003 0308 	and.w	r3, r3, #8
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d01e      	beq.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80043e8:	4b4b      	ldr	r3, [pc, #300]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80043ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043ee:	0e1b      	lsrs	r3, r3, #24
 80043f0:	f003 030f 	and.w	r3, r3, #15
 80043f4:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	691b      	ldr	r3, [r3, #16]
 80043fa:	019a      	lsls	r2, r3, #6
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	061b      	lsls	r3, r3, #24
 8004400:	431a      	orrs	r2, r3
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	699b      	ldr	r3, [r3, #24]
 8004406:	071b      	lsls	r3, r3, #28
 8004408:	4943      	ldr	r1, [pc, #268]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800440a:	4313      	orrs	r3, r2
 800440c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004410:	4b41      	ldr	r3, [pc, #260]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004412:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004416:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800441e:	493e      	ldr	r1, [pc, #248]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004420:	4313      	orrs	r3, r2
 8004422:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004426:	4b3d      	ldr	r3, [pc, #244]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004428:	2201      	movs	r2, #1
 800442a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800442c:	f7fc f896 	bl	800055c <HAL_GetTick>
 8004430:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004432:	e008      	b.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004434:	f7fc f892 	bl	800055c <HAL_GetTick>
 8004438:	4602      	mov	r2, r0
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	1ad3      	subs	r3, r2, r3
 800443e:	2b02      	cmp	r3, #2
 8004440:	d901      	bls.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004442:	2303      	movs	r3, #3
 8004444:	e0a6      	b.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004446:	4b34      	ldr	r3, [pc, #208]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800444e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004452:	d1ef      	bne.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f003 0320 	and.w	r3, r3, #32
 800445c:	2b00      	cmp	r3, #0
 800445e:	f000 808d 	beq.w	800457c <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004462:	2300      	movs	r3, #0
 8004464:	60fb      	str	r3, [r7, #12]
 8004466:	4b2c      	ldr	r3, [pc, #176]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800446a:	4a2b      	ldr	r2, [pc, #172]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800446c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004470:	6413      	str	r3, [r2, #64]	; 0x40
 8004472:	4b29      	ldr	r3, [pc, #164]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004476:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800447a:	60fb      	str	r3, [r7, #12]
 800447c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800447e:	4b28      	ldr	r3, [pc, #160]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a27      	ldr	r2, [pc, #156]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8004484:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004488:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800448a:	f7fc f867 	bl	800055c <HAL_GetTick>
 800448e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004490:	e008      	b.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004492:	f7fc f863 	bl	800055c <HAL_GetTick>
 8004496:	4602      	mov	r2, r0
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	1ad3      	subs	r3, r2, r3
 800449c:	2b02      	cmp	r3, #2
 800449e:	d901      	bls.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 80044a0:	2303      	movs	r3, #3
 80044a2:	e077      	b.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80044a4:	4b1e      	ldr	r3, [pc, #120]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d0f0      	beq.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80044b0:	4b19      	ldr	r3, [pc, #100]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80044b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044b8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d039      	beq.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044c8:	693a      	ldr	r2, [r7, #16]
 80044ca:	429a      	cmp	r2, r3
 80044cc:	d032      	beq.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80044ce:	4b12      	ldr	r3, [pc, #72]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80044d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044d6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80044d8:	4b12      	ldr	r3, [pc, #72]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80044da:	2201      	movs	r2, #1
 80044dc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80044de:	4b11      	ldr	r3, [pc, #68]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80044e0:	2200      	movs	r2, #0
 80044e2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80044e4:	4a0c      	ldr	r2, [pc, #48]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80044ea:	4b0b      	ldr	r3, [pc, #44]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80044ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ee:	f003 0301 	and.w	r3, r3, #1
 80044f2:	2b01      	cmp	r3, #1
 80044f4:	d11e      	bne.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80044f6:	f7fc f831 	bl	800055c <HAL_GetTick>
 80044fa:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044fc:	e014      	b.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044fe:	f7fc f82d 	bl	800055c <HAL_GetTick>
 8004502:	4602      	mov	r2, r0
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	1ad3      	subs	r3, r2, r3
 8004508:	f241 3288 	movw	r2, #5000	; 0x1388
 800450c:	4293      	cmp	r3, r2
 800450e:	d90b      	bls.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 8004510:	2303      	movs	r3, #3
 8004512:	e03f      	b.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 8004514:	42470068 	.word	0x42470068
 8004518:	40023800 	.word	0x40023800
 800451c:	42470070 	.word	0x42470070
 8004520:	40007000 	.word	0x40007000
 8004524:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004528:	4b1c      	ldr	r3, [pc, #112]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800452a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800452c:	f003 0302 	and.w	r3, r3, #2
 8004530:	2b00      	cmp	r3, #0
 8004532:	d0e4      	beq.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004538:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800453c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004540:	d10d      	bne.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x336>
 8004542:	4b16      	ldr	r3, [pc, #88]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800454e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004552:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004556:	4911      	ldr	r1, [pc, #68]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004558:	4313      	orrs	r3, r2
 800455a:	608b      	str	r3, [r1, #8]
 800455c:	e005      	b.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x342>
 800455e:	4b0f      	ldr	r3, [pc, #60]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	4a0e      	ldr	r2, [pc, #56]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004564:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004568:	6093      	str	r3, [r2, #8]
 800456a:	4b0c      	ldr	r3, [pc, #48]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800456c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004572:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004576:	4909      	ldr	r1, [pc, #36]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004578:	4313      	orrs	r3, r2
 800457a:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f003 0310 	and.w	r3, r3, #16
 8004584:	2b00      	cmp	r3, #0
 8004586:	d004      	beq.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800458e:	4b04      	ldr	r3, [pc, #16]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8004590:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8004592:	2300      	movs	r3, #0
}
 8004594:	4618      	mov	r0, r3
 8004596:	3718      	adds	r7, #24
 8004598:	46bd      	mov	sp, r7
 800459a:	bd80      	pop	{r7, pc}
 800459c:	40023800 	.word	0x40023800
 80045a0:	424711e0 	.word	0x424711e0

080045a4 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b082      	sub	sp, #8
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
 80045ac:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d101      	bne.n	80045b8 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	e025      	b.n	8004604 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80045be:	b2db      	uxtb	r3, r3
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d106      	bne.n	80045d2 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2200      	movs	r2, #0
 80045c8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80045cc:	6878      	ldr	r0, [r7, #4]
 80045ce:	f007 ff21 	bl	800c414 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2202      	movs	r2, #2
 80045d6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681a      	ldr	r2, [r3, #0]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	3304      	adds	r3, #4
 80045e2:	4619      	mov	r1, r3
 80045e4:	4610      	mov	r0, r2
 80045e6:	f001 f9c7 	bl	8005978 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6818      	ldr	r0, [r3, #0]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	461a      	mov	r2, r3
 80045f4:	6839      	ldr	r1, [r7, #0]
 80045f6:	f001 fa32 	bl	8005a5e <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2201      	movs	r2, #1
 80045fe:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8004602:	2300      	movs	r3, #0
}
 8004604:	4618      	mov	r0, r3
 8004606:	3708      	adds	r7, #8
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}

0800460c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b082      	sub	sp, #8
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d101      	bne.n	800461e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	e056      	b.n	80046cc <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2200      	movs	r2, #0
 8004622:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800462a:	b2db      	uxtb	r3, r3
 800462c:	2b00      	cmp	r3, #0
 800462e:	d106      	bne.n	800463e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2200      	movs	r2, #0
 8004634:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004638:	6878      	ldr	r0, [r7, #4]
 800463a:	f007 fda7 	bl	800c18c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2202      	movs	r2, #2
 8004642:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004654:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	685a      	ldr	r2, [r3, #4]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	431a      	orrs	r2, r3
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	68db      	ldr	r3, [r3, #12]
 8004664:	431a      	orrs	r2, r3
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	691b      	ldr	r3, [r3, #16]
 800466a:	431a      	orrs	r2, r3
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	695b      	ldr	r3, [r3, #20]
 8004670:	431a      	orrs	r2, r3
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	699b      	ldr	r3, [r3, #24]
 8004676:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800467a:	431a      	orrs	r2, r3
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	69db      	ldr	r3, [r3, #28]
 8004680:	431a      	orrs	r2, r3
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6a1b      	ldr	r3, [r3, #32]
 8004686:	ea42 0103 	orr.w	r1, r2, r3
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	430a      	orrs	r2, r1
 8004694:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	699b      	ldr	r3, [r3, #24]
 800469a:	0c1b      	lsrs	r3, r3, #16
 800469c:	f003 0104 	and.w	r1, r3, #4
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	430a      	orrs	r2, r1
 80046aa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	69da      	ldr	r2, [r3, #28]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80046ba:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2200      	movs	r2, #0
 80046c0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2201      	movs	r2, #1
 80046c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80046ca:	2300      	movs	r3, #0
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	3708      	adds	r7, #8
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}

080046d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b082      	sub	sp, #8
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d101      	bne.n	80046e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	e01d      	b.n	8004722 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d106      	bne.n	8004700 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2200      	movs	r2, #0
 80046f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f007 fd8e 	bl	800c21c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2202      	movs	r2, #2
 8004704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681a      	ldr	r2, [r3, #0]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	3304      	adds	r3, #4
 8004710:	4619      	mov	r1, r3
 8004712:	4610      	mov	r0, r2
 8004714:	f000 fa14 	bl	8004b40 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2201      	movs	r2, #1
 800471c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004720:	2300      	movs	r3, #0
}
 8004722:	4618      	mov	r0, r3
 8004724:	3708      	adds	r7, #8
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}

0800472a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800472a:	b480      	push	{r7}
 800472c:	b085      	sub	sp, #20
 800472e:	af00      	add	r7, sp, #0
 8004730:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	68da      	ldr	r2, [r3, #12]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f042 0201 	orr.w	r2, r2, #1
 8004740:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	f003 0307 	and.w	r3, r3, #7
 800474c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2b06      	cmp	r3, #6
 8004752:	d007      	beq.n	8004764 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	681a      	ldr	r2, [r3, #0]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f042 0201 	orr.w	r2, r2, #1
 8004762:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004764:	2300      	movs	r3, #0
}
 8004766:	4618      	mov	r0, r3
 8004768:	3714      	adds	r7, #20
 800476a:	46bd      	mov	sp, r7
 800476c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004770:	4770      	bx	lr

08004772 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004772:	b580      	push	{r7, lr}
 8004774:	b082      	sub	sp, #8
 8004776:	af00      	add	r7, sp, #0
 8004778:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	691b      	ldr	r3, [r3, #16]
 8004780:	f003 0302 	and.w	r3, r3, #2
 8004784:	2b02      	cmp	r3, #2
 8004786:	d122      	bne.n	80047ce <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	68db      	ldr	r3, [r3, #12]
 800478e:	f003 0302 	and.w	r3, r3, #2
 8004792:	2b02      	cmp	r3, #2
 8004794:	d11b      	bne.n	80047ce <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f06f 0202 	mvn.w	r2, #2
 800479e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2201      	movs	r2, #1
 80047a4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	699b      	ldr	r3, [r3, #24]
 80047ac:	f003 0303 	and.w	r3, r3, #3
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d003      	beq.n	80047bc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80047b4:	6878      	ldr	r0, [r7, #4]
 80047b6:	f000 f9a5 	bl	8004b04 <HAL_TIM_IC_CaptureCallback>
 80047ba:	e005      	b.n	80047c8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80047bc:	6878      	ldr	r0, [r7, #4]
 80047be:	f000 f997 	bl	8004af0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f000 f9a8 	bl	8004b18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2200      	movs	r2, #0
 80047cc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	691b      	ldr	r3, [r3, #16]
 80047d4:	f003 0304 	and.w	r3, r3, #4
 80047d8:	2b04      	cmp	r3, #4
 80047da:	d122      	bne.n	8004822 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	68db      	ldr	r3, [r3, #12]
 80047e2:	f003 0304 	and.w	r3, r3, #4
 80047e6:	2b04      	cmp	r3, #4
 80047e8:	d11b      	bne.n	8004822 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f06f 0204 	mvn.w	r2, #4
 80047f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2202      	movs	r2, #2
 80047f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	699b      	ldr	r3, [r3, #24]
 8004800:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004804:	2b00      	cmp	r3, #0
 8004806:	d003      	beq.n	8004810 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004808:	6878      	ldr	r0, [r7, #4]
 800480a:	f000 f97b 	bl	8004b04 <HAL_TIM_IC_CaptureCallback>
 800480e:	e005      	b.n	800481c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004810:	6878      	ldr	r0, [r7, #4]
 8004812:	f000 f96d 	bl	8004af0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f000 f97e 	bl	8004b18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2200      	movs	r2, #0
 8004820:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	691b      	ldr	r3, [r3, #16]
 8004828:	f003 0308 	and.w	r3, r3, #8
 800482c:	2b08      	cmp	r3, #8
 800482e:	d122      	bne.n	8004876 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	68db      	ldr	r3, [r3, #12]
 8004836:	f003 0308 	and.w	r3, r3, #8
 800483a:	2b08      	cmp	r3, #8
 800483c:	d11b      	bne.n	8004876 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f06f 0208 	mvn.w	r2, #8
 8004846:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2204      	movs	r2, #4
 800484c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	69db      	ldr	r3, [r3, #28]
 8004854:	f003 0303 	and.w	r3, r3, #3
 8004858:	2b00      	cmp	r3, #0
 800485a:	d003      	beq.n	8004864 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800485c:	6878      	ldr	r0, [r7, #4]
 800485e:	f000 f951 	bl	8004b04 <HAL_TIM_IC_CaptureCallback>
 8004862:	e005      	b.n	8004870 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004864:	6878      	ldr	r0, [r7, #4]
 8004866:	f000 f943 	bl	8004af0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	f000 f954 	bl	8004b18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2200      	movs	r2, #0
 8004874:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	691b      	ldr	r3, [r3, #16]
 800487c:	f003 0310 	and.w	r3, r3, #16
 8004880:	2b10      	cmp	r3, #16
 8004882:	d122      	bne.n	80048ca <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	68db      	ldr	r3, [r3, #12]
 800488a:	f003 0310 	and.w	r3, r3, #16
 800488e:	2b10      	cmp	r3, #16
 8004890:	d11b      	bne.n	80048ca <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f06f 0210 	mvn.w	r2, #16
 800489a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2208      	movs	r2, #8
 80048a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	69db      	ldr	r3, [r3, #28]
 80048a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d003      	beq.n	80048b8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048b0:	6878      	ldr	r0, [r7, #4]
 80048b2:	f000 f927 	bl	8004b04 <HAL_TIM_IC_CaptureCallback>
 80048b6:	e005      	b.n	80048c4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048b8:	6878      	ldr	r0, [r7, #4]
 80048ba:	f000 f919 	bl	8004af0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f000 f92a 	bl	8004b18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2200      	movs	r2, #0
 80048c8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	691b      	ldr	r3, [r3, #16]
 80048d0:	f003 0301 	and.w	r3, r3, #1
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d10e      	bne.n	80048f6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	68db      	ldr	r3, [r3, #12]
 80048de:	f003 0301 	and.w	r3, r3, #1
 80048e2:	2b01      	cmp	r3, #1
 80048e4:	d107      	bne.n	80048f6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f06f 0201 	mvn.w	r2, #1
 80048ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	f007 fa3b 	bl	800bd6c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	691b      	ldr	r3, [r3, #16]
 80048fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004900:	2b80      	cmp	r3, #128	; 0x80
 8004902:	d10e      	bne.n	8004922 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	68db      	ldr	r3, [r3, #12]
 800490a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800490e:	2b80      	cmp	r3, #128	; 0x80
 8004910:	d107      	bne.n	8004922 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800491a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800491c:	6878      	ldr	r0, [r7, #4]
 800491e:	f000 facf 	bl	8004ec0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	691b      	ldr	r3, [r3, #16]
 8004928:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800492c:	2b40      	cmp	r3, #64	; 0x40
 800492e:	d10e      	bne.n	800494e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	68db      	ldr	r3, [r3, #12]
 8004936:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800493a:	2b40      	cmp	r3, #64	; 0x40
 800493c:	d107      	bne.n	800494e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004946:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	f000 f8ef 	bl	8004b2c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	691b      	ldr	r3, [r3, #16]
 8004954:	f003 0320 	and.w	r3, r3, #32
 8004958:	2b20      	cmp	r3, #32
 800495a:	d10e      	bne.n	800497a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	68db      	ldr	r3, [r3, #12]
 8004962:	f003 0320 	and.w	r3, r3, #32
 8004966:	2b20      	cmp	r3, #32
 8004968:	d107      	bne.n	800497a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f06f 0220 	mvn.w	r2, #32
 8004972:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004974:	6878      	ldr	r0, [r7, #4]
 8004976:	f000 fa99 	bl	8004eac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800497a:	bf00      	nop
 800497c:	3708      	adds	r7, #8
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}

08004982 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004982:	b580      	push	{r7, lr}
 8004984:	b084      	sub	sp, #16
 8004986:	af00      	add	r7, sp, #0
 8004988:	6078      	str	r0, [r7, #4]
 800498a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004992:	2b01      	cmp	r3, #1
 8004994:	d101      	bne.n	800499a <HAL_TIM_ConfigClockSource+0x18>
 8004996:	2302      	movs	r3, #2
 8004998:	e0a6      	b.n	8004ae8 <HAL_TIM_ConfigClockSource+0x166>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2201      	movs	r2, #1
 800499e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2202      	movs	r2, #2
 80049a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80049b8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80049c0:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	68fa      	ldr	r2, [r7, #12]
 80049c8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	2b40      	cmp	r3, #64	; 0x40
 80049d0:	d067      	beq.n	8004aa2 <HAL_TIM_ConfigClockSource+0x120>
 80049d2:	2b40      	cmp	r3, #64	; 0x40
 80049d4:	d80b      	bhi.n	80049ee <HAL_TIM_ConfigClockSource+0x6c>
 80049d6:	2b10      	cmp	r3, #16
 80049d8:	d073      	beq.n	8004ac2 <HAL_TIM_ConfigClockSource+0x140>
 80049da:	2b10      	cmp	r3, #16
 80049dc:	d802      	bhi.n	80049e4 <HAL_TIM_ConfigClockSource+0x62>
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d06f      	beq.n	8004ac2 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80049e2:	e078      	b.n	8004ad6 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80049e4:	2b20      	cmp	r3, #32
 80049e6:	d06c      	beq.n	8004ac2 <HAL_TIM_ConfigClockSource+0x140>
 80049e8:	2b30      	cmp	r3, #48	; 0x30
 80049ea:	d06a      	beq.n	8004ac2 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80049ec:	e073      	b.n	8004ad6 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80049ee:	2b70      	cmp	r3, #112	; 0x70
 80049f0:	d00d      	beq.n	8004a0e <HAL_TIM_ConfigClockSource+0x8c>
 80049f2:	2b70      	cmp	r3, #112	; 0x70
 80049f4:	d804      	bhi.n	8004a00 <HAL_TIM_ConfigClockSource+0x7e>
 80049f6:	2b50      	cmp	r3, #80	; 0x50
 80049f8:	d033      	beq.n	8004a62 <HAL_TIM_ConfigClockSource+0xe0>
 80049fa:	2b60      	cmp	r3, #96	; 0x60
 80049fc:	d041      	beq.n	8004a82 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80049fe:	e06a      	b.n	8004ad6 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004a00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a04:	d066      	beq.n	8004ad4 <HAL_TIM_ConfigClockSource+0x152>
 8004a06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a0a:	d017      	beq.n	8004a3c <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004a0c:	e063      	b.n	8004ad6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6818      	ldr	r0, [r3, #0]
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	6899      	ldr	r1, [r3, #8]
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	685a      	ldr	r2, [r3, #4]
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	68db      	ldr	r3, [r3, #12]
 8004a1e:	f000 f9a9 	bl	8004d74 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004a30:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	68fa      	ldr	r2, [r7, #12]
 8004a38:	609a      	str	r2, [r3, #8]
      break;
 8004a3a:	e04c      	b.n	8004ad6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6818      	ldr	r0, [r3, #0]
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	6899      	ldr	r1, [r3, #8]
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	685a      	ldr	r2, [r3, #4]
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	68db      	ldr	r3, [r3, #12]
 8004a4c:	f000 f992 	bl	8004d74 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	689a      	ldr	r2, [r3, #8]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a5e:	609a      	str	r2, [r3, #8]
      break;
 8004a60:	e039      	b.n	8004ad6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6818      	ldr	r0, [r3, #0]
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	6859      	ldr	r1, [r3, #4]
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	68db      	ldr	r3, [r3, #12]
 8004a6e:	461a      	mov	r2, r3
 8004a70:	f000 f906 	bl	8004c80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	2150      	movs	r1, #80	; 0x50
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f000 f95f 	bl	8004d3e <TIM_ITRx_SetConfig>
      break;
 8004a80:	e029      	b.n	8004ad6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6818      	ldr	r0, [r3, #0]
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	6859      	ldr	r1, [r3, #4]
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	68db      	ldr	r3, [r3, #12]
 8004a8e:	461a      	mov	r2, r3
 8004a90:	f000 f925 	bl	8004cde <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	2160      	movs	r1, #96	; 0x60
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f000 f94f 	bl	8004d3e <TIM_ITRx_SetConfig>
      break;
 8004aa0:	e019      	b.n	8004ad6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6818      	ldr	r0, [r3, #0]
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	6859      	ldr	r1, [r3, #4]
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	68db      	ldr	r3, [r3, #12]
 8004aae:	461a      	mov	r2, r3
 8004ab0:	f000 f8e6 	bl	8004c80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	2140      	movs	r1, #64	; 0x40
 8004aba:	4618      	mov	r0, r3
 8004abc:	f000 f93f 	bl	8004d3e <TIM_ITRx_SetConfig>
      break;
 8004ac0:	e009      	b.n	8004ad6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681a      	ldr	r2, [r3, #0]
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4619      	mov	r1, r3
 8004acc:	4610      	mov	r0, r2
 8004ace:	f000 f936 	bl	8004d3e <TIM_ITRx_SetConfig>
      break;
 8004ad2:	e000      	b.n	8004ad6 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004ad4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2201      	movs	r2, #1
 8004ada:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ae6:	2300      	movs	r3, #0
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	3710      	adds	r7, #16
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}

08004af0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b083      	sub	sp, #12
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004af8:	bf00      	nop
 8004afa:	370c      	adds	r7, #12
 8004afc:	46bd      	mov	sp, r7
 8004afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b02:	4770      	bx	lr

08004b04 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b083      	sub	sp, #12
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b0c:	bf00      	nop
 8004b0e:	370c      	adds	r7, #12
 8004b10:	46bd      	mov	sp, r7
 8004b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b16:	4770      	bx	lr

08004b18 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b083      	sub	sp, #12
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b20:	bf00      	nop
 8004b22:	370c      	adds	r7, #12
 8004b24:	46bd      	mov	sp, r7
 8004b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2a:	4770      	bx	lr

08004b2c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b083      	sub	sp, #12
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004b34:	bf00      	nop
 8004b36:	370c      	adds	r7, #12
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3e:	4770      	bx	lr

08004b40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b085      	sub	sp, #20
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
 8004b48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	4a40      	ldr	r2, [pc, #256]	; (8004c54 <TIM_Base_SetConfig+0x114>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d013      	beq.n	8004b80 <TIM_Base_SetConfig+0x40>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b5e:	d00f      	beq.n	8004b80 <TIM_Base_SetConfig+0x40>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	4a3d      	ldr	r2, [pc, #244]	; (8004c58 <TIM_Base_SetConfig+0x118>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d00b      	beq.n	8004b80 <TIM_Base_SetConfig+0x40>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	4a3c      	ldr	r2, [pc, #240]	; (8004c5c <TIM_Base_SetConfig+0x11c>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d007      	beq.n	8004b80 <TIM_Base_SetConfig+0x40>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	4a3b      	ldr	r2, [pc, #236]	; (8004c60 <TIM_Base_SetConfig+0x120>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d003      	beq.n	8004b80 <TIM_Base_SetConfig+0x40>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	4a3a      	ldr	r2, [pc, #232]	; (8004c64 <TIM_Base_SetConfig+0x124>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d108      	bne.n	8004b92 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	68fa      	ldr	r2, [r7, #12]
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	4a2f      	ldr	r2, [pc, #188]	; (8004c54 <TIM_Base_SetConfig+0x114>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d02b      	beq.n	8004bf2 <TIM_Base_SetConfig+0xb2>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ba0:	d027      	beq.n	8004bf2 <TIM_Base_SetConfig+0xb2>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	4a2c      	ldr	r2, [pc, #176]	; (8004c58 <TIM_Base_SetConfig+0x118>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d023      	beq.n	8004bf2 <TIM_Base_SetConfig+0xb2>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	4a2b      	ldr	r2, [pc, #172]	; (8004c5c <TIM_Base_SetConfig+0x11c>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d01f      	beq.n	8004bf2 <TIM_Base_SetConfig+0xb2>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	4a2a      	ldr	r2, [pc, #168]	; (8004c60 <TIM_Base_SetConfig+0x120>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d01b      	beq.n	8004bf2 <TIM_Base_SetConfig+0xb2>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	4a29      	ldr	r2, [pc, #164]	; (8004c64 <TIM_Base_SetConfig+0x124>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d017      	beq.n	8004bf2 <TIM_Base_SetConfig+0xb2>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	4a28      	ldr	r2, [pc, #160]	; (8004c68 <TIM_Base_SetConfig+0x128>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d013      	beq.n	8004bf2 <TIM_Base_SetConfig+0xb2>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	4a27      	ldr	r2, [pc, #156]	; (8004c6c <TIM_Base_SetConfig+0x12c>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d00f      	beq.n	8004bf2 <TIM_Base_SetConfig+0xb2>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	4a26      	ldr	r2, [pc, #152]	; (8004c70 <TIM_Base_SetConfig+0x130>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d00b      	beq.n	8004bf2 <TIM_Base_SetConfig+0xb2>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	4a25      	ldr	r2, [pc, #148]	; (8004c74 <TIM_Base_SetConfig+0x134>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d007      	beq.n	8004bf2 <TIM_Base_SetConfig+0xb2>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	4a24      	ldr	r2, [pc, #144]	; (8004c78 <TIM_Base_SetConfig+0x138>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d003      	beq.n	8004bf2 <TIM_Base_SetConfig+0xb2>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	4a23      	ldr	r2, [pc, #140]	; (8004c7c <TIM_Base_SetConfig+0x13c>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d108      	bne.n	8004c04 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bf8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	68db      	ldr	r3, [r3, #12]
 8004bfe:	68fa      	ldr	r2, [r7, #12]
 8004c00:	4313      	orrs	r3, r2
 8004c02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	695b      	ldr	r3, [r3, #20]
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	68fa      	ldr	r2, [r7, #12]
 8004c16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	689a      	ldr	r2, [r3, #8]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	681a      	ldr	r2, [r3, #0]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	4a0a      	ldr	r2, [pc, #40]	; (8004c54 <TIM_Base_SetConfig+0x114>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d003      	beq.n	8004c38 <TIM_Base_SetConfig+0xf8>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	4a0c      	ldr	r2, [pc, #48]	; (8004c64 <TIM_Base_SetConfig+0x124>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d103      	bne.n	8004c40 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	691a      	ldr	r2, [r3, #16]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2201      	movs	r2, #1
 8004c44:	615a      	str	r2, [r3, #20]
}
 8004c46:	bf00      	nop
 8004c48:	3714      	adds	r7, #20
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c50:	4770      	bx	lr
 8004c52:	bf00      	nop
 8004c54:	40010000 	.word	0x40010000
 8004c58:	40000400 	.word	0x40000400
 8004c5c:	40000800 	.word	0x40000800
 8004c60:	40000c00 	.word	0x40000c00
 8004c64:	40010400 	.word	0x40010400
 8004c68:	40014000 	.word	0x40014000
 8004c6c:	40014400 	.word	0x40014400
 8004c70:	40014800 	.word	0x40014800
 8004c74:	40001800 	.word	0x40001800
 8004c78:	40001c00 	.word	0x40001c00
 8004c7c:	40002000 	.word	0x40002000

08004c80 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b087      	sub	sp, #28
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	60f8      	str	r0, [r7, #12]
 8004c88:	60b9      	str	r1, [r7, #8]
 8004c8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	6a1b      	ldr	r3, [r3, #32]
 8004c90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	6a1b      	ldr	r3, [r3, #32]
 8004c96:	f023 0201 	bic.w	r2, r3, #1
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	699b      	ldr	r3, [r3, #24]
 8004ca2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004caa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	011b      	lsls	r3, r3, #4
 8004cb0:	693a      	ldr	r2, [r7, #16]
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	f023 030a 	bic.w	r3, r3, #10
 8004cbc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004cbe:	697a      	ldr	r2, [r7, #20]
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	693a      	ldr	r2, [r7, #16]
 8004cca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	697a      	ldr	r2, [r7, #20]
 8004cd0:	621a      	str	r2, [r3, #32]
}
 8004cd2:	bf00      	nop
 8004cd4:	371c      	adds	r7, #28
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cdc:	4770      	bx	lr

08004cde <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004cde:	b480      	push	{r7}
 8004ce0:	b087      	sub	sp, #28
 8004ce2:	af00      	add	r7, sp, #0
 8004ce4:	60f8      	str	r0, [r7, #12]
 8004ce6:	60b9      	str	r1, [r7, #8]
 8004ce8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	6a1b      	ldr	r3, [r3, #32]
 8004cee:	f023 0210 	bic.w	r2, r3, #16
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	699b      	ldr	r3, [r3, #24]
 8004cfa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	6a1b      	ldr	r3, [r3, #32]
 8004d00:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004d08:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	031b      	lsls	r3, r3, #12
 8004d0e:	697a      	ldr	r2, [r7, #20]
 8004d10:	4313      	orrs	r3, r2
 8004d12:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004d1a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	011b      	lsls	r3, r3, #4
 8004d20:	693a      	ldr	r2, [r7, #16]
 8004d22:	4313      	orrs	r3, r2
 8004d24:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	697a      	ldr	r2, [r7, #20]
 8004d2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	693a      	ldr	r2, [r7, #16]
 8004d30:	621a      	str	r2, [r3, #32]
}
 8004d32:	bf00      	nop
 8004d34:	371c      	adds	r7, #28
 8004d36:	46bd      	mov	sp, r7
 8004d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3c:	4770      	bx	lr

08004d3e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004d3e:	b480      	push	{r7}
 8004d40:	b085      	sub	sp, #20
 8004d42:	af00      	add	r7, sp, #0
 8004d44:	6078      	str	r0, [r7, #4]
 8004d46:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	689b      	ldr	r3, [r3, #8]
 8004d4c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d54:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004d56:	683a      	ldr	r2, [r7, #0]
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	f043 0307 	orr.w	r3, r3, #7
 8004d60:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	68fa      	ldr	r2, [r7, #12]
 8004d66:	609a      	str	r2, [r3, #8]
}
 8004d68:	bf00      	nop
 8004d6a:	3714      	adds	r7, #20
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d72:	4770      	bx	lr

08004d74 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b087      	sub	sp, #28
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	60f8      	str	r0, [r7, #12]
 8004d7c:	60b9      	str	r1, [r7, #8]
 8004d7e:	607a      	str	r2, [r7, #4]
 8004d80:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d8e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	021a      	lsls	r2, r3, #8
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	431a      	orrs	r2, r3
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	697a      	ldr	r2, [r7, #20]
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	697a      	ldr	r2, [r7, #20]
 8004da6:	609a      	str	r2, [r3, #8]
}
 8004da8:	bf00      	nop
 8004daa:	371c      	adds	r7, #28
 8004dac:	46bd      	mov	sp, r7
 8004dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db2:	4770      	bx	lr

08004db4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b085      	sub	sp, #20
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
 8004dbc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004dc4:	2b01      	cmp	r3, #1
 8004dc6:	d101      	bne.n	8004dcc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004dc8:	2302      	movs	r3, #2
 8004dca:	e05a      	b.n	8004e82 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2201      	movs	r2, #1
 8004dd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2202      	movs	r2, #2
 8004dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	689b      	ldr	r3, [r3, #8]
 8004dea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004df2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	68fa      	ldr	r2, [r7, #12]
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	68fa      	ldr	r2, [r7, #12]
 8004e04:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a21      	ldr	r2, [pc, #132]	; (8004e90 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d022      	beq.n	8004e56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e18:	d01d      	beq.n	8004e56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a1d      	ldr	r2, [pc, #116]	; (8004e94 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d018      	beq.n	8004e56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a1b      	ldr	r2, [pc, #108]	; (8004e98 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d013      	beq.n	8004e56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a1a      	ldr	r2, [pc, #104]	; (8004e9c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d00e      	beq.n	8004e56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a18      	ldr	r2, [pc, #96]	; (8004ea0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d009      	beq.n	8004e56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a17      	ldr	r2, [pc, #92]	; (8004ea4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d004      	beq.n	8004e56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a15      	ldr	r2, [pc, #84]	; (8004ea8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d10c      	bne.n	8004e70 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e5c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	68ba      	ldr	r2, [r7, #8]
 8004e64:	4313      	orrs	r3, r2
 8004e66:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	68ba      	ldr	r2, [r7, #8]
 8004e6e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2201      	movs	r2, #1
 8004e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e80:	2300      	movs	r3, #0
}
 8004e82:	4618      	mov	r0, r3
 8004e84:	3714      	adds	r7, #20
 8004e86:	46bd      	mov	sp, r7
 8004e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8c:	4770      	bx	lr
 8004e8e:	bf00      	nop
 8004e90:	40010000 	.word	0x40010000
 8004e94:	40000400 	.word	0x40000400
 8004e98:	40000800 	.word	0x40000800
 8004e9c:	40000c00 	.word	0x40000c00
 8004ea0:	40010400 	.word	0x40010400
 8004ea4:	40014000 	.word	0x40014000
 8004ea8:	40001800 	.word	0x40001800

08004eac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b083      	sub	sp, #12
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004eb4:	bf00      	nop
 8004eb6:	370c      	adds	r7, #12
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebe:	4770      	bx	lr

08004ec0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b083      	sub	sp, #12
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004ec8:	bf00      	nop
 8004eca:	370c      	adds	r7, #12
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed2:	4770      	bx	lr

08004ed4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b082      	sub	sp, #8
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d101      	bne.n	8004ee6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	e03f      	b.n	8004f66 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004eec:	b2db      	uxtb	r3, r3
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d106      	bne.n	8004f00 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f007 f9b0 	bl	800c260 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2224      	movs	r2, #36	; 0x24
 8004f04:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	68da      	ldr	r2, [r3, #12]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f16:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004f18:	6878      	ldr	r0, [r7, #4]
 8004f1a:	f000 f9b1 	bl	8005280 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	691a      	ldr	r2, [r3, #16]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004f2c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	695a      	ldr	r2, [r3, #20]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004f3c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	68da      	ldr	r2, [r3, #12]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f4c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2200      	movs	r2, #0
 8004f52:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2220      	movs	r2, #32
 8004f58:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2220      	movs	r2, #32
 8004f60:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004f64:	2300      	movs	r3, #0
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	3708      	adds	r7, #8
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}

08004f6e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f6e:	b580      	push	{r7, lr}
 8004f70:	b088      	sub	sp, #32
 8004f72:	af02      	add	r7, sp, #8
 8004f74:	60f8      	str	r0, [r7, #12]
 8004f76:	60b9      	str	r1, [r7, #8]
 8004f78:	603b      	str	r3, [r7, #0]
 8004f7a:	4613      	mov	r3, r2
 8004f7c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004f88:	b2db      	uxtb	r3, r3
 8004f8a:	2b20      	cmp	r3, #32
 8004f8c:	f040 8083 	bne.w	8005096 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d002      	beq.n	8004f9c <HAL_UART_Transmit+0x2e>
 8004f96:	88fb      	ldrh	r3, [r7, #6]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d101      	bne.n	8004fa0 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	e07b      	b.n	8005098 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004fa6:	2b01      	cmp	r3, #1
 8004fa8:	d101      	bne.n	8004fae <HAL_UART_Transmit+0x40>
 8004faa:	2302      	movs	r3, #2
 8004fac:	e074      	b.n	8005098 <HAL_UART_Transmit+0x12a>
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	2201      	movs	r2, #1
 8004fb2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	2221      	movs	r2, #33	; 0x21
 8004fc0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004fc4:	f7fb faca 	bl	800055c <HAL_GetTick>
 8004fc8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	88fa      	ldrh	r2, [r7, #6]
 8004fce:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	88fa      	ldrh	r2, [r7, #6]
 8004fd4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8004fde:	e042      	b.n	8005066 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004fe4:	b29b      	uxth	r3, r3
 8004fe6:	3b01      	subs	r3, #1
 8004fe8:	b29a      	uxth	r2, r3
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	689b      	ldr	r3, [r3, #8]
 8004ff2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ff6:	d122      	bne.n	800503e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	9300      	str	r3, [sp, #0]
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	2200      	movs	r2, #0
 8005000:	2180      	movs	r1, #128	; 0x80
 8005002:	68f8      	ldr	r0, [r7, #12]
 8005004:	f000 f8f2 	bl	80051ec <UART_WaitOnFlagUntilTimeout>
 8005008:	4603      	mov	r3, r0
 800500a:	2b00      	cmp	r3, #0
 800500c:	d001      	beq.n	8005012 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800500e:	2303      	movs	r3, #3
 8005010:	e042      	b.n	8005098 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	881b      	ldrh	r3, [r3, #0]
 800501a:	461a      	mov	r2, r3
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005024:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	691b      	ldr	r3, [r3, #16]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d103      	bne.n	8005036 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	3302      	adds	r3, #2
 8005032:	60bb      	str	r3, [r7, #8]
 8005034:	e017      	b.n	8005066 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	3301      	adds	r3, #1
 800503a:	60bb      	str	r3, [r7, #8]
 800503c:	e013      	b.n	8005066 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	9300      	str	r3, [sp, #0]
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	2200      	movs	r2, #0
 8005046:	2180      	movs	r1, #128	; 0x80
 8005048:	68f8      	ldr	r0, [r7, #12]
 800504a:	f000 f8cf 	bl	80051ec <UART_WaitOnFlagUntilTimeout>
 800504e:	4603      	mov	r3, r0
 8005050:	2b00      	cmp	r3, #0
 8005052:	d001      	beq.n	8005058 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8005054:	2303      	movs	r3, #3
 8005056:	e01f      	b.n	8005098 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	1c5a      	adds	r2, r3, #1
 800505c:	60ba      	str	r2, [r7, #8]
 800505e:	781a      	ldrb	r2, [r3, #0]
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800506a:	b29b      	uxth	r3, r3
 800506c:	2b00      	cmp	r3, #0
 800506e:	d1b7      	bne.n	8004fe0 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	9300      	str	r3, [sp, #0]
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	2200      	movs	r2, #0
 8005078:	2140      	movs	r1, #64	; 0x40
 800507a:	68f8      	ldr	r0, [r7, #12]
 800507c:	f000 f8b6 	bl	80051ec <UART_WaitOnFlagUntilTimeout>
 8005080:	4603      	mov	r3, r0
 8005082:	2b00      	cmp	r3, #0
 8005084:	d001      	beq.n	800508a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8005086:	2303      	movs	r3, #3
 8005088:	e006      	b.n	8005098 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	2220      	movs	r2, #32
 800508e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8005092:	2300      	movs	r3, #0
 8005094:	e000      	b.n	8005098 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8005096:	2302      	movs	r3, #2
  }
}
 8005098:	4618      	mov	r0, r3
 800509a:	3718      	adds	r7, #24
 800509c:	46bd      	mov	sp, r7
 800509e:	bd80      	pop	{r7, pc}

080050a0 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b088      	sub	sp, #32
 80050a4:	af02      	add	r7, sp, #8
 80050a6:	60f8      	str	r0, [r7, #12]
 80050a8:	60b9      	str	r1, [r7, #8]
 80050aa:	603b      	str	r3, [r7, #0]
 80050ac:	4613      	mov	r3, r2
 80050ae:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80050b0:	2300      	movs	r3, #0
 80050b2:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80050ba:	b2db      	uxtb	r3, r3
 80050bc:	2b20      	cmp	r3, #32
 80050be:	f040 8090 	bne.w	80051e2 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d002      	beq.n	80050ce <HAL_UART_Receive+0x2e>
 80050c8:	88fb      	ldrh	r3, [r7, #6]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d101      	bne.n	80050d2 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80050ce:	2301      	movs	r3, #1
 80050d0:	e088      	b.n	80051e4 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80050d8:	2b01      	cmp	r3, #1
 80050da:	d101      	bne.n	80050e0 <HAL_UART_Receive+0x40>
 80050dc:	2302      	movs	r3, #2
 80050de:	e081      	b.n	80051e4 <HAL_UART_Receive+0x144>
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	2201      	movs	r2, #1
 80050e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2200      	movs	r2, #0
 80050ec:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2222      	movs	r2, #34	; 0x22
 80050f2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80050f6:	f7fb fa31 	bl	800055c <HAL_GetTick>
 80050fa:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	88fa      	ldrh	r2, [r7, #6]
 8005100:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	88fa      	ldrh	r2, [r7, #6]
 8005106:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	2200      	movs	r2, #0
 800510c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8005110:	e05c      	b.n	80051cc <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005116:	b29b      	uxth	r3, r3
 8005118:	3b01      	subs	r3, #1
 800511a:	b29a      	uxth	r2, r3
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005128:	d12b      	bne.n	8005182 <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	9300      	str	r3, [sp, #0]
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	2200      	movs	r2, #0
 8005132:	2120      	movs	r1, #32
 8005134:	68f8      	ldr	r0, [r7, #12]
 8005136:	f000 f859 	bl	80051ec <UART_WaitOnFlagUntilTimeout>
 800513a:	4603      	mov	r3, r0
 800513c:	2b00      	cmp	r3, #0
 800513e:	d001      	beq.n	8005144 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 8005140:	2303      	movs	r3, #3
 8005142:	e04f      	b.n	80051e4 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	691b      	ldr	r3, [r3, #16]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d10c      	bne.n	800516a <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	b29b      	uxth	r3, r3
 8005158:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800515c:	b29a      	uxth	r2, r3
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	3302      	adds	r3, #2
 8005166:	60bb      	str	r3, [r7, #8]
 8005168:	e030      	b.n	80051cc <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	b29b      	uxth	r3, r3
 8005172:	b2db      	uxtb	r3, r3
 8005174:	b29a      	uxth	r2, r3
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	3301      	adds	r3, #1
 800517e:	60bb      	str	r3, [r7, #8]
 8005180:	e024      	b.n	80051cc <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	9300      	str	r3, [sp, #0]
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	2200      	movs	r2, #0
 800518a:	2120      	movs	r1, #32
 800518c:	68f8      	ldr	r0, [r7, #12]
 800518e:	f000 f82d 	bl	80051ec <UART_WaitOnFlagUntilTimeout>
 8005192:	4603      	mov	r3, r0
 8005194:	2b00      	cmp	r3, #0
 8005196:	d001      	beq.n	800519c <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8005198:	2303      	movs	r3, #3
 800519a:	e023      	b.n	80051e4 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	691b      	ldr	r3, [r3, #16]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d108      	bne.n	80051b6 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	6859      	ldr	r1, [r3, #4]
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	1c5a      	adds	r2, r3, #1
 80051ae:	60ba      	str	r2, [r7, #8]
 80051b0:	b2ca      	uxtb	r2, r1
 80051b2:	701a      	strb	r2, [r3, #0]
 80051b4:	e00a      	b.n	80051cc <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	b2da      	uxtb	r2, r3
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	1c59      	adds	r1, r3, #1
 80051c2:	60b9      	str	r1, [r7, #8]
 80051c4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80051c8:	b2d2      	uxtb	r2, r2
 80051ca:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80051d0:	b29b      	uxth	r3, r3
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d19d      	bne.n	8005112 <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	2220      	movs	r2, #32
 80051da:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 80051de:	2300      	movs	r3, #0
 80051e0:	e000      	b.n	80051e4 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 80051e2:	2302      	movs	r3, #2
  }
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	3718      	adds	r7, #24
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}

080051ec <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b084      	sub	sp, #16
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	60f8      	str	r0, [r7, #12]
 80051f4:	60b9      	str	r1, [r7, #8]
 80051f6:	603b      	str	r3, [r7, #0]
 80051f8:	4613      	mov	r3, r2
 80051fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051fc:	e02c      	b.n	8005258 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051fe:	69bb      	ldr	r3, [r7, #24]
 8005200:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005204:	d028      	beq.n	8005258 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005206:	69bb      	ldr	r3, [r7, #24]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d007      	beq.n	800521c <UART_WaitOnFlagUntilTimeout+0x30>
 800520c:	f7fb f9a6 	bl	800055c <HAL_GetTick>
 8005210:	4602      	mov	r2, r0
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	1ad3      	subs	r3, r2, r3
 8005216:	69ba      	ldr	r2, [r7, #24]
 8005218:	429a      	cmp	r2, r3
 800521a:	d21d      	bcs.n	8005258 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	68da      	ldr	r2, [r3, #12]
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800522a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	695a      	ldr	r2, [r3, #20]
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f022 0201 	bic.w	r2, r2, #1
 800523a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	2220      	movs	r2, #32
 8005240:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	2220      	movs	r2, #32
 8005248:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	2200      	movs	r2, #0
 8005250:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8005254:	2303      	movs	r3, #3
 8005256:	e00f      	b.n	8005278 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	681a      	ldr	r2, [r3, #0]
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	4013      	ands	r3, r2
 8005262:	68ba      	ldr	r2, [r7, #8]
 8005264:	429a      	cmp	r2, r3
 8005266:	bf0c      	ite	eq
 8005268:	2301      	moveq	r3, #1
 800526a:	2300      	movne	r3, #0
 800526c:	b2db      	uxtb	r3, r3
 800526e:	461a      	mov	r2, r3
 8005270:	79fb      	ldrb	r3, [r7, #7]
 8005272:	429a      	cmp	r2, r3
 8005274:	d0c3      	beq.n	80051fe <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005276:	2300      	movs	r3, #0
}
 8005278:	4618      	mov	r0, r3
 800527a:	3710      	adds	r7, #16
 800527c:	46bd      	mov	sp, r7
 800527e:	bd80      	pop	{r7, pc}

08005280 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005284:	b085      	sub	sp, #20
 8005286:	af00      	add	r7, sp, #0
 8005288:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	691b      	ldr	r3, [r3, #16]
 8005290:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	68da      	ldr	r2, [r3, #12]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	430a      	orrs	r2, r1
 800529e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	689a      	ldr	r2, [r3, #8]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	691b      	ldr	r3, [r3, #16]
 80052a8:	431a      	orrs	r2, r3
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	695b      	ldr	r3, [r3, #20]
 80052ae:	431a      	orrs	r2, r3
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	69db      	ldr	r3, [r3, #28]
 80052b4:	4313      	orrs	r3, r2
 80052b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	68db      	ldr	r3, [r3, #12]
 80052be:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80052c2:	f023 030c 	bic.w	r3, r3, #12
 80052c6:	687a      	ldr	r2, [r7, #4]
 80052c8:	6812      	ldr	r2, [r2, #0]
 80052ca:	68f9      	ldr	r1, [r7, #12]
 80052cc:	430b      	orrs	r3, r1
 80052ce:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	695b      	ldr	r3, [r3, #20]
 80052d6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	699a      	ldr	r2, [r3, #24]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	430a      	orrs	r2, r1
 80052e4:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	69db      	ldr	r3, [r3, #28]
 80052ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052ee:	f040 818b 	bne.w	8005608 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4ac1      	ldr	r2, [pc, #772]	; (80055fc <UART_SetConfig+0x37c>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d005      	beq.n	8005308 <UART_SetConfig+0x88>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4abf      	ldr	r2, [pc, #764]	; (8005600 <UART_SetConfig+0x380>)
 8005302:	4293      	cmp	r3, r2
 8005304:	f040 80bd 	bne.w	8005482 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005308:	f7fe ff48 	bl	800419c <HAL_RCC_GetPCLK2Freq>
 800530c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	461d      	mov	r5, r3
 8005312:	f04f 0600 	mov.w	r6, #0
 8005316:	46a8      	mov	r8, r5
 8005318:	46b1      	mov	r9, r6
 800531a:	eb18 0308 	adds.w	r3, r8, r8
 800531e:	eb49 0409 	adc.w	r4, r9, r9
 8005322:	4698      	mov	r8, r3
 8005324:	46a1      	mov	r9, r4
 8005326:	eb18 0805 	adds.w	r8, r8, r5
 800532a:	eb49 0906 	adc.w	r9, r9, r6
 800532e:	f04f 0100 	mov.w	r1, #0
 8005332:	f04f 0200 	mov.w	r2, #0
 8005336:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800533a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800533e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005342:	4688      	mov	r8, r1
 8005344:	4691      	mov	r9, r2
 8005346:	eb18 0005 	adds.w	r0, r8, r5
 800534a:	eb49 0106 	adc.w	r1, r9, r6
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	461d      	mov	r5, r3
 8005354:	f04f 0600 	mov.w	r6, #0
 8005358:	196b      	adds	r3, r5, r5
 800535a:	eb46 0406 	adc.w	r4, r6, r6
 800535e:	461a      	mov	r2, r3
 8005360:	4623      	mov	r3, r4
 8005362:	f7fa ff45 	bl	80001f0 <__aeabi_uldivmod>
 8005366:	4603      	mov	r3, r0
 8005368:	460c      	mov	r4, r1
 800536a:	461a      	mov	r2, r3
 800536c:	4ba5      	ldr	r3, [pc, #660]	; (8005604 <UART_SetConfig+0x384>)
 800536e:	fba3 2302 	umull	r2, r3, r3, r2
 8005372:	095b      	lsrs	r3, r3, #5
 8005374:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	461d      	mov	r5, r3
 800537c:	f04f 0600 	mov.w	r6, #0
 8005380:	46a9      	mov	r9, r5
 8005382:	46b2      	mov	sl, r6
 8005384:	eb19 0309 	adds.w	r3, r9, r9
 8005388:	eb4a 040a 	adc.w	r4, sl, sl
 800538c:	4699      	mov	r9, r3
 800538e:	46a2      	mov	sl, r4
 8005390:	eb19 0905 	adds.w	r9, r9, r5
 8005394:	eb4a 0a06 	adc.w	sl, sl, r6
 8005398:	f04f 0100 	mov.w	r1, #0
 800539c:	f04f 0200 	mov.w	r2, #0
 80053a0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80053a4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80053a8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80053ac:	4689      	mov	r9, r1
 80053ae:	4692      	mov	sl, r2
 80053b0:	eb19 0005 	adds.w	r0, r9, r5
 80053b4:	eb4a 0106 	adc.w	r1, sl, r6
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	461d      	mov	r5, r3
 80053be:	f04f 0600 	mov.w	r6, #0
 80053c2:	196b      	adds	r3, r5, r5
 80053c4:	eb46 0406 	adc.w	r4, r6, r6
 80053c8:	461a      	mov	r2, r3
 80053ca:	4623      	mov	r3, r4
 80053cc:	f7fa ff10 	bl	80001f0 <__aeabi_uldivmod>
 80053d0:	4603      	mov	r3, r0
 80053d2:	460c      	mov	r4, r1
 80053d4:	461a      	mov	r2, r3
 80053d6:	4b8b      	ldr	r3, [pc, #556]	; (8005604 <UART_SetConfig+0x384>)
 80053d8:	fba3 1302 	umull	r1, r3, r3, r2
 80053dc:	095b      	lsrs	r3, r3, #5
 80053de:	2164      	movs	r1, #100	; 0x64
 80053e0:	fb01 f303 	mul.w	r3, r1, r3
 80053e4:	1ad3      	subs	r3, r2, r3
 80053e6:	00db      	lsls	r3, r3, #3
 80053e8:	3332      	adds	r3, #50	; 0x32
 80053ea:	4a86      	ldr	r2, [pc, #536]	; (8005604 <UART_SetConfig+0x384>)
 80053ec:	fba2 2303 	umull	r2, r3, r2, r3
 80053f0:	095b      	lsrs	r3, r3, #5
 80053f2:	005b      	lsls	r3, r3, #1
 80053f4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80053f8:	4498      	add	r8, r3
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	461d      	mov	r5, r3
 80053fe:	f04f 0600 	mov.w	r6, #0
 8005402:	46a9      	mov	r9, r5
 8005404:	46b2      	mov	sl, r6
 8005406:	eb19 0309 	adds.w	r3, r9, r9
 800540a:	eb4a 040a 	adc.w	r4, sl, sl
 800540e:	4699      	mov	r9, r3
 8005410:	46a2      	mov	sl, r4
 8005412:	eb19 0905 	adds.w	r9, r9, r5
 8005416:	eb4a 0a06 	adc.w	sl, sl, r6
 800541a:	f04f 0100 	mov.w	r1, #0
 800541e:	f04f 0200 	mov.w	r2, #0
 8005422:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005426:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800542a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800542e:	4689      	mov	r9, r1
 8005430:	4692      	mov	sl, r2
 8005432:	eb19 0005 	adds.w	r0, r9, r5
 8005436:	eb4a 0106 	adc.w	r1, sl, r6
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	461d      	mov	r5, r3
 8005440:	f04f 0600 	mov.w	r6, #0
 8005444:	196b      	adds	r3, r5, r5
 8005446:	eb46 0406 	adc.w	r4, r6, r6
 800544a:	461a      	mov	r2, r3
 800544c:	4623      	mov	r3, r4
 800544e:	f7fa fecf 	bl	80001f0 <__aeabi_uldivmod>
 8005452:	4603      	mov	r3, r0
 8005454:	460c      	mov	r4, r1
 8005456:	461a      	mov	r2, r3
 8005458:	4b6a      	ldr	r3, [pc, #424]	; (8005604 <UART_SetConfig+0x384>)
 800545a:	fba3 1302 	umull	r1, r3, r3, r2
 800545e:	095b      	lsrs	r3, r3, #5
 8005460:	2164      	movs	r1, #100	; 0x64
 8005462:	fb01 f303 	mul.w	r3, r1, r3
 8005466:	1ad3      	subs	r3, r2, r3
 8005468:	00db      	lsls	r3, r3, #3
 800546a:	3332      	adds	r3, #50	; 0x32
 800546c:	4a65      	ldr	r2, [pc, #404]	; (8005604 <UART_SetConfig+0x384>)
 800546e:	fba2 2303 	umull	r2, r3, r2, r3
 8005472:	095b      	lsrs	r3, r3, #5
 8005474:	f003 0207 	and.w	r2, r3, #7
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4442      	add	r2, r8
 800547e:	609a      	str	r2, [r3, #8]
 8005480:	e26f      	b.n	8005962 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005482:	f7fe fe77 	bl	8004174 <HAL_RCC_GetPCLK1Freq>
 8005486:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	461d      	mov	r5, r3
 800548c:	f04f 0600 	mov.w	r6, #0
 8005490:	46a8      	mov	r8, r5
 8005492:	46b1      	mov	r9, r6
 8005494:	eb18 0308 	adds.w	r3, r8, r8
 8005498:	eb49 0409 	adc.w	r4, r9, r9
 800549c:	4698      	mov	r8, r3
 800549e:	46a1      	mov	r9, r4
 80054a0:	eb18 0805 	adds.w	r8, r8, r5
 80054a4:	eb49 0906 	adc.w	r9, r9, r6
 80054a8:	f04f 0100 	mov.w	r1, #0
 80054ac:	f04f 0200 	mov.w	r2, #0
 80054b0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80054b4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80054b8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80054bc:	4688      	mov	r8, r1
 80054be:	4691      	mov	r9, r2
 80054c0:	eb18 0005 	adds.w	r0, r8, r5
 80054c4:	eb49 0106 	adc.w	r1, r9, r6
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	461d      	mov	r5, r3
 80054ce:	f04f 0600 	mov.w	r6, #0
 80054d2:	196b      	adds	r3, r5, r5
 80054d4:	eb46 0406 	adc.w	r4, r6, r6
 80054d8:	461a      	mov	r2, r3
 80054da:	4623      	mov	r3, r4
 80054dc:	f7fa fe88 	bl	80001f0 <__aeabi_uldivmod>
 80054e0:	4603      	mov	r3, r0
 80054e2:	460c      	mov	r4, r1
 80054e4:	461a      	mov	r2, r3
 80054e6:	4b47      	ldr	r3, [pc, #284]	; (8005604 <UART_SetConfig+0x384>)
 80054e8:	fba3 2302 	umull	r2, r3, r3, r2
 80054ec:	095b      	lsrs	r3, r3, #5
 80054ee:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	461d      	mov	r5, r3
 80054f6:	f04f 0600 	mov.w	r6, #0
 80054fa:	46a9      	mov	r9, r5
 80054fc:	46b2      	mov	sl, r6
 80054fe:	eb19 0309 	adds.w	r3, r9, r9
 8005502:	eb4a 040a 	adc.w	r4, sl, sl
 8005506:	4699      	mov	r9, r3
 8005508:	46a2      	mov	sl, r4
 800550a:	eb19 0905 	adds.w	r9, r9, r5
 800550e:	eb4a 0a06 	adc.w	sl, sl, r6
 8005512:	f04f 0100 	mov.w	r1, #0
 8005516:	f04f 0200 	mov.w	r2, #0
 800551a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800551e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005522:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005526:	4689      	mov	r9, r1
 8005528:	4692      	mov	sl, r2
 800552a:	eb19 0005 	adds.w	r0, r9, r5
 800552e:	eb4a 0106 	adc.w	r1, sl, r6
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	461d      	mov	r5, r3
 8005538:	f04f 0600 	mov.w	r6, #0
 800553c:	196b      	adds	r3, r5, r5
 800553e:	eb46 0406 	adc.w	r4, r6, r6
 8005542:	461a      	mov	r2, r3
 8005544:	4623      	mov	r3, r4
 8005546:	f7fa fe53 	bl	80001f0 <__aeabi_uldivmod>
 800554a:	4603      	mov	r3, r0
 800554c:	460c      	mov	r4, r1
 800554e:	461a      	mov	r2, r3
 8005550:	4b2c      	ldr	r3, [pc, #176]	; (8005604 <UART_SetConfig+0x384>)
 8005552:	fba3 1302 	umull	r1, r3, r3, r2
 8005556:	095b      	lsrs	r3, r3, #5
 8005558:	2164      	movs	r1, #100	; 0x64
 800555a:	fb01 f303 	mul.w	r3, r1, r3
 800555e:	1ad3      	subs	r3, r2, r3
 8005560:	00db      	lsls	r3, r3, #3
 8005562:	3332      	adds	r3, #50	; 0x32
 8005564:	4a27      	ldr	r2, [pc, #156]	; (8005604 <UART_SetConfig+0x384>)
 8005566:	fba2 2303 	umull	r2, r3, r2, r3
 800556a:	095b      	lsrs	r3, r3, #5
 800556c:	005b      	lsls	r3, r3, #1
 800556e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005572:	4498      	add	r8, r3
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	461d      	mov	r5, r3
 8005578:	f04f 0600 	mov.w	r6, #0
 800557c:	46a9      	mov	r9, r5
 800557e:	46b2      	mov	sl, r6
 8005580:	eb19 0309 	adds.w	r3, r9, r9
 8005584:	eb4a 040a 	adc.w	r4, sl, sl
 8005588:	4699      	mov	r9, r3
 800558a:	46a2      	mov	sl, r4
 800558c:	eb19 0905 	adds.w	r9, r9, r5
 8005590:	eb4a 0a06 	adc.w	sl, sl, r6
 8005594:	f04f 0100 	mov.w	r1, #0
 8005598:	f04f 0200 	mov.w	r2, #0
 800559c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80055a0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80055a4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80055a8:	4689      	mov	r9, r1
 80055aa:	4692      	mov	sl, r2
 80055ac:	eb19 0005 	adds.w	r0, r9, r5
 80055b0:	eb4a 0106 	adc.w	r1, sl, r6
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	461d      	mov	r5, r3
 80055ba:	f04f 0600 	mov.w	r6, #0
 80055be:	196b      	adds	r3, r5, r5
 80055c0:	eb46 0406 	adc.w	r4, r6, r6
 80055c4:	461a      	mov	r2, r3
 80055c6:	4623      	mov	r3, r4
 80055c8:	f7fa fe12 	bl	80001f0 <__aeabi_uldivmod>
 80055cc:	4603      	mov	r3, r0
 80055ce:	460c      	mov	r4, r1
 80055d0:	461a      	mov	r2, r3
 80055d2:	4b0c      	ldr	r3, [pc, #48]	; (8005604 <UART_SetConfig+0x384>)
 80055d4:	fba3 1302 	umull	r1, r3, r3, r2
 80055d8:	095b      	lsrs	r3, r3, #5
 80055da:	2164      	movs	r1, #100	; 0x64
 80055dc:	fb01 f303 	mul.w	r3, r1, r3
 80055e0:	1ad3      	subs	r3, r2, r3
 80055e2:	00db      	lsls	r3, r3, #3
 80055e4:	3332      	adds	r3, #50	; 0x32
 80055e6:	4a07      	ldr	r2, [pc, #28]	; (8005604 <UART_SetConfig+0x384>)
 80055e8:	fba2 2303 	umull	r2, r3, r2, r3
 80055ec:	095b      	lsrs	r3, r3, #5
 80055ee:	f003 0207 	and.w	r2, r3, #7
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4442      	add	r2, r8
 80055f8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80055fa:	e1b2      	b.n	8005962 <UART_SetConfig+0x6e2>
 80055fc:	40011000 	.word	0x40011000
 8005600:	40011400 	.word	0x40011400
 8005604:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4ad7      	ldr	r2, [pc, #860]	; (800596c <UART_SetConfig+0x6ec>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d005      	beq.n	800561e <UART_SetConfig+0x39e>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4ad6      	ldr	r2, [pc, #856]	; (8005970 <UART_SetConfig+0x6f0>)
 8005618:	4293      	cmp	r3, r2
 800561a:	f040 80d1 	bne.w	80057c0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800561e:	f7fe fdbd 	bl	800419c <HAL_RCC_GetPCLK2Freq>
 8005622:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	469a      	mov	sl, r3
 8005628:	f04f 0b00 	mov.w	fp, #0
 800562c:	46d0      	mov	r8, sl
 800562e:	46d9      	mov	r9, fp
 8005630:	eb18 0308 	adds.w	r3, r8, r8
 8005634:	eb49 0409 	adc.w	r4, r9, r9
 8005638:	4698      	mov	r8, r3
 800563a:	46a1      	mov	r9, r4
 800563c:	eb18 080a 	adds.w	r8, r8, sl
 8005640:	eb49 090b 	adc.w	r9, r9, fp
 8005644:	f04f 0100 	mov.w	r1, #0
 8005648:	f04f 0200 	mov.w	r2, #0
 800564c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005650:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005654:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005658:	4688      	mov	r8, r1
 800565a:	4691      	mov	r9, r2
 800565c:	eb1a 0508 	adds.w	r5, sl, r8
 8005660:	eb4b 0609 	adc.w	r6, fp, r9
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	4619      	mov	r1, r3
 800566a:	f04f 0200 	mov.w	r2, #0
 800566e:	f04f 0300 	mov.w	r3, #0
 8005672:	f04f 0400 	mov.w	r4, #0
 8005676:	0094      	lsls	r4, r2, #2
 8005678:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800567c:	008b      	lsls	r3, r1, #2
 800567e:	461a      	mov	r2, r3
 8005680:	4623      	mov	r3, r4
 8005682:	4628      	mov	r0, r5
 8005684:	4631      	mov	r1, r6
 8005686:	f7fa fdb3 	bl	80001f0 <__aeabi_uldivmod>
 800568a:	4603      	mov	r3, r0
 800568c:	460c      	mov	r4, r1
 800568e:	461a      	mov	r2, r3
 8005690:	4bb8      	ldr	r3, [pc, #736]	; (8005974 <UART_SetConfig+0x6f4>)
 8005692:	fba3 2302 	umull	r2, r3, r3, r2
 8005696:	095b      	lsrs	r3, r3, #5
 8005698:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	469b      	mov	fp, r3
 80056a0:	f04f 0c00 	mov.w	ip, #0
 80056a4:	46d9      	mov	r9, fp
 80056a6:	46e2      	mov	sl, ip
 80056a8:	eb19 0309 	adds.w	r3, r9, r9
 80056ac:	eb4a 040a 	adc.w	r4, sl, sl
 80056b0:	4699      	mov	r9, r3
 80056b2:	46a2      	mov	sl, r4
 80056b4:	eb19 090b 	adds.w	r9, r9, fp
 80056b8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80056bc:	f04f 0100 	mov.w	r1, #0
 80056c0:	f04f 0200 	mov.w	r2, #0
 80056c4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80056c8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80056cc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80056d0:	4689      	mov	r9, r1
 80056d2:	4692      	mov	sl, r2
 80056d4:	eb1b 0509 	adds.w	r5, fp, r9
 80056d8:	eb4c 060a 	adc.w	r6, ip, sl
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	4619      	mov	r1, r3
 80056e2:	f04f 0200 	mov.w	r2, #0
 80056e6:	f04f 0300 	mov.w	r3, #0
 80056ea:	f04f 0400 	mov.w	r4, #0
 80056ee:	0094      	lsls	r4, r2, #2
 80056f0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80056f4:	008b      	lsls	r3, r1, #2
 80056f6:	461a      	mov	r2, r3
 80056f8:	4623      	mov	r3, r4
 80056fa:	4628      	mov	r0, r5
 80056fc:	4631      	mov	r1, r6
 80056fe:	f7fa fd77 	bl	80001f0 <__aeabi_uldivmod>
 8005702:	4603      	mov	r3, r0
 8005704:	460c      	mov	r4, r1
 8005706:	461a      	mov	r2, r3
 8005708:	4b9a      	ldr	r3, [pc, #616]	; (8005974 <UART_SetConfig+0x6f4>)
 800570a:	fba3 1302 	umull	r1, r3, r3, r2
 800570e:	095b      	lsrs	r3, r3, #5
 8005710:	2164      	movs	r1, #100	; 0x64
 8005712:	fb01 f303 	mul.w	r3, r1, r3
 8005716:	1ad3      	subs	r3, r2, r3
 8005718:	011b      	lsls	r3, r3, #4
 800571a:	3332      	adds	r3, #50	; 0x32
 800571c:	4a95      	ldr	r2, [pc, #596]	; (8005974 <UART_SetConfig+0x6f4>)
 800571e:	fba2 2303 	umull	r2, r3, r2, r3
 8005722:	095b      	lsrs	r3, r3, #5
 8005724:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005728:	4498      	add	r8, r3
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	469b      	mov	fp, r3
 800572e:	f04f 0c00 	mov.w	ip, #0
 8005732:	46d9      	mov	r9, fp
 8005734:	46e2      	mov	sl, ip
 8005736:	eb19 0309 	adds.w	r3, r9, r9
 800573a:	eb4a 040a 	adc.w	r4, sl, sl
 800573e:	4699      	mov	r9, r3
 8005740:	46a2      	mov	sl, r4
 8005742:	eb19 090b 	adds.w	r9, r9, fp
 8005746:	eb4a 0a0c 	adc.w	sl, sl, ip
 800574a:	f04f 0100 	mov.w	r1, #0
 800574e:	f04f 0200 	mov.w	r2, #0
 8005752:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005756:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800575a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800575e:	4689      	mov	r9, r1
 8005760:	4692      	mov	sl, r2
 8005762:	eb1b 0509 	adds.w	r5, fp, r9
 8005766:	eb4c 060a 	adc.w	r6, ip, sl
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	4619      	mov	r1, r3
 8005770:	f04f 0200 	mov.w	r2, #0
 8005774:	f04f 0300 	mov.w	r3, #0
 8005778:	f04f 0400 	mov.w	r4, #0
 800577c:	0094      	lsls	r4, r2, #2
 800577e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005782:	008b      	lsls	r3, r1, #2
 8005784:	461a      	mov	r2, r3
 8005786:	4623      	mov	r3, r4
 8005788:	4628      	mov	r0, r5
 800578a:	4631      	mov	r1, r6
 800578c:	f7fa fd30 	bl	80001f0 <__aeabi_uldivmod>
 8005790:	4603      	mov	r3, r0
 8005792:	460c      	mov	r4, r1
 8005794:	461a      	mov	r2, r3
 8005796:	4b77      	ldr	r3, [pc, #476]	; (8005974 <UART_SetConfig+0x6f4>)
 8005798:	fba3 1302 	umull	r1, r3, r3, r2
 800579c:	095b      	lsrs	r3, r3, #5
 800579e:	2164      	movs	r1, #100	; 0x64
 80057a0:	fb01 f303 	mul.w	r3, r1, r3
 80057a4:	1ad3      	subs	r3, r2, r3
 80057a6:	011b      	lsls	r3, r3, #4
 80057a8:	3332      	adds	r3, #50	; 0x32
 80057aa:	4a72      	ldr	r2, [pc, #456]	; (8005974 <UART_SetConfig+0x6f4>)
 80057ac:	fba2 2303 	umull	r2, r3, r2, r3
 80057b0:	095b      	lsrs	r3, r3, #5
 80057b2:	f003 020f 	and.w	r2, r3, #15
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4442      	add	r2, r8
 80057bc:	609a      	str	r2, [r3, #8]
 80057be:	e0d0      	b.n	8005962 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80057c0:	f7fe fcd8 	bl	8004174 <HAL_RCC_GetPCLK1Freq>
 80057c4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	469a      	mov	sl, r3
 80057ca:	f04f 0b00 	mov.w	fp, #0
 80057ce:	46d0      	mov	r8, sl
 80057d0:	46d9      	mov	r9, fp
 80057d2:	eb18 0308 	adds.w	r3, r8, r8
 80057d6:	eb49 0409 	adc.w	r4, r9, r9
 80057da:	4698      	mov	r8, r3
 80057dc:	46a1      	mov	r9, r4
 80057de:	eb18 080a 	adds.w	r8, r8, sl
 80057e2:	eb49 090b 	adc.w	r9, r9, fp
 80057e6:	f04f 0100 	mov.w	r1, #0
 80057ea:	f04f 0200 	mov.w	r2, #0
 80057ee:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80057f2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80057f6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80057fa:	4688      	mov	r8, r1
 80057fc:	4691      	mov	r9, r2
 80057fe:	eb1a 0508 	adds.w	r5, sl, r8
 8005802:	eb4b 0609 	adc.w	r6, fp, r9
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	685b      	ldr	r3, [r3, #4]
 800580a:	4619      	mov	r1, r3
 800580c:	f04f 0200 	mov.w	r2, #0
 8005810:	f04f 0300 	mov.w	r3, #0
 8005814:	f04f 0400 	mov.w	r4, #0
 8005818:	0094      	lsls	r4, r2, #2
 800581a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800581e:	008b      	lsls	r3, r1, #2
 8005820:	461a      	mov	r2, r3
 8005822:	4623      	mov	r3, r4
 8005824:	4628      	mov	r0, r5
 8005826:	4631      	mov	r1, r6
 8005828:	f7fa fce2 	bl	80001f0 <__aeabi_uldivmod>
 800582c:	4603      	mov	r3, r0
 800582e:	460c      	mov	r4, r1
 8005830:	461a      	mov	r2, r3
 8005832:	4b50      	ldr	r3, [pc, #320]	; (8005974 <UART_SetConfig+0x6f4>)
 8005834:	fba3 2302 	umull	r2, r3, r3, r2
 8005838:	095b      	lsrs	r3, r3, #5
 800583a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	469b      	mov	fp, r3
 8005842:	f04f 0c00 	mov.w	ip, #0
 8005846:	46d9      	mov	r9, fp
 8005848:	46e2      	mov	sl, ip
 800584a:	eb19 0309 	adds.w	r3, r9, r9
 800584e:	eb4a 040a 	adc.w	r4, sl, sl
 8005852:	4699      	mov	r9, r3
 8005854:	46a2      	mov	sl, r4
 8005856:	eb19 090b 	adds.w	r9, r9, fp
 800585a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800585e:	f04f 0100 	mov.w	r1, #0
 8005862:	f04f 0200 	mov.w	r2, #0
 8005866:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800586a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800586e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005872:	4689      	mov	r9, r1
 8005874:	4692      	mov	sl, r2
 8005876:	eb1b 0509 	adds.w	r5, fp, r9
 800587a:	eb4c 060a 	adc.w	r6, ip, sl
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	4619      	mov	r1, r3
 8005884:	f04f 0200 	mov.w	r2, #0
 8005888:	f04f 0300 	mov.w	r3, #0
 800588c:	f04f 0400 	mov.w	r4, #0
 8005890:	0094      	lsls	r4, r2, #2
 8005892:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005896:	008b      	lsls	r3, r1, #2
 8005898:	461a      	mov	r2, r3
 800589a:	4623      	mov	r3, r4
 800589c:	4628      	mov	r0, r5
 800589e:	4631      	mov	r1, r6
 80058a0:	f7fa fca6 	bl	80001f0 <__aeabi_uldivmod>
 80058a4:	4603      	mov	r3, r0
 80058a6:	460c      	mov	r4, r1
 80058a8:	461a      	mov	r2, r3
 80058aa:	4b32      	ldr	r3, [pc, #200]	; (8005974 <UART_SetConfig+0x6f4>)
 80058ac:	fba3 1302 	umull	r1, r3, r3, r2
 80058b0:	095b      	lsrs	r3, r3, #5
 80058b2:	2164      	movs	r1, #100	; 0x64
 80058b4:	fb01 f303 	mul.w	r3, r1, r3
 80058b8:	1ad3      	subs	r3, r2, r3
 80058ba:	011b      	lsls	r3, r3, #4
 80058bc:	3332      	adds	r3, #50	; 0x32
 80058be:	4a2d      	ldr	r2, [pc, #180]	; (8005974 <UART_SetConfig+0x6f4>)
 80058c0:	fba2 2303 	umull	r2, r3, r2, r3
 80058c4:	095b      	lsrs	r3, r3, #5
 80058c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80058ca:	4498      	add	r8, r3
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	469b      	mov	fp, r3
 80058d0:	f04f 0c00 	mov.w	ip, #0
 80058d4:	46d9      	mov	r9, fp
 80058d6:	46e2      	mov	sl, ip
 80058d8:	eb19 0309 	adds.w	r3, r9, r9
 80058dc:	eb4a 040a 	adc.w	r4, sl, sl
 80058e0:	4699      	mov	r9, r3
 80058e2:	46a2      	mov	sl, r4
 80058e4:	eb19 090b 	adds.w	r9, r9, fp
 80058e8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80058ec:	f04f 0100 	mov.w	r1, #0
 80058f0:	f04f 0200 	mov.w	r2, #0
 80058f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80058f8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80058fc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005900:	4689      	mov	r9, r1
 8005902:	4692      	mov	sl, r2
 8005904:	eb1b 0509 	adds.w	r5, fp, r9
 8005908:	eb4c 060a 	adc.w	r6, ip, sl
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	685b      	ldr	r3, [r3, #4]
 8005910:	4619      	mov	r1, r3
 8005912:	f04f 0200 	mov.w	r2, #0
 8005916:	f04f 0300 	mov.w	r3, #0
 800591a:	f04f 0400 	mov.w	r4, #0
 800591e:	0094      	lsls	r4, r2, #2
 8005920:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005924:	008b      	lsls	r3, r1, #2
 8005926:	461a      	mov	r2, r3
 8005928:	4623      	mov	r3, r4
 800592a:	4628      	mov	r0, r5
 800592c:	4631      	mov	r1, r6
 800592e:	f7fa fc5f 	bl	80001f0 <__aeabi_uldivmod>
 8005932:	4603      	mov	r3, r0
 8005934:	460c      	mov	r4, r1
 8005936:	461a      	mov	r2, r3
 8005938:	4b0e      	ldr	r3, [pc, #56]	; (8005974 <UART_SetConfig+0x6f4>)
 800593a:	fba3 1302 	umull	r1, r3, r3, r2
 800593e:	095b      	lsrs	r3, r3, #5
 8005940:	2164      	movs	r1, #100	; 0x64
 8005942:	fb01 f303 	mul.w	r3, r1, r3
 8005946:	1ad3      	subs	r3, r2, r3
 8005948:	011b      	lsls	r3, r3, #4
 800594a:	3332      	adds	r3, #50	; 0x32
 800594c:	4a09      	ldr	r2, [pc, #36]	; (8005974 <UART_SetConfig+0x6f4>)
 800594e:	fba2 2303 	umull	r2, r3, r2, r3
 8005952:	095b      	lsrs	r3, r3, #5
 8005954:	f003 020f 	and.w	r2, r3, #15
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4442      	add	r2, r8
 800595e:	609a      	str	r2, [r3, #8]
}
 8005960:	e7ff      	b.n	8005962 <UART_SetConfig+0x6e2>
 8005962:	bf00      	nop
 8005964:	3714      	adds	r7, #20
 8005966:	46bd      	mov	sp, r7
 8005968:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800596c:	40011000 	.word	0x40011000
 8005970:	40011400 	.word	0x40011400
 8005974:	51eb851f 	.word	0x51eb851f

08005978 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8005978:	b480      	push	{r7}
 800597a:	b085      	sub	sp, #20
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
 8005980:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 8005982:	2300      	movs	r3, #0
 8005984:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 8005986:	2300      	movs	r3, #0
 8005988:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	2b01      	cmp	r3, #1
 8005990:	d029      	beq.n	80059e6 <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800599e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80059a2:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80059ac:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 80059b2:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 80059b8:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 80059be:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 80059c4:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 80059ca:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 80059d0:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 80059d6:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80059d8:	68fa      	ldr	r2, [r7, #12]
 80059da:	4313      	orrs	r3, r2
 80059dc:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	68fa      	ldr	r2, [r7, #12]
 80059e2:	601a      	str	r2, [r3, #0]
 80059e4:	e034      	b.n	8005a50 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80059f2:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80059fc:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8005a02:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8005a04:	68fa      	ldr	r2, [r7, #12]
 8005a06:	4313      	orrs	r3, r2
 8005a08:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005a16:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005a1a:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005a24:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 8005a2a:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 8005a30:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 8005a36:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 8005a3c:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005a3e:	68ba      	ldr	r2, [r7, #8]
 8005a40:	4313      	orrs	r3, r2
 8005a42:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	68fa      	ldr	r2, [r7, #12]
 8005a48:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	68ba      	ldr	r2, [r7, #8]
 8005a4e:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 8005a50:	2300      	movs	r3, #0
}
 8005a52:	4618      	mov	r0, r3
 8005a54:	3714      	adds	r7, #20
 8005a56:	46bd      	mov	sp, r7
 8005a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5c:	4770      	bx	lr

08005a5e <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8005a5e:	b480      	push	{r7}
 8005a60:	b087      	sub	sp, #28
 8005a62:	af00      	add	r7, sp, #0
 8005a64:	60f8      	str	r0, [r7, #12]
 8005a66:	60b9      	str	r1, [r7, #8]
 8005a68:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2b01      	cmp	r3, #1
 8005a76:	d02e      	beq.n	8005ad6 <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	689b      	ldr	r3, [r3, #8]
 8005a7c:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8005a7e:	697b      	ldr	r3, [r7, #20]
 8005a80:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005a84:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	3b01      	subs	r3, #1
 8005a92:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8005a94:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	689b      	ldr	r3, [r3, #8]
 8005a9a:	3b01      	subs	r3, #1
 8005a9c:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8005a9e:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	68db      	ldr	r3, [r3, #12]
 8005aa4:	3b01      	subs	r3, #1
 8005aa6:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8005aa8:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	691b      	ldr	r3, [r3, #16]
 8005aae:	3b01      	subs	r3, #1
 8005ab0:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8005ab2:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	695b      	ldr	r3, [r3, #20]
 8005ab8:	3b01      	subs	r3, #1
 8005aba:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8005abc:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	699b      	ldr	r3, [r3, #24]
 8005ac2:	3b01      	subs	r3, #1
 8005ac4:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	697a      	ldr	r2, [r7, #20]
 8005aca:	4313      	orrs	r3, r2
 8005acc:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	697a      	ldr	r2, [r7, #20]
 8005ad2:	609a      	str	r2, [r3, #8]
 8005ad4:	e03b      	b.n	8005b4e <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	689b      	ldr	r3, [r3, #8]
 8005ada:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005ae2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005ae6:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	68db      	ldr	r3, [r3, #12]
 8005aec:	3b01      	subs	r3, #1
 8005aee:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	695b      	ldr	r3, [r3, #20]
 8005af4:	3b01      	subs	r3, #1
 8005af6:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8005af8:	4313      	orrs	r3, r2
 8005afa:	697a      	ldr	r2, [r7, #20]
 8005afc:	4313      	orrs	r3, r2
 8005afe:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	68db      	ldr	r3, [r3, #12]
 8005b04:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005b0c:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	3b01      	subs	r3, #1
 8005b1a:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8005b1c:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	689b      	ldr	r3, [r3, #8]
 8005b22:	3b01      	subs	r3, #1
 8005b24:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8005b26:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	691b      	ldr	r3, [r3, #16]
 8005b2c:	3b01      	subs	r3, #1
 8005b2e:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8005b30:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	699b      	ldr	r3, [r3, #24]
 8005b36:	3b01      	subs	r3, #1
 8005b38:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	693a      	ldr	r2, [r7, #16]
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	697a      	ldr	r2, [r7, #20]
 8005b46:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	693a      	ldr	r2, [r7, #16]
 8005b4c:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 8005b4e:	2300      	movs	r3, #0
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	371c      	adds	r7, #28
 8005b54:	46bd      	mov	sp, r7
 8005b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5a:	4770      	bx	lr

08005b5c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005b5c:	b084      	sub	sp, #16
 8005b5e:	b580      	push	{r7, lr}
 8005b60:	b084      	sub	sp, #16
 8005b62:	af00      	add	r7, sp, #0
 8005b64:	6078      	str	r0, [r7, #4]
 8005b66:	f107 001c 	add.w	r0, r7, #28
 8005b6a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b70:	2b01      	cmp	r3, #1
 8005b72:	d122      	bne.n	8005bba <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b78:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	68db      	ldr	r3, [r3, #12]
 8005b84:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005b88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b8c:	687a      	ldr	r2, [r7, #4]
 8005b8e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	68db      	ldr	r3, [r3, #12]
 8005b94:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005b9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b9e:	2b01      	cmp	r3, #1
 8005ba0:	d105      	bne.n	8005bae <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	68db      	ldr	r3, [r3, #12]
 8005ba6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f000 f94a 	bl	8005e48 <USB_CoreReset>
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	73fb      	strb	r3, [r7, #15]
 8005bb8:	e01a      	b.n	8005bf0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	68db      	ldr	r3, [r3, #12]
 8005bbe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	f000 f93e 	bl	8005e48 <USB_CoreReset>
 8005bcc:	4603      	mov	r3, r0
 8005bce:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005bd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d106      	bne.n	8005be4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bda:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	639a      	str	r2, [r3, #56]	; 0x38
 8005be2:	e005      	b.n	8005bf0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005be8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bf2:	2b01      	cmp	r3, #1
 8005bf4:	d10b      	bne.n	8005c0e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	689b      	ldr	r3, [r3, #8]
 8005bfa:	f043 0206 	orr.w	r2, r3, #6
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	689b      	ldr	r3, [r3, #8]
 8005c06:	f043 0220 	orr.w	r2, r3, #32
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005c0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	3710      	adds	r7, #16
 8005c14:	46bd      	mov	sp, r7
 8005c16:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005c1a:	b004      	add	sp, #16
 8005c1c:	4770      	bx	lr

08005c1e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005c1e:	b480      	push	{r7}
 8005c20:	b083      	sub	sp, #12
 8005c22:	af00      	add	r7, sp, #0
 8005c24:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	689b      	ldr	r3, [r3, #8]
 8005c2a:	f043 0201 	orr.w	r2, r3, #1
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005c32:	2300      	movs	r3, #0
}
 8005c34:	4618      	mov	r0, r3
 8005c36:	370c      	adds	r7, #12
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3e:	4770      	bx	lr

08005c40 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005c40:	b480      	push	{r7}
 8005c42:	b083      	sub	sp, #12
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	689b      	ldr	r3, [r3, #8]
 8005c4c:	f023 0201 	bic.w	r2, r3, #1
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005c54:	2300      	movs	r3, #0
}
 8005c56:	4618      	mov	r0, r3
 8005c58:	370c      	adds	r7, #12
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c60:	4770      	bx	lr

08005c62 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005c62:	b580      	push	{r7, lr}
 8005c64:	b082      	sub	sp, #8
 8005c66:	af00      	add	r7, sp, #0
 8005c68:	6078      	str	r0, [r7, #4]
 8005c6a:	460b      	mov	r3, r1
 8005c6c:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	68db      	ldr	r3, [r3, #12]
 8005c72:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005c7a:	78fb      	ldrb	r3, [r7, #3]
 8005c7c:	2b01      	cmp	r3, #1
 8005c7e:	d106      	bne.n	8005c8e <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	68db      	ldr	r3, [r3, #12]
 8005c84:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	60da      	str	r2, [r3, #12]
 8005c8c:	e00b      	b.n	8005ca6 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005c8e:	78fb      	ldrb	r3, [r7, #3]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d106      	bne.n	8005ca2 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	68db      	ldr	r3, [r3, #12]
 8005c98:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	60da      	str	r2, [r3, #12]
 8005ca0:	e001      	b.n	8005ca6 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	e003      	b.n	8005cae <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005ca6:	2032      	movs	r0, #50	; 0x32
 8005ca8:	f7fa fc64 	bl	8000574 <HAL_Delay>

  return HAL_OK;
 8005cac:	2300      	movs	r3, #0
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3708      	adds	r7, #8
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}
	...

08005cb8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b085      	sub	sp, #20
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
 8005cc0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	019b      	lsls	r3, r3, #6
 8005cca:	f043 0220 	orr.w	r2, r3, #32
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	3301      	adds	r3, #1
 8005cd6:	60fb      	str	r3, [r7, #12]
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	4a09      	ldr	r2, [pc, #36]	; (8005d00 <USB_FlushTxFifo+0x48>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d901      	bls.n	8005ce4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005ce0:	2303      	movs	r3, #3
 8005ce2:	e006      	b.n	8005cf2 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	691b      	ldr	r3, [r3, #16]
 8005ce8:	f003 0320 	and.w	r3, r3, #32
 8005cec:	2b20      	cmp	r3, #32
 8005cee:	d0f0      	beq.n	8005cd2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005cf0:	2300      	movs	r3, #0
}
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	3714      	adds	r7, #20
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfc:	4770      	bx	lr
 8005cfe:	bf00      	nop
 8005d00:	00030d40 	.word	0x00030d40

08005d04 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005d04:	b480      	push	{r7}
 8005d06:	b085      	sub	sp, #20
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2210      	movs	r2, #16
 8005d14:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	3301      	adds	r3, #1
 8005d1a:	60fb      	str	r3, [r7, #12]
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	4a09      	ldr	r2, [pc, #36]	; (8005d44 <USB_FlushRxFifo+0x40>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d901      	bls.n	8005d28 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005d24:	2303      	movs	r3, #3
 8005d26:	e006      	b.n	8005d36 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	691b      	ldr	r3, [r3, #16]
 8005d2c:	f003 0310 	and.w	r3, r3, #16
 8005d30:	2b10      	cmp	r3, #16
 8005d32:	d0f0      	beq.n	8005d16 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005d34:	2300      	movs	r3, #0
}
 8005d36:	4618      	mov	r0, r3
 8005d38:	3714      	adds	r7, #20
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d40:	4770      	bx	lr
 8005d42:	bf00      	nop
 8005d44:	00030d40 	.word	0x00030d40

08005d48 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b089      	sub	sp, #36	; 0x24
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	60f8      	str	r0, [r7, #12]
 8005d50:	60b9      	str	r1, [r7, #8]
 8005d52:	4611      	mov	r1, r2
 8005d54:	461a      	mov	r2, r3
 8005d56:	460b      	mov	r3, r1
 8005d58:	71fb      	strb	r3, [r7, #7]
 8005d5a:	4613      	mov	r3, r2
 8005d5c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8005d66:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d11a      	bne.n	8005da4 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005d6e:	88bb      	ldrh	r3, [r7, #4]
 8005d70:	3303      	adds	r3, #3
 8005d72:	089b      	lsrs	r3, r3, #2
 8005d74:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005d76:	2300      	movs	r3, #0
 8005d78:	61bb      	str	r3, [r7, #24]
 8005d7a:	e00f      	b.n	8005d9c <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005d7c:	79fb      	ldrb	r3, [r7, #7]
 8005d7e:	031a      	lsls	r2, r3, #12
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	4413      	add	r3, r2
 8005d84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d88:	461a      	mov	r2, r3
 8005d8a:	69fb      	ldr	r3, [r7, #28]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005d90:	69fb      	ldr	r3, [r7, #28]
 8005d92:	3304      	adds	r3, #4
 8005d94:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005d96:	69bb      	ldr	r3, [r7, #24]
 8005d98:	3301      	adds	r3, #1
 8005d9a:	61bb      	str	r3, [r7, #24]
 8005d9c:	69ba      	ldr	r2, [r7, #24]
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	429a      	cmp	r2, r3
 8005da2:	d3eb      	bcc.n	8005d7c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005da4:	2300      	movs	r3, #0
}
 8005da6:	4618      	mov	r0, r3
 8005da8:	3724      	adds	r7, #36	; 0x24
 8005daa:	46bd      	mov	sp, r7
 8005dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db0:	4770      	bx	lr

08005db2 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005db2:	b480      	push	{r7}
 8005db4:	b089      	sub	sp, #36	; 0x24
 8005db6:	af00      	add	r7, sp, #0
 8005db8:	60f8      	str	r0, [r7, #12]
 8005dba:	60b9      	str	r1, [r7, #8]
 8005dbc:	4613      	mov	r3, r2
 8005dbe:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8005dc8:	88fb      	ldrh	r3, [r7, #6]
 8005dca:	3303      	adds	r3, #3
 8005dcc:	089b      	lsrs	r3, r3, #2
 8005dce:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	61bb      	str	r3, [r7, #24]
 8005dd4:	e00b      	b.n	8005dee <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ddc:	681a      	ldr	r2, [r3, #0]
 8005dde:	69fb      	ldr	r3, [r7, #28]
 8005de0:	601a      	str	r2, [r3, #0]
    pDest++;
 8005de2:	69fb      	ldr	r3, [r7, #28]
 8005de4:	3304      	adds	r3, #4
 8005de6:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005de8:	69bb      	ldr	r3, [r7, #24]
 8005dea:	3301      	adds	r3, #1
 8005dec:	61bb      	str	r3, [r7, #24]
 8005dee:	69ba      	ldr	r2, [r7, #24]
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	429a      	cmp	r2, r3
 8005df4:	d3ef      	bcc.n	8005dd6 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8005df6:	69fb      	ldr	r3, [r7, #28]
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	3724      	adds	r7, #36	; 0x24
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e02:	4770      	bx	lr

08005e04 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b085      	sub	sp, #20
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	695b      	ldr	r3, [r3, #20]
 8005e10:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	699b      	ldr	r3, [r3, #24]
 8005e16:	68fa      	ldr	r2, [r7, #12]
 8005e18:	4013      	ands	r3, r2
 8005e1a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
}
 8005e1e:	4618      	mov	r0, r3
 8005e20:	3714      	adds	r7, #20
 8005e22:	46bd      	mov	sp, r7
 8005e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e28:	4770      	bx	lr

08005e2a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005e2a:	b480      	push	{r7}
 8005e2c:	b083      	sub	sp, #12
 8005e2e:	af00      	add	r7, sp, #0
 8005e30:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	695b      	ldr	r3, [r3, #20]
 8005e36:	f003 0301 	and.w	r3, r3, #1
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	370c      	adds	r7, #12
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e44:	4770      	bx	lr
	...

08005e48 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b085      	sub	sp, #20
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005e50:	2300      	movs	r3, #0
 8005e52:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	3301      	adds	r3, #1
 8005e58:	60fb      	str	r3, [r7, #12]
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	4a13      	ldr	r2, [pc, #76]	; (8005eac <USB_CoreReset+0x64>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d901      	bls.n	8005e66 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005e62:	2303      	movs	r3, #3
 8005e64:	e01b      	b.n	8005e9e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	691b      	ldr	r3, [r3, #16]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	daf2      	bge.n	8005e54 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005e6e:	2300      	movs	r3, #0
 8005e70:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	691b      	ldr	r3, [r3, #16]
 8005e76:	f043 0201 	orr.w	r2, r3, #1
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	3301      	adds	r3, #1
 8005e82:	60fb      	str	r3, [r7, #12]
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	4a09      	ldr	r2, [pc, #36]	; (8005eac <USB_CoreReset+0x64>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d901      	bls.n	8005e90 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005e8c:	2303      	movs	r3, #3
 8005e8e:	e006      	b.n	8005e9e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	691b      	ldr	r3, [r3, #16]
 8005e94:	f003 0301 	and.w	r3, r3, #1
 8005e98:	2b01      	cmp	r3, #1
 8005e9a:	d0f0      	beq.n	8005e7e <USB_CoreReset+0x36>

  return HAL_OK;
 8005e9c:	2300      	movs	r3, #0
}
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	3714      	adds	r7, #20
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea8:	4770      	bx	lr
 8005eaa:	bf00      	nop
 8005eac:	00030d40 	.word	0x00030d40

08005eb0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005eb0:	b084      	sub	sp, #16
 8005eb2:	b580      	push	{r7, lr}
 8005eb4:	b084      	sub	sp, #16
 8005eb6:	af00      	add	r7, sp, #0
 8005eb8:	6078      	str	r0, [r7, #4]
 8005eba:	f107 001c 	add.w	r0, r7, #28
 8005ebe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005ecc:	461a      	mov	r2, r3
 8005ece:	2300      	movs	r3, #0
 8005ed0:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ed6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ee2:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eee:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005efa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d018      	beq.n	8005f34 <USB_HostInit+0x84>
  {
    if (cfg.speed == USB_OTG_SPEED_FULL)
 8005f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f04:	2b03      	cmp	r3, #3
 8005f06:	d10a      	bne.n	8005f1e <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	68ba      	ldr	r2, [r7, #8]
 8005f12:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005f16:	f043 0304 	orr.w	r3, r3, #4
 8005f1a:	6013      	str	r3, [r2, #0]
 8005f1c:	e014      	b.n	8005f48 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	68ba      	ldr	r2, [r7, #8]
 8005f28:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005f2c:	f023 0304 	bic.w	r3, r3, #4
 8005f30:	6013      	str	r3, [r2, #0]
 8005f32:	e009      	b.n	8005f48 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	68ba      	ldr	r2, [r7, #8]
 8005f3e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005f42:	f023 0304 	bic.w	r3, r3, #4
 8005f46:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8005f48:	2110      	movs	r1, #16
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f7ff feb4 	bl	8005cb8 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	f7ff fed7 	bl	8005d04 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005f56:	2300      	movs	r3, #0
 8005f58:	60fb      	str	r3, [r7, #12]
 8005f5a:	e015      	b.n	8005f88 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	015a      	lsls	r2, r3, #5
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	4413      	add	r3, r2
 8005f64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f68:	461a      	mov	r2, r3
 8005f6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005f6e:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	015a      	lsls	r2, r3, #5
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	4413      	add	r3, r2
 8005f78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f7c:	461a      	mov	r2, r3
 8005f7e:	2300      	movs	r3, #0
 8005f80:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	3301      	adds	r3, #1
 8005f86:	60fb      	str	r3, [r7, #12]
 8005f88:	6a3b      	ldr	r3, [r7, #32]
 8005f8a:	68fa      	ldr	r2, [r7, #12]
 8005f8c:	429a      	cmp	r2, r3
 8005f8e:	d3e5      	bcc.n	8005f5c <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8005f90:	2101      	movs	r1, #1
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f000 f8ac 	bl	80060f0 <USB_DriveVbus>

  HAL_Delay(200U);
 8005f98:	20c8      	movs	r0, #200	; 0xc8
 8005f9a:	f7fa faeb 	bl	8000574 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005faa:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d00b      	beq.n	8005fd0 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005fbe:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	4a14      	ldr	r2, [pc, #80]	; (8006014 <USB_HostInit+0x164>)
 8005fc4:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	4a13      	ldr	r2, [pc, #76]	; (8006018 <USB_HostInit+0x168>)
 8005fca:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005fce:	e009      	b.n	8005fe4 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2280      	movs	r2, #128	; 0x80
 8005fd4:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	4a10      	ldr	r2, [pc, #64]	; (800601c <USB_HostInit+0x16c>)
 8005fda:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	4a10      	ldr	r2, [pc, #64]	; (8006020 <USB_HostInit+0x170>)
 8005fe0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d105      	bne.n	8005ff6 <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	699b      	ldr	r3, [r3, #24]
 8005fee:	f043 0210 	orr.w	r2, r3, #16
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	699a      	ldr	r2, [r3, #24]
 8005ffa:	4b0a      	ldr	r3, [pc, #40]	; (8006024 <USB_HostInit+0x174>)
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	687a      	ldr	r2, [r7, #4]
 8006000:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8006002:	2300      	movs	r3, #0
}
 8006004:	4618      	mov	r0, r3
 8006006:	3710      	adds	r7, #16
 8006008:	46bd      	mov	sp, r7
 800600a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800600e:	b004      	add	sp, #16
 8006010:	4770      	bx	lr
 8006012:	bf00      	nop
 8006014:	01000200 	.word	0x01000200
 8006018:	00e00300 	.word	0x00e00300
 800601c:	00600080 	.word	0x00600080
 8006020:	004000e0 	.word	0x004000e0
 8006024:	a3200008 	.word	0xa3200008

08006028 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006028:	b480      	push	{r7}
 800602a:	b085      	sub	sp, #20
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
 8006030:	460b      	mov	r3, r1
 8006032:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	68fa      	ldr	r2, [r7, #12]
 8006042:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006046:	f023 0303 	bic.w	r3, r3, #3
 800604a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006052:	681a      	ldr	r2, [r3, #0]
 8006054:	78fb      	ldrb	r3, [r7, #3]
 8006056:	f003 0303 	and.w	r3, r3, #3
 800605a:	68f9      	ldr	r1, [r7, #12]
 800605c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006060:	4313      	orrs	r3, r2
 8006062:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006064:	78fb      	ldrb	r3, [r7, #3]
 8006066:	2b01      	cmp	r3, #1
 8006068:	d107      	bne.n	800607a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006070:	461a      	mov	r2, r3
 8006072:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006076:	6053      	str	r3, [r2, #4]
 8006078:	e009      	b.n	800608e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800607a:	78fb      	ldrb	r3, [r7, #3]
 800607c:	2b02      	cmp	r3, #2
 800607e:	d106      	bne.n	800608e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006086:	461a      	mov	r2, r3
 8006088:	f241 7370 	movw	r3, #6000	; 0x1770
 800608c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800608e:	2300      	movs	r3, #0
}
 8006090:	4618      	mov	r0, r3
 8006092:	3714      	adds	r7, #20
 8006094:	46bd      	mov	sp, r7
 8006096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609a:	4770      	bx	lr

0800609c <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b084      	sub	sp, #16
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80060a8:	2300      	movs	r3, #0
 80060aa:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80060bc:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	68fa      	ldr	r2, [r7, #12]
 80060c2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80060c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060ca:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80060cc:	2064      	movs	r0, #100	; 0x64
 80060ce:	f7fa fa51 	bl	8000574 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	68fa      	ldr	r2, [r7, #12]
 80060d6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80060da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80060de:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80060e0:	200a      	movs	r0, #10
 80060e2:	f7fa fa47 	bl	8000574 <HAL_Delay>

  return HAL_OK;
 80060e6:	2300      	movs	r3, #0
}
 80060e8:	4618      	mov	r0, r3
 80060ea:	3710      	adds	r7, #16
 80060ec:	46bd      	mov	sp, r7
 80060ee:	bd80      	pop	{r7, pc}

080060f0 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80060f0:	b480      	push	{r7}
 80060f2:	b085      	sub	sp, #20
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
 80060f8:	460b      	mov	r3, r1
 80060fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006100:	2300      	movs	r3, #0
 8006102:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006114:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800611c:	2b00      	cmp	r3, #0
 800611e:	d109      	bne.n	8006134 <USB_DriveVbus+0x44>
 8006120:	78fb      	ldrb	r3, [r7, #3]
 8006122:	2b01      	cmp	r3, #1
 8006124:	d106      	bne.n	8006134 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	68fa      	ldr	r2, [r7, #12]
 800612a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800612e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006132:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800613a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800613e:	d109      	bne.n	8006154 <USB_DriveVbus+0x64>
 8006140:	78fb      	ldrb	r3, [r7, #3]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d106      	bne.n	8006154 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	68fa      	ldr	r2, [r7, #12]
 800614a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800614e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006152:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006154:	2300      	movs	r3, #0
}
 8006156:	4618      	mov	r0, r3
 8006158:	3714      	adds	r7, #20
 800615a:	46bd      	mov	sp, r7
 800615c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006160:	4770      	bx	lr

08006162 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006162:	b480      	push	{r7}
 8006164:	b085      	sub	sp, #20
 8006166:	af00      	add	r7, sp, #0
 8006168:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800616e:	2300      	movs	r3, #0
 8006170:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	0c5b      	lsrs	r3, r3, #17
 8006180:	f003 0303 	and.w	r3, r3, #3
}
 8006184:	4618      	mov	r0, r3
 8006186:	3714      	adds	r7, #20
 8006188:	46bd      	mov	sp, r7
 800618a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618e:	4770      	bx	lr

08006190 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8006190:	b480      	push	{r7}
 8006192:	b085      	sub	sp, #20
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80061a2:	689b      	ldr	r3, [r3, #8]
 80061a4:	b29b      	uxth	r3, r3
}
 80061a6:	4618      	mov	r0, r3
 80061a8:	3714      	adds	r7, #20
 80061aa:	46bd      	mov	sp, r7
 80061ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b0:	4770      	bx	lr
	...

080061b4 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 80061b4:	b480      	push	{r7}
 80061b6:	b087      	sub	sp, #28
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
 80061bc:	4608      	mov	r0, r1
 80061be:	4611      	mov	r1, r2
 80061c0:	461a      	mov	r2, r3
 80061c2:	4603      	mov	r3, r0
 80061c4:	70fb      	strb	r3, [r7, #3]
 80061c6:	460b      	mov	r3, r1
 80061c8:	70bb      	strb	r3, [r7, #2]
 80061ca:	4613      	mov	r3, r2
 80061cc:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80061ce:	2300      	movs	r3, #0
 80061d0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80061d6:	78fb      	ldrb	r3, [r7, #3]
 80061d8:	015a      	lsls	r2, r3, #5
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	4413      	add	r3, r2
 80061de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061e2:	461a      	mov	r2, r3
 80061e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80061e8:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80061ea:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80061ee:	2b03      	cmp	r3, #3
 80061f0:	d87e      	bhi.n	80062f0 <USB_HC_Init+0x13c>
 80061f2:	a201      	add	r2, pc, #4	; (adr r2, 80061f8 <USB_HC_Init+0x44>)
 80061f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061f8:	08006209 	.word	0x08006209
 80061fc:	080062b3 	.word	0x080062b3
 8006200:	08006209 	.word	0x08006209
 8006204:	08006275 	.word	0x08006275
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006208:	78fb      	ldrb	r3, [r7, #3]
 800620a:	015a      	lsls	r2, r3, #5
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	4413      	add	r3, r2
 8006210:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006214:	461a      	mov	r2, r3
 8006216:	f240 439d 	movw	r3, #1181	; 0x49d
 800621a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800621c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006220:	2b00      	cmp	r3, #0
 8006222:	da10      	bge.n	8006246 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006224:	78fb      	ldrb	r3, [r7, #3]
 8006226:	015a      	lsls	r2, r3, #5
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	4413      	add	r3, r2
 800622c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006230:	68db      	ldr	r3, [r3, #12]
 8006232:	78fa      	ldrb	r2, [r7, #3]
 8006234:	0151      	lsls	r1, r2, #5
 8006236:	68ba      	ldr	r2, [r7, #8]
 8006238:	440a      	add	r2, r1
 800623a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800623e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006242:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8006244:	e057      	b.n	80062f6 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800624a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800624e:	2b00      	cmp	r3, #0
 8006250:	d051      	beq.n	80062f6 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8006252:	78fb      	ldrb	r3, [r7, #3]
 8006254:	015a      	lsls	r2, r3, #5
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	4413      	add	r3, r2
 800625a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800625e:	68db      	ldr	r3, [r3, #12]
 8006260:	78fa      	ldrb	r2, [r7, #3]
 8006262:	0151      	lsls	r1, r2, #5
 8006264:	68ba      	ldr	r2, [r7, #8]
 8006266:	440a      	add	r2, r1
 8006268:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800626c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006270:	60d3      	str	r3, [r2, #12]
      break;
 8006272:	e040      	b.n	80062f6 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006274:	78fb      	ldrb	r3, [r7, #3]
 8006276:	015a      	lsls	r2, r3, #5
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	4413      	add	r3, r2
 800627c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006280:	461a      	mov	r2, r3
 8006282:	f240 639d 	movw	r3, #1693	; 0x69d
 8006286:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006288:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800628c:	2b00      	cmp	r3, #0
 800628e:	da34      	bge.n	80062fa <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006290:	78fb      	ldrb	r3, [r7, #3]
 8006292:	015a      	lsls	r2, r3, #5
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	4413      	add	r3, r2
 8006298:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800629c:	68db      	ldr	r3, [r3, #12]
 800629e:	78fa      	ldrb	r2, [r7, #3]
 80062a0:	0151      	lsls	r1, r2, #5
 80062a2:	68ba      	ldr	r2, [r7, #8]
 80062a4:	440a      	add	r2, r1
 80062a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80062aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062ae:	60d3      	str	r3, [r2, #12]
      }

      break;
 80062b0:	e023      	b.n	80062fa <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80062b2:	78fb      	ldrb	r3, [r7, #3]
 80062b4:	015a      	lsls	r2, r3, #5
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	4413      	add	r3, r2
 80062ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062be:	461a      	mov	r2, r3
 80062c0:	f240 2325 	movw	r3, #549	; 0x225
 80062c4:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80062c6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	da17      	bge.n	80062fe <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80062ce:	78fb      	ldrb	r3, [r7, #3]
 80062d0:	015a      	lsls	r2, r3, #5
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	4413      	add	r3, r2
 80062d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062da:	68db      	ldr	r3, [r3, #12]
 80062dc:	78fa      	ldrb	r2, [r7, #3]
 80062de:	0151      	lsls	r1, r2, #5
 80062e0:	68ba      	ldr	r2, [r7, #8]
 80062e2:	440a      	add	r2, r1
 80062e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80062e8:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80062ec:	60d3      	str	r3, [r2, #12]
      }
      break;
 80062ee:	e006      	b.n	80062fe <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80062f0:	2301      	movs	r3, #1
 80062f2:	75fb      	strb	r3, [r7, #23]
      break;
 80062f4:	e004      	b.n	8006300 <USB_HC_Init+0x14c>
      break;
 80062f6:	bf00      	nop
 80062f8:	e002      	b.n	8006300 <USB_HC_Init+0x14c>
      break;
 80062fa:	bf00      	nop
 80062fc:	e000      	b.n	8006300 <USB_HC_Init+0x14c>
      break;
 80062fe:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006306:	699a      	ldr	r2, [r3, #24]
 8006308:	78fb      	ldrb	r3, [r7, #3]
 800630a:	f003 030f 	and.w	r3, r3, #15
 800630e:	2101      	movs	r1, #1
 8006310:	fa01 f303 	lsl.w	r3, r1, r3
 8006314:	68b9      	ldr	r1, [r7, #8]
 8006316:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800631a:	4313      	orrs	r3, r2
 800631c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	699b      	ldr	r3, [r3, #24]
 8006322:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800632a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800632e:	2b00      	cmp	r3, #0
 8006330:	da03      	bge.n	800633a <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8006332:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006336:	613b      	str	r3, [r7, #16]
 8006338:	e001      	b.n	800633e <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800633a:	2300      	movs	r3, #0
 800633c:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 800633e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006342:	2b02      	cmp	r3, #2
 8006344:	d103      	bne.n	800634e <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006346:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800634a:	60fb      	str	r3, [r7, #12]
 800634c:	e001      	b.n	8006352 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800634e:	2300      	movs	r3, #0
 8006350:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006352:	787b      	ldrb	r3, [r7, #1]
 8006354:	059b      	lsls	r3, r3, #22
 8006356:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800635a:	78bb      	ldrb	r3, [r7, #2]
 800635c:	02db      	lsls	r3, r3, #11
 800635e:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006362:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006364:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006368:	049b      	lsls	r3, r3, #18
 800636a:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800636e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006370:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006372:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006376:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006378:	693b      	ldr	r3, [r7, #16]
 800637a:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800637c:	78fb      	ldrb	r3, [r7, #3]
 800637e:	0159      	lsls	r1, r3, #5
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	440b      	add	r3, r1
 8006384:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006388:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800638e:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8006390:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006394:	2b03      	cmp	r3, #3
 8006396:	d10f      	bne.n	80063b8 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8006398:	78fb      	ldrb	r3, [r7, #3]
 800639a:	015a      	lsls	r2, r3, #5
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	4413      	add	r3, r2
 80063a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	78fa      	ldrb	r2, [r7, #3]
 80063a8:	0151      	lsls	r1, r2, #5
 80063aa:	68ba      	ldr	r2, [r7, #8]
 80063ac:	440a      	add	r2, r1
 80063ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80063b2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80063b6:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80063b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	371c      	adds	r7, #28
 80063be:	46bd      	mov	sp, r7
 80063c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c4:	4770      	bx	lr
 80063c6:	bf00      	nop

080063c8 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b08c      	sub	sp, #48	; 0x30
 80063cc:	af02      	add	r7, sp, #8
 80063ce:	60f8      	str	r0, [r7, #12]
 80063d0:	60b9      	str	r1, [r7, #8]
 80063d2:	4613      	mov	r3, r2
 80063d4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	785b      	ldrb	r3, [r3, #1]
 80063de:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80063e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80063e4:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d028      	beq.n	8006444 <USB_HC_StartXfer+0x7c>
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	791b      	ldrb	r3, [r3, #4]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d124      	bne.n	8006444 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 80063fa:	79fb      	ldrb	r3, [r7, #7]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d10b      	bne.n	8006418 <USB_HC_StartXfer+0x50>
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	795b      	ldrb	r3, [r3, #5]
 8006404:	2b01      	cmp	r3, #1
 8006406:	d107      	bne.n	8006418 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	785b      	ldrb	r3, [r3, #1]
 800640c:	4619      	mov	r1, r3
 800640e:	68f8      	ldr	r0, [r7, #12]
 8006410:	f000 fa2e 	bl	8006870 <USB_DoPing>
      return HAL_OK;
 8006414:	2300      	movs	r3, #0
 8006416:	e112      	b.n	800663e <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 8006418:	79fb      	ldrb	r3, [r7, #7]
 800641a:	2b01      	cmp	r3, #1
 800641c:	d112      	bne.n	8006444 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800641e:	69fb      	ldr	r3, [r7, #28]
 8006420:	015a      	lsls	r2, r3, #5
 8006422:	6a3b      	ldr	r3, [r7, #32]
 8006424:	4413      	add	r3, r2
 8006426:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800642a:	68db      	ldr	r3, [r3, #12]
 800642c:	69fa      	ldr	r2, [r7, #28]
 800642e:	0151      	lsls	r1, r2, #5
 8006430:	6a3a      	ldr	r2, [r7, #32]
 8006432:	440a      	add	r2, r1
 8006434:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006438:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800643c:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	2200      	movs	r2, #0
 8006442:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	691b      	ldr	r3, [r3, #16]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d018      	beq.n	800647e <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	691b      	ldr	r3, [r3, #16]
 8006450:	68ba      	ldr	r2, [r7, #8]
 8006452:	8912      	ldrh	r2, [r2, #8]
 8006454:	4413      	add	r3, r2
 8006456:	3b01      	subs	r3, #1
 8006458:	68ba      	ldr	r2, [r7, #8]
 800645a:	8912      	ldrh	r2, [r2, #8]
 800645c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006460:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8006462:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006464:	8b7b      	ldrh	r3, [r7, #26]
 8006466:	429a      	cmp	r2, r3
 8006468:	d90b      	bls.n	8006482 <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 800646a:	8b7b      	ldrh	r3, [r7, #26]
 800646c:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800646e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006470:	68ba      	ldr	r2, [r7, #8]
 8006472:	8912      	ldrh	r2, [r2, #8]
 8006474:	fb02 f203 	mul.w	r2, r2, r3
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	611a      	str	r2, [r3, #16]
 800647c:	e001      	b.n	8006482 <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 800647e:	2301      	movs	r3, #1
 8006480:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	78db      	ldrb	r3, [r3, #3]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d006      	beq.n	8006498 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800648a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800648c:	68ba      	ldr	r2, [r7, #8]
 800648e:	8912      	ldrh	r2, [r2, #8]
 8006490:	fb02 f203 	mul.w	r2, r2, r3
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	691b      	ldr	r3, [r3, #16]
 800649c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80064a0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80064a2:	04d9      	lsls	r1, r3, #19
 80064a4:	4b68      	ldr	r3, [pc, #416]	; (8006648 <USB_HC_StartXfer+0x280>)
 80064a6:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80064a8:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	7a9b      	ldrb	r3, [r3, #10]
 80064ae:	075b      	lsls	r3, r3, #29
 80064b0:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80064b4:	69f9      	ldr	r1, [r7, #28]
 80064b6:	0148      	lsls	r0, r1, #5
 80064b8:	6a39      	ldr	r1, [r7, #32]
 80064ba:	4401      	add	r1, r0
 80064bc:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80064c0:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80064c2:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80064c4:	79fb      	ldrb	r3, [r7, #7]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d009      	beq.n	80064de <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80064ca:	68bb      	ldr	r3, [r7, #8]
 80064cc:	68d9      	ldr	r1, [r3, #12]
 80064ce:	69fb      	ldr	r3, [r7, #28]
 80064d0:	015a      	lsls	r2, r3, #5
 80064d2:	6a3b      	ldr	r3, [r7, #32]
 80064d4:	4413      	add	r3, r2
 80064d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064da:	460a      	mov	r2, r1
 80064dc:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80064de:	6a3b      	ldr	r3, [r7, #32]
 80064e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80064e4:	689b      	ldr	r3, [r3, #8]
 80064e6:	f003 0301 	and.w	r3, r3, #1
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	bf0c      	ite	eq
 80064ee:	2301      	moveq	r3, #1
 80064f0:	2300      	movne	r3, #0
 80064f2:	b2db      	uxtb	r3, r3
 80064f4:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80064f6:	69fb      	ldr	r3, [r7, #28]
 80064f8:	015a      	lsls	r2, r3, #5
 80064fa:	6a3b      	ldr	r3, [r7, #32]
 80064fc:	4413      	add	r3, r2
 80064fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	69fa      	ldr	r2, [r7, #28]
 8006506:	0151      	lsls	r1, r2, #5
 8006508:	6a3a      	ldr	r2, [r7, #32]
 800650a:	440a      	add	r2, r1
 800650c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006510:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006514:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006516:	69fb      	ldr	r3, [r7, #28]
 8006518:	015a      	lsls	r2, r3, #5
 800651a:	6a3b      	ldr	r3, [r7, #32]
 800651c:	4413      	add	r3, r2
 800651e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006522:	681a      	ldr	r2, [r3, #0]
 8006524:	7e7b      	ldrb	r3, [r7, #25]
 8006526:	075b      	lsls	r3, r3, #29
 8006528:	69f9      	ldr	r1, [r7, #28]
 800652a:	0148      	lsls	r0, r1, #5
 800652c:	6a39      	ldr	r1, [r7, #32]
 800652e:	4401      	add	r1, r0
 8006530:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006534:	4313      	orrs	r3, r2
 8006536:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006538:	69fb      	ldr	r3, [r7, #28]
 800653a:	015a      	lsls	r2, r3, #5
 800653c:	6a3b      	ldr	r3, [r7, #32]
 800653e:	4413      	add	r3, r2
 8006540:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4a41      	ldr	r2, [pc, #260]	; (800664c <USB_HC_StartXfer+0x284>)
 8006548:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800654a:	4b40      	ldr	r3, [pc, #256]	; (800664c <USB_HC_StartXfer+0x284>)
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006552:	4a3e      	ldr	r2, [pc, #248]	; (800664c <USB_HC_StartXfer+0x284>)
 8006554:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	78db      	ldrb	r3, [r3, #3]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d006      	beq.n	800656c <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800655e:	4b3b      	ldr	r3, [pc, #236]	; (800664c <USB_HC_StartXfer+0x284>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006566:	4a39      	ldr	r2, [pc, #228]	; (800664c <USB_HC_StartXfer+0x284>)
 8006568:	6013      	str	r3, [r2, #0]
 800656a:	e005      	b.n	8006578 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800656c:	4b37      	ldr	r3, [pc, #220]	; (800664c <USB_HC_StartXfer+0x284>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006574:	4a35      	ldr	r2, [pc, #212]	; (800664c <USB_HC_StartXfer+0x284>)
 8006576:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006578:	4b34      	ldr	r3, [pc, #208]	; (800664c <USB_HC_StartXfer+0x284>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006580:	4a32      	ldr	r2, [pc, #200]	; (800664c <USB_HC_StartXfer+0x284>)
 8006582:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006584:	69fb      	ldr	r3, [r7, #28]
 8006586:	015a      	lsls	r2, r3, #5
 8006588:	6a3b      	ldr	r3, [r7, #32]
 800658a:	4413      	add	r3, r2
 800658c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006590:	461a      	mov	r2, r3
 8006592:	4b2e      	ldr	r3, [pc, #184]	; (800664c <USB_HC_StartXfer+0x284>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 8006598:	79fb      	ldrb	r3, [r7, #7]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d14e      	bne.n	800663c <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800659e:	68bb      	ldr	r3, [r7, #8]
 80065a0:	78db      	ldrb	r3, [r3, #3]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d14a      	bne.n	800663c <USB_HC_StartXfer+0x274>
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	691b      	ldr	r3, [r3, #16]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d046      	beq.n	800663c <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	79db      	ldrb	r3, [r3, #7]
 80065b2:	2b03      	cmp	r3, #3
 80065b4:	d830      	bhi.n	8006618 <USB_HC_StartXfer+0x250>
 80065b6:	a201      	add	r2, pc, #4	; (adr r2, 80065bc <USB_HC_StartXfer+0x1f4>)
 80065b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065bc:	080065cd 	.word	0x080065cd
 80065c0:	080065f1 	.word	0x080065f1
 80065c4:	080065cd 	.word	0x080065cd
 80065c8:	080065f1 	.word	0x080065f1
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	691b      	ldr	r3, [r3, #16]
 80065d0:	3303      	adds	r3, #3
 80065d2:	089b      	lsrs	r3, r3, #2
 80065d4:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80065d6:	8afa      	ldrh	r2, [r7, #22]
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065dc:	b29b      	uxth	r3, r3
 80065de:	429a      	cmp	r2, r3
 80065e0:	d91c      	bls.n	800661c <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	699b      	ldr	r3, [r3, #24]
 80065e6:	f043 0220 	orr.w	r2, r3, #32
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	619a      	str	r2, [r3, #24]
          }
          break;
 80065ee:	e015      	b.n	800661c <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	691b      	ldr	r3, [r3, #16]
 80065f4:	3303      	adds	r3, #3
 80065f6:	089b      	lsrs	r3, r3, #2
 80065f8:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80065fa:	8afa      	ldrh	r2, [r7, #22]
 80065fc:	6a3b      	ldr	r3, [r7, #32]
 80065fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006602:	691b      	ldr	r3, [r3, #16]
 8006604:	b29b      	uxth	r3, r3
 8006606:	429a      	cmp	r2, r3
 8006608:	d90a      	bls.n	8006620 <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	699b      	ldr	r3, [r3, #24]
 800660e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	619a      	str	r2, [r3, #24]
          }
          break;
 8006616:	e003      	b.n	8006620 <USB_HC_StartXfer+0x258>

        default:
          break;
 8006618:	bf00      	nop
 800661a:	e002      	b.n	8006622 <USB_HC_StartXfer+0x25a>
          break;
 800661c:	bf00      	nop
 800661e:	e000      	b.n	8006622 <USB_HC_StartXfer+0x25a>
          break;
 8006620:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	68d9      	ldr	r1, [r3, #12]
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	785a      	ldrb	r2, [r3, #1]
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	691b      	ldr	r3, [r3, #16]
 800662e:	b298      	uxth	r0, r3
 8006630:	2300      	movs	r3, #0
 8006632:	9300      	str	r3, [sp, #0]
 8006634:	4603      	mov	r3, r0
 8006636:	68f8      	ldr	r0, [r7, #12]
 8006638:	f7ff fb86 	bl	8005d48 <USB_WritePacket>
    }
  }

  return HAL_OK;
 800663c:	2300      	movs	r3, #0
}
 800663e:	4618      	mov	r0, r3
 8006640:	3728      	adds	r7, #40	; 0x28
 8006642:	46bd      	mov	sp, r7
 8006644:	bd80      	pop	{r7, pc}
 8006646:	bf00      	nop
 8006648:	1ff80000 	.word	0x1ff80000
 800664c:	200000bc 	.word	0x200000bc

08006650 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006650:	b480      	push	{r7}
 8006652:	b085      	sub	sp, #20
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006662:	695b      	ldr	r3, [r3, #20]
 8006664:	b29b      	uxth	r3, r3
}
 8006666:	4618      	mov	r0, r3
 8006668:	3714      	adds	r7, #20
 800666a:	46bd      	mov	sp, r7
 800666c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006670:	4770      	bx	lr

08006672 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006672:	b480      	push	{r7}
 8006674:	b087      	sub	sp, #28
 8006676:	af00      	add	r7, sp, #0
 8006678:	6078      	str	r0, [r7, #4]
 800667a:	460b      	mov	r3, r1
 800667c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8006682:	78fb      	ldrb	r3, [r7, #3]
 8006684:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8006686:	2300      	movs	r3, #0
 8006688:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	015a      	lsls	r2, r3, #5
 800668e:	693b      	ldr	r3, [r7, #16]
 8006690:	4413      	add	r3, r2
 8006692:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	0c9b      	lsrs	r3, r3, #18
 800669a:	f003 0303 	and.w	r3, r3, #3
 800669e:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d002      	beq.n	80066ac <USB_HC_Halt+0x3a>
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	2b02      	cmp	r3, #2
 80066aa:	d16c      	bne.n	8006786 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	015a      	lsls	r2, r3, #5
 80066b0:	693b      	ldr	r3, [r7, #16]
 80066b2:	4413      	add	r3, r2
 80066b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	68fa      	ldr	r2, [r7, #12]
 80066bc:	0151      	lsls	r1, r2, #5
 80066be:	693a      	ldr	r2, [r7, #16]
 80066c0:	440a      	add	r2, r1
 80066c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80066c6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80066ca:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066d0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d143      	bne.n	8006760 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	015a      	lsls	r2, r3, #5
 80066dc:	693b      	ldr	r3, [r7, #16]
 80066de:	4413      	add	r3, r2
 80066e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	68fa      	ldr	r2, [r7, #12]
 80066e8:	0151      	lsls	r1, r2, #5
 80066ea:	693a      	ldr	r2, [r7, #16]
 80066ec:	440a      	add	r2, r1
 80066ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80066f2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80066f6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	015a      	lsls	r2, r3, #5
 80066fc:	693b      	ldr	r3, [r7, #16]
 80066fe:	4413      	add	r3, r2
 8006700:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	68fa      	ldr	r2, [r7, #12]
 8006708:	0151      	lsls	r1, r2, #5
 800670a:	693a      	ldr	r2, [r7, #16]
 800670c:	440a      	add	r2, r1
 800670e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006712:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006716:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	015a      	lsls	r2, r3, #5
 800671c:	693b      	ldr	r3, [r7, #16]
 800671e:	4413      	add	r3, r2
 8006720:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	68fa      	ldr	r2, [r7, #12]
 8006728:	0151      	lsls	r1, r2, #5
 800672a:	693a      	ldr	r2, [r7, #16]
 800672c:	440a      	add	r2, r1
 800672e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006732:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006736:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8006738:	697b      	ldr	r3, [r7, #20]
 800673a:	3301      	adds	r3, #1
 800673c:	617b      	str	r3, [r7, #20]
 800673e:	697b      	ldr	r3, [r7, #20]
 8006740:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006744:	d81d      	bhi.n	8006782 <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	015a      	lsls	r2, r3, #5
 800674a:	693b      	ldr	r3, [r7, #16]
 800674c:	4413      	add	r3, r2
 800674e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006758:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800675c:	d0ec      	beq.n	8006738 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800675e:	e080      	b.n	8006862 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	015a      	lsls	r2, r3, #5
 8006764:	693b      	ldr	r3, [r7, #16]
 8006766:	4413      	add	r3, r2
 8006768:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	68fa      	ldr	r2, [r7, #12]
 8006770:	0151      	lsls	r1, r2, #5
 8006772:	693a      	ldr	r2, [r7, #16]
 8006774:	440a      	add	r2, r1
 8006776:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800677a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800677e:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006780:	e06f      	b.n	8006862 <USB_HC_Halt+0x1f0>
          break;
 8006782:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006784:	e06d      	b.n	8006862 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	015a      	lsls	r2, r3, #5
 800678a:	693b      	ldr	r3, [r7, #16]
 800678c:	4413      	add	r3, r2
 800678e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	68fa      	ldr	r2, [r7, #12]
 8006796:	0151      	lsls	r1, r2, #5
 8006798:	693a      	ldr	r2, [r7, #16]
 800679a:	440a      	add	r2, r1
 800679c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80067a0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80067a4:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80067a6:	693b      	ldr	r3, [r7, #16]
 80067a8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80067ac:	691b      	ldr	r3, [r3, #16]
 80067ae:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d143      	bne.n	800683e <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	015a      	lsls	r2, r3, #5
 80067ba:	693b      	ldr	r3, [r7, #16]
 80067bc:	4413      	add	r3, r2
 80067be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	68fa      	ldr	r2, [r7, #12]
 80067c6:	0151      	lsls	r1, r2, #5
 80067c8:	693a      	ldr	r2, [r7, #16]
 80067ca:	440a      	add	r2, r1
 80067cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80067d0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80067d4:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	015a      	lsls	r2, r3, #5
 80067da:	693b      	ldr	r3, [r7, #16]
 80067dc:	4413      	add	r3, r2
 80067de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	68fa      	ldr	r2, [r7, #12]
 80067e6:	0151      	lsls	r1, r2, #5
 80067e8:	693a      	ldr	r2, [r7, #16]
 80067ea:	440a      	add	r2, r1
 80067ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80067f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80067f4:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	015a      	lsls	r2, r3, #5
 80067fa:	693b      	ldr	r3, [r7, #16]
 80067fc:	4413      	add	r3, r2
 80067fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	68fa      	ldr	r2, [r7, #12]
 8006806:	0151      	lsls	r1, r2, #5
 8006808:	693a      	ldr	r2, [r7, #16]
 800680a:	440a      	add	r2, r1
 800680c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006810:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006814:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8006816:	697b      	ldr	r3, [r7, #20]
 8006818:	3301      	adds	r3, #1
 800681a:	617b      	str	r3, [r7, #20]
 800681c:	697b      	ldr	r3, [r7, #20]
 800681e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006822:	d81d      	bhi.n	8006860 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	015a      	lsls	r2, r3, #5
 8006828:	693b      	ldr	r3, [r7, #16]
 800682a:	4413      	add	r3, r2
 800682c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006836:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800683a:	d0ec      	beq.n	8006816 <USB_HC_Halt+0x1a4>
 800683c:	e011      	b.n	8006862 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	015a      	lsls	r2, r3, #5
 8006842:	693b      	ldr	r3, [r7, #16]
 8006844:	4413      	add	r3, r2
 8006846:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	68fa      	ldr	r2, [r7, #12]
 800684e:	0151      	lsls	r1, r2, #5
 8006850:	693a      	ldr	r2, [r7, #16]
 8006852:	440a      	add	r2, r1
 8006854:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006858:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800685c:	6013      	str	r3, [r2, #0]
 800685e:	e000      	b.n	8006862 <USB_HC_Halt+0x1f0>
          break;
 8006860:	bf00      	nop
    }
  }

  return HAL_OK;
 8006862:	2300      	movs	r3, #0
}
 8006864:	4618      	mov	r0, r3
 8006866:	371c      	adds	r7, #28
 8006868:	46bd      	mov	sp, r7
 800686a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686e:	4770      	bx	lr

08006870 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006870:	b480      	push	{r7}
 8006872:	b087      	sub	sp, #28
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
 8006878:	460b      	mov	r3, r1
 800687a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006880:	78fb      	ldrb	r3, [r7, #3]
 8006882:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006884:	2301      	movs	r3, #1
 8006886:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	04da      	lsls	r2, r3, #19
 800688c:	4b15      	ldr	r3, [pc, #84]	; (80068e4 <USB_DoPing+0x74>)
 800688e:	4013      	ands	r3, r2
 8006890:	693a      	ldr	r2, [r7, #16]
 8006892:	0151      	lsls	r1, r2, #5
 8006894:	697a      	ldr	r2, [r7, #20]
 8006896:	440a      	add	r2, r1
 8006898:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800689c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80068a0:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80068a2:	693b      	ldr	r3, [r7, #16]
 80068a4:	015a      	lsls	r2, r3, #5
 80068a6:	697b      	ldr	r3, [r7, #20]
 80068a8:	4413      	add	r3, r2
 80068aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80068b8:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80068c0:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80068c2:	693b      	ldr	r3, [r7, #16]
 80068c4:	015a      	lsls	r2, r3, #5
 80068c6:	697b      	ldr	r3, [r7, #20]
 80068c8:	4413      	add	r3, r2
 80068ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068ce:	461a      	mov	r2, r3
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80068d4:	2300      	movs	r3, #0
}
 80068d6:	4618      	mov	r0, r3
 80068d8:	371c      	adds	r7, #28
 80068da:	46bd      	mov	sp, r7
 80068dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e0:	4770      	bx	lr
 80068e2:	bf00      	nop
 80068e4:	1ff80000 	.word	0x1ff80000

080068e8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b086      	sub	sp, #24
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80068f4:	2300      	movs	r3, #0
 80068f6:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;


  (void)USB_DisableGlobalInt(USBx);
 80068f8:	6878      	ldr	r0, [r7, #4]
 80068fa:	f7ff f9a1 	bl	8005c40 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 80068fe:	2110      	movs	r1, #16
 8006900:	6878      	ldr	r0, [r7, #4]
 8006902:	f7ff f9d9 	bl	8005cb8 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f7ff f9fc 	bl	8005d04 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800690c:	2300      	movs	r3, #0
 800690e:	613b      	str	r3, [r7, #16]
 8006910:	e01f      	b.n	8006952 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8006912:	693b      	ldr	r3, [r7, #16]
 8006914:	015a      	lsls	r2, r3, #5
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	4413      	add	r3, r2
 800691a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006928:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800692a:	68bb      	ldr	r3, [r7, #8]
 800692c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006930:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006938:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800693a:	693b      	ldr	r3, [r7, #16]
 800693c:	015a      	lsls	r2, r3, #5
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	4413      	add	r3, r2
 8006942:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006946:	461a      	mov	r2, r3
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800694c:	693b      	ldr	r3, [r7, #16]
 800694e:	3301      	adds	r3, #1
 8006950:	613b      	str	r3, [r7, #16]
 8006952:	693b      	ldr	r3, [r7, #16]
 8006954:	2b0f      	cmp	r3, #15
 8006956:	d9dc      	bls.n	8006912 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006958:	2300      	movs	r3, #0
 800695a:	613b      	str	r3, [r7, #16]
 800695c:	e034      	b.n	80069c8 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800695e:	693b      	ldr	r3, [r7, #16]
 8006960:	015a      	lsls	r2, r3, #5
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	4413      	add	r3, r2
 8006966:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006974:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8006976:	68bb      	ldr	r3, [r7, #8]
 8006978:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800697c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006984:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8006986:	693b      	ldr	r3, [r7, #16]
 8006988:	015a      	lsls	r2, r3, #5
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	4413      	add	r3, r2
 800698e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006992:	461a      	mov	r2, r3
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8006998:	697b      	ldr	r3, [r7, #20]
 800699a:	3301      	adds	r3, #1
 800699c:	617b      	str	r3, [r7, #20]
 800699e:	697b      	ldr	r3, [r7, #20]
 80069a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80069a4:	d80c      	bhi.n	80069c0 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80069a6:	693b      	ldr	r3, [r7, #16]
 80069a8:	015a      	lsls	r2, r3, #5
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	4413      	add	r3, r2
 80069ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80069b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80069bc:	d0ec      	beq.n	8006998 <USB_StopHost+0xb0>
 80069be:	e000      	b.n	80069c2 <USB_StopHost+0xda>
        break;
 80069c0:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80069c2:	693b      	ldr	r3, [r7, #16]
 80069c4:	3301      	adds	r3, #1
 80069c6:	613b      	str	r3, [r7, #16]
 80069c8:	693b      	ldr	r3, [r7, #16]
 80069ca:	2b0f      	cmp	r3, #15
 80069cc:	d9c7      	bls.n	800695e <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80069d4:	461a      	mov	r2, r3
 80069d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80069da:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80069e2:	615a      	str	r2, [r3, #20]
  (void)USB_EnableGlobalInt(USBx);
 80069e4:	6878      	ldr	r0, [r7, #4]
 80069e6:	f7ff f91a 	bl	8005c1e <USB_EnableGlobalInt>

  return HAL_OK;
 80069ea:	2300      	movs	r3, #0
}
 80069ec:	4618      	mov	r0, r3
 80069ee:	3718      	adds	r7, #24
 80069f0:	46bd      	mov	sp, r7
 80069f2:	bd80      	pop	{r7, pc}

080069f4 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit (USBH_HandleTypeDef *phost)
{
 80069f4:	b590      	push	{r4, r7, lr}
 80069f6:	b089      	sub	sp, #36	; 0x24
 80069f8:	af04      	add	r7, sp, #16
 80069fa:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status = USBH_FAIL ;
 80069fc:	2302      	movs	r3, #2
 80069fe:	73fb      	strb	r3, [r7, #15]
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost,
 8006a00:	2301      	movs	r3, #1
 8006a02:	2202      	movs	r2, #2
 8006a04:	2102      	movs	r1, #2
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f000 fc8c 	bl	8007324 <USBH_FindInterface>
 8006a0c:	4603      	mov	r3, r0
 8006a0e:	73bb      	strb	r3, [r7, #14]
                                 COMMUNICATION_INTERFACE_CLASS_CODE,
                                 ABSTRACT_CONTROL_MODEL,
                                 COMMON_AT_COMMAND);

  if(interface == 0xFFU) /* No Valid Interface */
 8006a10:	7bbb      	ldrb	r3, [r7, #14]
 8006a12:	2bff      	cmp	r3, #255	; 0xff
 8006a14:	f000 812a 	beq.w	8006c6c <USBH_CDC_InterfaceInit+0x278>
  {
    USBH_DbgLog ("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
  }
  else
  {
    USBH_SelectInterface (phost, interface);
 8006a18:	7bbb      	ldrb	r3, [r7, #14]
 8006a1a:	4619      	mov	r1, r3
 8006a1c:	6878      	ldr	r0, [r7, #4]
 8006a1e:	f000 fc65 	bl	80072ec <USBH_SelectInterface>
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	f8d3 4378 	ldr.w	r4, [r3, #888]	; 0x378
 8006a28:	2050      	movs	r0, #80	; 0x50
 8006a2a:	f006 f93f 	bl	800ccac <malloc>
 8006a2e:	4603      	mov	r3, r0
 8006a30:	61e3      	str	r3, [r4, #28]
    CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006a38:	69db      	ldr	r3, [r3, #28]
 8006a3a:	60bb      	str	r3, [r7, #8]

    /*Collect the notification endpoint address and length*/
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8006a3c:	7bbb      	ldrb	r3, [r7, #14]
 8006a3e:	687a      	ldr	r2, [r7, #4]
 8006a40:	211a      	movs	r1, #26
 8006a42:	fb01 f303 	mul.w	r3, r1, r3
 8006a46:	4413      	add	r3, r2
 8006a48:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8006a4c:	781b      	ldrb	r3, [r3, #0]
 8006a4e:	b25b      	sxtb	r3, r3
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	da15      	bge.n	8006a80 <USBH_CDC_InterfaceInit+0x8c>
    {
      CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006a54:	7bbb      	ldrb	r3, [r7, #14]
 8006a56:	687a      	ldr	r2, [r7, #4]
 8006a58:	211a      	movs	r1, #26
 8006a5a:	fb01 f303 	mul.w	r3, r1, r3
 8006a5e:	4413      	add	r3, r2
 8006a60:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8006a64:	781a      	ldrb	r2, [r3, #0]
 8006a66:	68bb      	ldr	r3, [r7, #8]
 8006a68:	705a      	strb	r2, [r3, #1]
      CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006a6a:	7bbb      	ldrb	r3, [r7, #14]
 8006a6c:	687a      	ldr	r2, [r7, #4]
 8006a6e:	211a      	movs	r1, #26
 8006a70:	fb01 f303 	mul.w	r3, r1, r3
 8006a74:	4413      	add	r3, r2
 8006a76:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8006a7a:	881a      	ldrh	r2, [r3, #0]
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	815a      	strh	r2, [r3, #10]
    }

    /*Allocate the length for host channel number in*/
    CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	785b      	ldrb	r3, [r3, #1]
 8006a84:	4619      	mov	r1, r3
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f001 ff2f 	bl	80088ea <USBH_AllocPipe>
 8006a8c:	4603      	mov	r3, r0
 8006a8e:	461a      	mov	r2, r3
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	701a      	strb	r2, [r3, #0]

    /* Open pipe for Notification endpoint */
    USBH_OpenPipe  (phost,
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	7819      	ldrb	r1, [r3, #0]
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	7858      	ldrb	r0, [r3, #1]
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006aa8:	68ba      	ldr	r2, [r7, #8]
 8006aaa:	8952      	ldrh	r2, [r2, #10]
 8006aac:	9202      	str	r2, [sp, #8]
 8006aae:	2203      	movs	r2, #3
 8006ab0:	9201      	str	r2, [sp, #4]
 8006ab2:	9300      	str	r3, [sp, #0]
 8006ab4:	4623      	mov	r3, r4
 8006ab6:	4602      	mov	r2, r0
 8006ab8:	6878      	ldr	r0, [r7, #4]
 8006aba:	f001 fee7 	bl	800888c <USBH_OpenPipe>
                    phost->device.address,
                    phost->device.speed,
                    USB_EP_TYPE_INTR,
                    CDC_Handle->CommItf.NotifEpSize);

    USBH_LL_SetToggle (phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	781b      	ldrb	r3, [r3, #0]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	4619      	mov	r1, r3
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f006 f816 	bl	800caf8 <USBH_LL_SetToggle>

    interface = USBH_FindInterface(phost,
 8006acc:	2300      	movs	r3, #0
 8006ace:	2200      	movs	r2, #0
 8006ad0:	210a      	movs	r1, #10
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	f000 fc26 	bl	8007324 <USBH_FindInterface>
 8006ad8:	4603      	mov	r3, r0
 8006ada:	73bb      	strb	r3, [r7, #14]
                                   DATA_INTERFACE_CLASS_CODE,
                                   RESERVED,
                                   NO_CLASS_SPECIFIC_PROTOCOL_CODE);

    if(interface == 0xFFU) /* No Valid Interface */
 8006adc:	7bbb      	ldrb	r3, [r7, #14]
 8006ade:	2bff      	cmp	r3, #255	; 0xff
 8006ae0:	f000 80c4 	beq.w	8006c6c <USBH_CDC_InterfaceInit+0x278>
      USBH_DbgLog ("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    }
    else
    {
      /*Collect the class specific endpoint address and length*/
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8006ae4:	7bbb      	ldrb	r3, [r7, #14]
 8006ae6:	687a      	ldr	r2, [r7, #4]
 8006ae8:	211a      	movs	r1, #26
 8006aea:	fb01 f303 	mul.w	r3, r1, r3
 8006aee:	4413      	add	r3, r2
 8006af0:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8006af4:	781b      	ldrb	r3, [r3, #0]
 8006af6:	b25b      	sxtb	r3, r3
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	da16      	bge.n	8006b2a <USBH_CDC_InterfaceInit+0x136>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006afc:	7bbb      	ldrb	r3, [r7, #14]
 8006afe:	687a      	ldr	r2, [r7, #4]
 8006b00:	211a      	movs	r1, #26
 8006b02:	fb01 f303 	mul.w	r3, r1, r3
 8006b06:	4413      	add	r3, r2
 8006b08:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8006b0c:	781a      	ldrb	r2, [r3, #0]
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006b12:	7bbb      	ldrb	r3, [r7, #14]
 8006b14:	687a      	ldr	r2, [r7, #4]
 8006b16:	211a      	movs	r1, #26
 8006b18:	fb01 f303 	mul.w	r3, r1, r3
 8006b1c:	4413      	add	r3, r2
 8006b1e:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8006b22:	881a      	ldrh	r2, [r3, #0]
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	835a      	strh	r2, [r3, #26]
 8006b28:	e015      	b.n	8006b56 <USBH_CDC_InterfaceInit+0x162>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006b2a:	7bbb      	ldrb	r3, [r7, #14]
 8006b2c:	687a      	ldr	r2, [r7, #4]
 8006b2e:	211a      	movs	r1, #26
 8006b30:	fb01 f303 	mul.w	r3, r1, r3
 8006b34:	4413      	add	r3, r2
 8006b36:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8006b3a:	781a      	ldrb	r2, [r3, #0]
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006b40:	7bbb      	ldrb	r3, [r7, #14]
 8006b42:	687a      	ldr	r2, [r7, #4]
 8006b44:	211a      	movs	r1, #26
 8006b46:	fb01 f303 	mul.w	r3, r1, r3
 8006b4a:	4413      	add	r3, r2
 8006b4c:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8006b50:	881a      	ldrh	r2, [r3, #0]
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	831a      	strh	r2, [r3, #24]
      }

      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8006b56:	7bbb      	ldrb	r3, [r7, #14]
 8006b58:	687a      	ldr	r2, [r7, #4]
 8006b5a:	211a      	movs	r1, #26
 8006b5c:	fb01 f303 	mul.w	r3, r1, r3
 8006b60:	4413      	add	r3, r2
 8006b62:	f203 3352 	addw	r3, r3, #850	; 0x352
 8006b66:	781b      	ldrb	r3, [r3, #0]
 8006b68:	b25b      	sxtb	r3, r3
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	da16      	bge.n	8006b9c <USBH_CDC_InterfaceInit+0x1a8>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006b6e:	7bbb      	ldrb	r3, [r7, #14]
 8006b70:	687a      	ldr	r2, [r7, #4]
 8006b72:	211a      	movs	r1, #26
 8006b74:	fb01 f303 	mul.w	r3, r1, r3
 8006b78:	4413      	add	r3, r2
 8006b7a:	f203 3352 	addw	r3, r3, #850	; 0x352
 8006b7e:	781a      	ldrb	r2, [r3, #0]
 8006b80:	68bb      	ldr	r3, [r7, #8]
 8006b82:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006b84:	7bbb      	ldrb	r3, [r7, #14]
 8006b86:	687a      	ldr	r2, [r7, #4]
 8006b88:	211a      	movs	r1, #26
 8006b8a:	fb01 f303 	mul.w	r3, r1, r3
 8006b8e:	4413      	add	r3, r2
 8006b90:	f503 7355 	add.w	r3, r3, #852	; 0x354
 8006b94:	881a      	ldrh	r2, [r3, #0]
 8006b96:	68bb      	ldr	r3, [r7, #8]
 8006b98:	835a      	strh	r2, [r3, #26]
 8006b9a:	e015      	b.n	8006bc8 <USBH_CDC_InterfaceInit+0x1d4>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006b9c:	7bbb      	ldrb	r3, [r7, #14]
 8006b9e:	687a      	ldr	r2, [r7, #4]
 8006ba0:	211a      	movs	r1, #26
 8006ba2:	fb01 f303 	mul.w	r3, r1, r3
 8006ba6:	4413      	add	r3, r2
 8006ba8:	f203 3352 	addw	r3, r3, #850	; 0x352
 8006bac:	781a      	ldrb	r2, [r3, #0]
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006bb2:	7bbb      	ldrb	r3, [r7, #14]
 8006bb4:	687a      	ldr	r2, [r7, #4]
 8006bb6:	211a      	movs	r1, #26
 8006bb8:	fb01 f303 	mul.w	r3, r1, r3
 8006bbc:	4413      	add	r3, r2
 8006bbe:	f503 7355 	add.w	r3, r3, #852	; 0x354
 8006bc2:	881a      	ldrh	r2, [r3, #0]
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	831a      	strh	r2, [r3, #24]
      }

      /*Allocate the length for host channel number out*/
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	7b9b      	ldrb	r3, [r3, #14]
 8006bcc:	4619      	mov	r1, r3
 8006bce:	6878      	ldr	r0, [r7, #4]
 8006bd0:	f001 fe8b 	bl	80088ea <USBH_AllocPipe>
 8006bd4:	4603      	mov	r3, r0
 8006bd6:	461a      	mov	r2, r3
 8006bd8:	68bb      	ldr	r3, [r7, #8]
 8006bda:	735a      	strb	r2, [r3, #13]

      /*Allocate the length for host channel number in*/
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	7bdb      	ldrb	r3, [r3, #15]
 8006be0:	4619      	mov	r1, r3
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	f001 fe81 	bl	80088ea <USBH_AllocPipe>
 8006be8:	4603      	mov	r3, r0
 8006bea:	461a      	mov	r2, r3
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	731a      	strb	r2, [r3, #12]

      /* Open channel for OUT endpoint */
      USBH_OpenPipe  (phost,
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	7b59      	ldrb	r1, [r3, #13]
 8006bf4:	68bb      	ldr	r3, [r7, #8]
 8006bf6:	7b98      	ldrb	r0, [r3, #14]
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006c04:	68ba      	ldr	r2, [r7, #8]
 8006c06:	8b12      	ldrh	r2, [r2, #24]
 8006c08:	9202      	str	r2, [sp, #8]
 8006c0a:	2202      	movs	r2, #2
 8006c0c:	9201      	str	r2, [sp, #4]
 8006c0e:	9300      	str	r3, [sp, #0]
 8006c10:	4623      	mov	r3, r4
 8006c12:	4602      	mov	r2, r0
 8006c14:	6878      	ldr	r0, [r7, #4]
 8006c16:	f001 fe39 	bl	800888c <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);
      /* Open channel for IN endpoint */
      USBH_OpenPipe  (phost,
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	7b19      	ldrb	r1, [r3, #12]
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	7bd8      	ldrb	r0, [r3, #15]
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006c2e:	68ba      	ldr	r2, [r7, #8]
 8006c30:	8b52      	ldrh	r2, [r2, #26]
 8006c32:	9202      	str	r2, [sp, #8]
 8006c34:	2202      	movs	r2, #2
 8006c36:	9201      	str	r2, [sp, #4]
 8006c38:	9300      	str	r3, [sp, #0]
 8006c3a:	4623      	mov	r3, r4
 8006c3c:	4602      	mov	r2, r0
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	f001 fe24 	bl	800888c <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

      CDC_Handle->state = CDC_IDLE_STATE;
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	2200      	movs	r2, #0
 8006c48:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	7b5b      	ldrb	r3, [r3, #13]
 8006c50:	2200      	movs	r2, #0
 8006c52:	4619      	mov	r1, r3
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	f005 ff4f 	bl	800caf8 <USBH_LL_SetToggle>
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.InPipe, 0U);
 8006c5a:	68bb      	ldr	r3, [r7, #8]
 8006c5c:	7b1b      	ldrb	r3, [r3, #12]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	4619      	mov	r1, r3
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	f005 ff48 	bl	800caf8 <USBH_LL_SetToggle>
      status = USBH_OK;
 8006c68:	2300      	movs	r3, #0
 8006c6a:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 8006c6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c6e:	4618      	mov	r0, r3
 8006c70:	3714      	adds	r7, #20
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bd90      	pop	{r4, r7, pc}

08006c76 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit (USBH_HandleTypeDef *phost)
{
 8006c76:	b580      	push	{r7, lr}
 8006c78:	b084      	sub	sp, #16
 8006c7a:	af00      	add	r7, sp, #0
 8006c7c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006c84:	69db      	ldr	r3, [r3, #28]
 8006c86:	60fb      	str	r3, [r7, #12]

  if ( CDC_Handle->CommItf.NotifPipe)
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	781b      	ldrb	r3, [r3, #0]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d00e      	beq.n	8006cae <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	781b      	ldrb	r3, [r3, #0]
 8006c94:	4619      	mov	r1, r3
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f001 fe17 	bl	80088ca <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->CommItf.NotifPipe);
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	781b      	ldrb	r3, [r3, #0]
 8006ca0:	4619      	mov	r1, r3
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	f001 fe3f 	bl	8008926 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	2200      	movs	r2, #0
 8006cac:	701a      	strb	r2, [r3, #0]
  }

  if ( CDC_Handle->DataItf.InPipe)
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	7b1b      	ldrb	r3, [r3, #12]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d00e      	beq.n	8006cd4 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	7b1b      	ldrb	r3, [r3, #12]
 8006cba:	4619      	mov	r1, r3
 8006cbc:	6878      	ldr	r0, [r7, #4]
 8006cbe:	f001 fe04 	bl	80088ca <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.InPipe);
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	7b1b      	ldrb	r3, [r3, #12]
 8006cc6:	4619      	mov	r1, r3
 8006cc8:	6878      	ldr	r0, [r7, #4]
 8006cca:	f001 fe2c 	bl	8008926 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	731a      	strb	r2, [r3, #12]
  }

  if ( CDC_Handle->DataItf.OutPipe)
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	7b5b      	ldrb	r3, [r3, #13]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d00e      	beq.n	8006cfa <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	7b5b      	ldrb	r3, [r3, #13]
 8006ce0:	4619      	mov	r1, r3
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	f001 fdf1 	bl	80088ca <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.OutPipe);
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	7b5b      	ldrb	r3, [r3, #13]
 8006cec:	4619      	mov	r1, r3
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	f001 fe19 	bl	8008926 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	735a      	strb	r2, [r3, #13]
  }

  if(phost->pActiveClass->pData)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006d00:	69db      	ldr	r3, [r3, #28]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d00b      	beq.n	8006d1e <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free (phost->pActiveClass->pData);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006d0c:	69db      	ldr	r3, [r3, #28]
 8006d0e:	4618      	mov	r0, r3
 8006d10:	f005 ffd4 	bl	800ccbc <free>
    phost->pActiveClass->pData = 0U;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006d1e:	2300      	movs	r3, #0
}
 8006d20:	4618      	mov	r0, r3
 8006d22:	3710      	adds	r7, #16
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bd80      	pop	{r7, pc}

08006d28 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest (USBH_HandleTypeDef *phost)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b084      	sub	sp, #16
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_FAIL ;
 8006d30:	2302      	movs	r3, #2
 8006d32:	73fb      	strb	r3, [r7, #15]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006d3a:	69db      	ldr	r3, [r3, #28]
 8006d3c:	60bb      	str	r3, [r7, #8]

  /*Issue the get line coding request*/
  status =   GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006d3e:	68bb      	ldr	r3, [r7, #8]
 8006d40:	3340      	adds	r3, #64	; 0x40
 8006d42:	4619      	mov	r1, r3
 8006d44:	6878      	ldr	r0, [r7, #4]
 8006d46:	f000 f8b2 	bl	8006eae <GetLineCoding>
 8006d4a:	4603      	mov	r3, r0
 8006d4c:	73fb      	strb	r3, [r7, #15]
  if(status == USBH_OK)
 8006d4e:	7bfb      	ldrb	r3, [r7, #15]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d105      	bne.n	8006d60 <USBH_CDC_ClassRequest+0x38>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006d5a:	2102      	movs	r1, #2
 8006d5c:	6878      	ldr	r0, [r7, #4]
 8006d5e:	4798      	blx	r3
  }
  return status;
 8006d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d62:	4618      	mov	r0, r3
 8006d64:	3710      	adds	r7, #16
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bd80      	pop	{r7, pc}
	...

08006d6c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process (USBH_HandleTypeDef *phost)
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b084      	sub	sp, #16
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006d74:	2301      	movs	r3, #1
 8006d76:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006d78:	2300      	movs	r3, #0
 8006d7a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006d82:	69db      	ldr	r3, [r3, #28]
 8006d84:	60bb      	str	r3, [r7, #8]

  switch(CDC_Handle->state)
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006d8c:	2b04      	cmp	r3, #4
 8006d8e:	d877      	bhi.n	8006e80 <USBH_CDC_Process+0x114>
 8006d90:	a201      	add	r2, pc, #4	; (adr r2, 8006d98 <USBH_CDC_Process+0x2c>)
 8006d92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d96:	bf00      	nop
 8006d98:	08006dad 	.word	0x08006dad
 8006d9c:	08006db3 	.word	0x08006db3
 8006da0:	08006de3 	.word	0x08006de3
 8006da4:	08006e57 	.word	0x08006e57
 8006da8:	08006e65 	.word	0x08006e65
  {

  case CDC_IDLE_STATE:
    status = USBH_OK;
 8006dac:	2300      	movs	r3, #0
 8006dae:	73fb      	strb	r3, [r7, #15]
    break;
 8006db0:	e06d      	b.n	8006e8e <USBH_CDC_Process+0x122>

  case CDC_SET_LINE_CODING_STATE:
    req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006db2:	68bb      	ldr	r3, [r7, #8]
 8006db4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006db6:	4619      	mov	r1, r3
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	f000 f897 	bl	8006eec <SetLineCoding>
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 8006dc2:	7bbb      	ldrb	r3, [r7, #14]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d104      	bne.n	8006dd2 <USBH_CDC_Process+0x66>
    {
      CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006dc8:	68bb      	ldr	r3, [r7, #8]
 8006dca:	2202      	movs	r2, #2
 8006dcc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 8006dd0:	e058      	b.n	8006e84 <USBH_CDC_Process+0x118>
      if(req_status != USBH_BUSY)
 8006dd2:	7bbb      	ldrb	r3, [r7, #14]
 8006dd4:	2b01      	cmp	r3, #1
 8006dd6:	d055      	beq.n	8006e84 <USBH_CDC_Process+0x118>
        CDC_Handle->state = CDC_ERROR_STATE;
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	2204      	movs	r2, #4
 8006ddc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 8006de0:	e050      	b.n	8006e84 <USBH_CDC_Process+0x118>


  case CDC_GET_LAST_LINE_CODING_STATE:
    req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006de2:	68bb      	ldr	r3, [r7, #8]
 8006de4:	3340      	adds	r3, #64	; 0x40
 8006de6:	4619      	mov	r1, r3
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	f000 f860 	bl	8006eae <GetLineCoding>
 8006dee:	4603      	mov	r3, r0
 8006df0:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 8006df2:	7bbb      	ldrb	r3, [r7, #14]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d126      	bne.n	8006e46 <USBH_CDC_Process+0xda>
    {
      CDC_Handle->state = CDC_IDLE_STATE;
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006e00:	68bb      	ldr	r3, [r7, #8]
 8006e02:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e0a:	791b      	ldrb	r3, [r3, #4]
 8006e0c:	429a      	cmp	r2, r3
 8006e0e:	d13b      	bne.n	8006e88 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006e10:	68bb      	ldr	r3, [r7, #8]
 8006e12:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006e16:	68bb      	ldr	r3, [r7, #8]
 8006e18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e1a:	799b      	ldrb	r3, [r3, #6]
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006e1c:	429a      	cmp	r2, r3
 8006e1e:	d133      	bne.n	8006e88 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006e26:	68bb      	ldr	r3, [r7, #8]
 8006e28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e2a:	795b      	ldrb	r3, [r3, #5]
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006e2c:	429a      	cmp	r2, r3
 8006e2e:	d12b      	bne.n	8006e88 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e38:	681b      	ldr	r3, [r3, #0]
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006e3a:	429a      	cmp	r2, r3
 8006e3c:	d124      	bne.n	8006e88 <USBH_CDC_Process+0x11c>
      {
        USBH_CDC_LineCodingChanged(phost);
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f000 f984 	bl	800714c <USBH_CDC_LineCodingChanged>
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 8006e44:	e020      	b.n	8006e88 <USBH_CDC_Process+0x11c>
      if(req_status != USBH_BUSY)
 8006e46:	7bbb      	ldrb	r3, [r7, #14]
 8006e48:	2b01      	cmp	r3, #1
 8006e4a:	d01d      	beq.n	8006e88 <USBH_CDC_Process+0x11c>
        CDC_Handle->state = CDC_ERROR_STATE;
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	2204      	movs	r2, #4
 8006e50:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 8006e54:	e018      	b.n	8006e88 <USBH_CDC_Process+0x11c>

  case CDC_TRANSFER_DATA:
    CDC_ProcessTransmission(phost);
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	f000 f867 	bl	8006f2a <CDC_ProcessTransmission>
    CDC_ProcessReception(phost);
 8006e5c:	6878      	ldr	r0, [r7, #4]
 8006e5e:	f000 f8f8 	bl	8007052 <CDC_ProcessReception>
    break;
 8006e62:	e014      	b.n	8006e8e <USBH_CDC_Process+0x122>

  case CDC_ERROR_STATE:
    req_status = USBH_ClrFeature(phost, 0x00U);
 8006e64:	2100      	movs	r1, #0
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f000 fffa 	bl	8007e60 <USBH_ClrFeature>
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK )
 8006e70:	7bbb      	ldrb	r3, [r7, #14]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d10a      	bne.n	8006e8c <USBH_CDC_Process+0x120>
    {
      /*Change the state to waiting*/
      CDC_Handle->state = CDC_IDLE_STATE ;
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    }
    break;
 8006e7e:	e005      	b.n	8006e8c <USBH_CDC_Process+0x120>

  default:
    break;
 8006e80:	bf00      	nop
 8006e82:	e004      	b.n	8006e8e <USBH_CDC_Process+0x122>
    break;
 8006e84:	bf00      	nop
 8006e86:	e002      	b.n	8006e8e <USBH_CDC_Process+0x122>
    break;
 8006e88:	bf00      	nop
 8006e8a:	e000      	b.n	8006e8e <USBH_CDC_Process+0x122>
    break;
 8006e8c:	bf00      	nop

  }

  return status;
 8006e8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e90:	4618      	mov	r0, r3
 8006e92:	3710      	adds	r7, #16
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bd80      	pop	{r7, pc}

08006e98 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess (USBH_HandleTypeDef *phost)
{
 8006e98:	b480      	push	{r7}
 8006e9a:	b083      	sub	sp, #12
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
  return USBH_OK;
 8006ea0:	2300      	movs	r3, #0
}
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	370c      	adds	r7, #12
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eac:	4770      	bx	lr

08006eae <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006eae:	b580      	push	{r7, lr}
 8006eb0:	b082      	sub	sp, #8
 8006eb2:	af00      	add	r7, sp, #0
 8006eb4:	6078      	str	r0, [r7, #4]
 8006eb6:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	22a1      	movs	r2, #161	; 0xa1
 8006ebc:	741a      	strb	r2, [r3, #16]
                              USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2221      	movs	r2, #33	; 0x21
 8006ec2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2200      	movs	r2, #0
 8006ece:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2207      	movs	r2, #7
 8006ed4:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	2207      	movs	r2, #7
 8006eda:	4619      	mov	r1, r3
 8006edc:	6878      	ldr	r0, [r7, #4]
 8006ede:	f001 f99f 	bl	8008220 <USBH_CtlReq>
 8006ee2:	4603      	mov	r3, r0
}
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	3708      	adds	r7, #8
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	bd80      	pop	{r7, pc}

08006eec <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b082      	sub	sp, #8
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
 8006ef4:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2221      	movs	r2, #33	; 0x21
 8006efa:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2220      	movs	r2, #32
 8006f00:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2200      	movs	r2, #0
 8006f06:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2207      	movs	r2, #7
 8006f12:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	2207      	movs	r2, #7
 8006f18:	4619      	mov	r1, r3
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	f001 f980 	bl	8008220 <USBH_CtlReq>
 8006f20:	4603      	mov	r3, r0
}
 8006f22:	4618      	mov	r0, r3
 8006f24:	3708      	adds	r7, #8
 8006f26:	46bd      	mov	sp, r7
 8006f28:	bd80      	pop	{r7, pc}

08006f2a <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006f2a:	b580      	push	{r7, lr}
 8006f2c:	b086      	sub	sp, #24
 8006f2e:	af02      	add	r7, sp, #8
 8006f30:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006f38:	69db      	ldr	r3, [r3, #28]
 8006f3a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006f46:	2b01      	cmp	r3, #1
 8006f48:	d002      	beq.n	8006f50 <CDC_ProcessTransmission+0x26>
 8006f4a:	2b02      	cmp	r3, #2
 8006f4c:	d025      	beq.n	8006f9a <CDC_ProcessTransmission+0x70>
      }
    }
    break;

  default:
    break;
 8006f4e:	e07c      	b.n	800704a <CDC_ProcessTransmission+0x120>
    if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f54:	68fa      	ldr	r2, [r7, #12]
 8006f56:	8b12      	ldrh	r2, [r2, #24]
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d90c      	bls.n	8006f76 <CDC_ProcessTransmission+0x4c>
      USBH_BulkSendData (phost,
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	69d9      	ldr	r1, [r3, #28]
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	8b1a      	ldrh	r2, [r3, #24]
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	7b58      	ldrb	r0, [r3, #13]
 8006f68:	2301      	movs	r3, #1
 8006f6a:	9300      	str	r3, [sp, #0]
 8006f6c:	4603      	mov	r3, r0
 8006f6e:	6878      	ldr	r0, [r7, #4]
 8006f70:	f001 fc49 	bl	8008806 <USBH_BulkSendData>
 8006f74:	e00c      	b.n	8006f90 <CDC_ProcessTransmission+0x66>
      USBH_BulkSendData (phost,
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	69d9      	ldr	r1, [r3, #28]
                         (uint16_t)CDC_Handle->TxDataLength,
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      USBH_BulkSendData (phost,
 8006f7e:	b29a      	uxth	r2, r3
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	7b58      	ldrb	r0, [r3, #13]
 8006f84:	2301      	movs	r3, #1
 8006f86:	9300      	str	r3, [sp, #0]
 8006f88:	4603      	mov	r3, r0
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	f001 fc3b 	bl	8008806 <USBH_BulkSendData>
    CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	2202      	movs	r2, #2
 8006f94:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 8006f98:	e057      	b.n	800704a <CDC_ProcessTransmission+0x120>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	7b5b      	ldrb	r3, [r3, #13]
 8006f9e:	4619      	mov	r1, r3
 8006fa0:	6878      	ldr	r0, [r7, #4]
 8006fa2:	f005 fd7f 	bl	800caa4 <USBH_LL_GetURBState>
 8006fa6:	4603      	mov	r3, r0
 8006fa8:	72fb      	strb	r3, [r7, #11]
    if (URB_Status == USBH_URB_DONE)
 8006faa:	7afb      	ldrb	r3, [r7, #11]
 8006fac:	2b01      	cmp	r3, #1
 8006fae:	d136      	bne.n	800701e <CDC_ProcessTransmission+0xf4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fb4:	68fa      	ldr	r2, [r7, #12]
 8006fb6:	8b12      	ldrh	r2, [r2, #24]
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d90e      	bls.n	8006fda <CDC_ProcessTransmission+0xb0>
        CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fc0:	68fa      	ldr	r2, [r7, #12]
 8006fc2:	8b12      	ldrh	r2, [r2, #24]
 8006fc4:	1a9a      	subs	r2, r3, r2
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	625a      	str	r2, [r3, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	69db      	ldr	r3, [r3, #28]
 8006fce:	68fa      	ldr	r2, [r7, #12]
 8006fd0:	8b12      	ldrh	r2, [r2, #24]
 8006fd2:	441a      	add	r2, r3
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	61da      	str	r2, [r3, #28]
 8006fd8:	e002      	b.n	8006fe0 <CDC_ProcessTransmission+0xb6>
        CDC_Handle->TxDataLength = 0U;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	625a      	str	r2, [r3, #36]	; 0x24
      if (CDC_Handle->TxDataLength > 0U)
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d004      	beq.n	8006ff2 <CDC_ProcessTransmission+0xc8>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	2201      	movs	r2, #1
 8006fec:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8006ff0:	e006      	b.n	8007000 <CDC_ProcessTransmission+0xd6>
        CDC_Handle->data_tx_state = CDC_IDLE;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        USBH_CDC_TransmitCallback(phost);
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	f000 f892 	bl	8007124 <USBH_CDC_TransmitCallback>
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2204      	movs	r2, #4
 8007004:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007014:	2200      	movs	r2, #0
 8007016:	4619      	mov	r1, r3
 8007018:	f001 fd6a 	bl	8008af0 <osMessagePut>
    break;
 800701c:	e014      	b.n	8007048 <CDC_ProcessTransmission+0x11e>
      if (URB_Status == USBH_URB_NOTREADY)
 800701e:	7afb      	ldrb	r3, [r7, #11]
 8007020:	2b02      	cmp	r3, #2
 8007022:	d111      	bne.n	8007048 <CDC_ProcessTransmission+0x11e>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	2201      	movs	r2, #1
 8007028:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2204      	movs	r2, #4
 8007030:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007040:	2200      	movs	r2, #0
 8007042:	4619      	mov	r1, r3
 8007044:	f001 fd54 	bl	8008af0 <osMessagePut>
    break;
 8007048:	bf00      	nop
  }
}
 800704a:	bf00      	nop
 800704c:	3710      	adds	r7, #16
 800704e:	46bd      	mov	sp, r7
 8007050:	bd80      	pop	{r7, pc}

08007052 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8007052:	b580      	push	{r7, lr}
 8007054:	b086      	sub	sp, #24
 8007056:	af00      	add	r7, sp, #0
 8007058:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007060:	69db      	ldr	r3, [r3, #28]
 8007062:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007064:	2300      	movs	r3, #0
 8007066:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch(CDC_Handle->data_rx_state)
 8007068:	697b      	ldr	r3, [r7, #20]
 800706a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800706e:	2b03      	cmp	r3, #3
 8007070:	d002      	beq.n	8007078 <CDC_ProcessReception+0x26>
 8007072:	2b04      	cmp	r3, #4
 8007074:	d00e      	beq.n	8007094 <CDC_ProcessReception+0x42>
#endif
    }
    break;

  default:
    break;
 8007076:	e051      	b.n	800711c <CDC_ProcessReception+0xca>
    USBH_BulkReceiveData (phost,
 8007078:	697b      	ldr	r3, [r7, #20]
 800707a:	6a19      	ldr	r1, [r3, #32]
 800707c:	697b      	ldr	r3, [r7, #20]
 800707e:	8b5a      	ldrh	r2, [r3, #26]
 8007080:	697b      	ldr	r3, [r7, #20]
 8007082:	7b1b      	ldrb	r3, [r3, #12]
 8007084:	6878      	ldr	r0, [r7, #4]
 8007086:	f001 fbe3 	bl	8008850 <USBH_BulkReceiveData>
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800708a:	697b      	ldr	r3, [r7, #20]
 800708c:	2204      	movs	r2, #4
 800708e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 8007092:	e043      	b.n	800711c <CDC_ProcessReception+0xca>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007094:	697b      	ldr	r3, [r7, #20]
 8007096:	7b1b      	ldrb	r3, [r3, #12]
 8007098:	4619      	mov	r1, r3
 800709a:	6878      	ldr	r0, [r7, #4]
 800709c:	f005 fd02 	bl	800caa4 <USBH_LL_GetURBState>
 80070a0:	4603      	mov	r3, r0
 80070a2:	74fb      	strb	r3, [r7, #19]
    if(URB_Status == USBH_URB_DONE)
 80070a4:	7cfb      	ldrb	r3, [r7, #19]
 80070a6:	2b01      	cmp	r3, #1
 80070a8:	d137      	bne.n	800711a <CDC_ProcessReception+0xc8>
      length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80070aa:	697b      	ldr	r3, [r7, #20]
 80070ac:	7b1b      	ldrb	r3, [r3, #12]
 80070ae:	4619      	mov	r1, r3
 80070b0:	6878      	ldr	r0, [r7, #4]
 80070b2:	f005 fc65 	bl	800c980 <USBH_LL_GetLastXferSize>
 80070b6:	60f8      	str	r0, [r7, #12]
      if(((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80070b8:	697b      	ldr	r3, [r7, #20]
 80070ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070bc:	68fa      	ldr	r2, [r7, #12]
 80070be:	429a      	cmp	r2, r3
 80070c0:	d016      	beq.n	80070f0 <CDC_ProcessReception+0x9e>
 80070c2:	697b      	ldr	r3, [r7, #20]
 80070c4:	8b5b      	ldrh	r3, [r3, #26]
 80070c6:	461a      	mov	r2, r3
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d910      	bls.n	80070f0 <CDC_ProcessReception+0x9e>
        CDC_Handle->RxDataLength -= length ;
 80070ce:	697b      	ldr	r3, [r7, #20]
 80070d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	1ad2      	subs	r2, r2, r3
 80070d6:	697b      	ldr	r3, [r7, #20]
 80070d8:	629a      	str	r2, [r3, #40]	; 0x28
        CDC_Handle->pRxData += length;
 80070da:	697b      	ldr	r3, [r7, #20]
 80070dc:	6a1a      	ldr	r2, [r3, #32]
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	441a      	add	r2, r3
 80070e2:	697b      	ldr	r3, [r7, #20]
 80070e4:	621a      	str	r2, [r3, #32]
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80070e6:	697b      	ldr	r3, [r7, #20]
 80070e8:	2203      	movs	r2, #3
 80070ea:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 80070ee:	e006      	b.n	80070fe <CDC_ProcessReception+0xac>
        CDC_Handle->data_rx_state = CDC_IDLE;
 80070f0:	697b      	ldr	r3, [r7, #20]
 80070f2:	2200      	movs	r2, #0
 80070f4:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        USBH_CDC_ReceiveCallback(phost);
 80070f8:	6878      	ldr	r0, [r7, #4]
 80070fa:	f000 f81d 	bl	8007138 <USBH_CDC_ReceiveCallback>
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2204      	movs	r2, #4
 8007102:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007112:	2200      	movs	r2, #0
 8007114:	4619      	mov	r1, r3
 8007116:	f001 fceb 	bl	8008af0 <osMessagePut>
    break;
 800711a:	bf00      	nop
  }
}
 800711c:	bf00      	nop
 800711e:	3718      	adds	r7, #24
 8007120:	46bd      	mov	sp, r7
 8007122:	bd80      	pop	{r7, pc}

08007124 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007124:	b480      	push	{r7}
 8007126:	b083      	sub	sp, #12
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]

}
 800712c:	bf00      	nop
 800712e:	370c      	adds	r7, #12
 8007130:	46bd      	mov	sp, r7
 8007132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007136:	4770      	bx	lr

08007138 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007138:	b480      	push	{r7}
 800713a:	b083      	sub	sp, #12
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]

}
 8007140:	bf00      	nop
 8007142:	370c      	adds	r7, #12
 8007144:	46bd      	mov	sp, r7
 8007146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714a:	4770      	bx	lr

0800714c <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800714c:	b480      	push	{r7}
 800714e:	b083      	sub	sp, #12
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]

}
 8007154:	bf00      	nop
 8007156:	370c      	adds	r7, #12
 8007158:	46bd      	mov	sp, r7
 800715a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715e:	4770      	bx	lr

08007160 <USBH_Init>:
  * @param  phost: Host Handle
  * @param  pUsrFunc: User Callback
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost, void (*pUsrFunc)(USBH_HandleTypeDef *phost, uint8_t id), uint8_t id)
{
 8007160:	b5b0      	push	{r4, r5, r7, lr}
 8007162:	b090      	sub	sp, #64	; 0x40
 8007164:	af00      	add	r7, sp, #0
 8007166:	60f8      	str	r0, [r7, #12]
 8007168:	60b9      	str	r1, [r7, #8]
 800716a:	4613      	mov	r3, r2
 800716c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(phost == NULL)
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d101      	bne.n	8007178 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007174:	2302      	movs	r3, #2
 8007176:	e03d      	b.n	80071f4 <USBH_Init+0x94>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	79fa      	ldrb	r2, [r7, #7]
 800717c:	f883 23c0 	strb.w	r2, [r3, #960]	; 0x3c0

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	2200      	movs	r2, #0
 8007184:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
  phost->ClassNumber = 0U;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	2200      	movs	r2, #0
 800718c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8007190:	68f8      	ldr	r0, [r7, #12]
 8007192:	f000 f837 	bl	8007204 <DeInitStateMachine>

  /* Assign User process */
  if(pUsrFunc != NULL)
 8007196:	68bb      	ldr	r3, [r7, #8]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d003      	beq.n	80071a4 <USBH_Init+0x44>
  {
    phost->pUser = pUsrFunc;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	68ba      	ldr	r2, [r7, #8]
 80071a0:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 80071a4:	4b15      	ldr	r3, [pc, #84]	; (80071fc <USBH_Init+0x9c>)
 80071a6:	f107 0430 	add.w	r4, r7, #48	; 0x30
 80071aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80071ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate (osMessageQ(USBH_Queue), NULL);
 80071b0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80071b4:	2100      	movs	r1, #0
 80071b6:	4618      	mov	r0, r3
 80071b8:	f001 fc71 	bl	8008a9e <osMessageCreate>
 80071bc:	4602      	mov	r2, r0
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 80071c4:	4b0e      	ldr	r3, [pc, #56]	; (8007200 <USBH_Init+0xa0>)
 80071c6:	f107 0414 	add.w	r4, r7, #20
 80071ca:	461d      	mov	r5, r3
 80071cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80071ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80071d0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80071d4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate (osThread(USBH_Thread), phost);
 80071d8:	f107 0314 	add.w	r3, r7, #20
 80071dc:	68f9      	ldr	r1, [r7, #12]
 80071de:	4618      	mov	r0, r3
 80071e0:	f001 fc11 	bl	8008a06 <osThreadCreate>
 80071e4:	4602      	mov	r2, r0
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 80071ec:	68f8      	ldr	r0, [r7, #12]
 80071ee:	f005 fb0b 	bl	800c808 <USBH_LL_Init>

  return USBH_OK;
 80071f2:	2300      	movs	r3, #0
}
 80071f4:	4618      	mov	r0, r3
 80071f6:	3740      	adds	r7, #64	; 0x40
 80071f8:	46bd      	mov	sp, r7
 80071fa:	bdb0      	pop	{r4, r5, r7, pc}
 80071fc:	0800ce84 	.word	0x0800ce84
 8007200:	0800cea0 	.word	0x0800cea0

08007204 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007204:	b480      	push	{r7}
 8007206:	b085      	sub	sp, #20
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800720c:	2300      	movs	r3, #0
 800720e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8007210:	e008      	b.n	8007224 <DeInitStateMachine+0x20>
  {
    phost->Pipes[i] = 0U;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	68fa      	ldr	r2, [r7, #12]
 8007216:	32e0      	adds	r2, #224	; 0xe0
 8007218:	2100      	movs	r1, #0
 800721a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	3301      	adds	r3, #1
 8007222:	60fb      	str	r3, [r7, #12]
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	2b0e      	cmp	r3, #14
 8007228:	d9f3      	bls.n	8007212 <DeInitStateMachine+0xe>
  }

  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 800722a:	2300      	movs	r3, #0
 800722c:	60fb      	str	r3, [r7, #12]
 800722e:	e009      	b.n	8007244 <DeInitStateMachine+0x40>
  {
    phost->device.Data[i] = 0U;
 8007230:	687a      	ldr	r2, [r7, #4]
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	4413      	add	r3, r2
 8007236:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800723a:	2200      	movs	r2, #0
 800723c:	701a      	strb	r2, [r3, #0]
  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	3301      	adds	r3, #1
 8007242:	60fb      	str	r3, [r7, #12]
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800724a:	d3f1      	bcc.n	8007230 <DeInitStateMachine+0x2c>
  }

  phost->gState = HOST_IDLE;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2200      	movs	r2, #0
 8007250:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2200      	movs	r2, #0
 8007256:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2201      	movs	r2, #1
 800725c:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2200      	movs	r2, #0
 8007262:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc

  phost->Control.state = CTRL_SETUP;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2201      	movs	r2, #1
 800726a:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2240      	movs	r2, #64	; 0x40
 8007270:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2200      	movs	r2, #0
 8007276:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2200      	movs	r2, #0
 800727c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2201      	movs	r2, #1
 8007284:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

  return USBH_OK;
 8007288:	2300      	movs	r3, #0
}
 800728a:	4618      	mov	r0, r3
 800728c:	3714      	adds	r7, #20
 800728e:	46bd      	mov	sp, r7
 8007290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007294:	4770      	bx	lr

08007296 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007296:	b480      	push	{r7}
 8007298:	b085      	sub	sp, #20
 800729a:	af00      	add	r7, sp, #0
 800729c:	6078      	str	r0, [r7, #4]
 800729e:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef   status = USBH_OK;
 80072a0:	2300      	movs	r3, #0
 80072a2:	73fb      	strb	r3, [r7, #15]

  if(pclass != 0)
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d017      	beq.n	80072da <USBH_RegisterClass+0x44>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d10f      	bne.n	80072d4 <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80072ba:	1c59      	adds	r1, r3, #1
 80072bc:	687a      	ldr	r2, [r7, #4]
 80072be:	f8c2 137c 	str.w	r1, [r2, #892]	; 0x37c
 80072c2:	687a      	ldr	r2, [r7, #4]
 80072c4:	33dc      	adds	r3, #220	; 0xdc
 80072c6:	009b      	lsls	r3, r3, #2
 80072c8:	4413      	add	r3, r2
 80072ca:	683a      	ldr	r2, [r7, #0]
 80072cc:	605a      	str	r2, [r3, #4]
      status = USBH_OK;
 80072ce:	2300      	movs	r3, #0
 80072d0:	73fb      	strb	r3, [r7, #15]
 80072d2:	e004      	b.n	80072de <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80072d4:	2302      	movs	r3, #2
 80072d6:	73fb      	strb	r3, [r7, #15]
 80072d8:	e001      	b.n	80072de <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80072da:	2302      	movs	r3, #2
 80072dc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80072de:	7bfb      	ldrb	r3, [r7, #15]
}
 80072e0:	4618      	mov	r0, r3
 80072e2:	3714      	adds	r7, #20
 80072e4:	46bd      	mov	sp, r7
 80072e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ea:	4770      	bx	lr

080072ec <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80072ec:	b480      	push	{r7}
 80072ee:	b085      	sub	sp, #20
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
 80072f4:	460b      	mov	r3, r1
 80072f6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_OK;
 80072f8:	2300      	movs	r3, #0
 80072fa:	73fb      	strb	r3, [r7, #15]

  if(interface < phost->device.CfgDesc.bNumInterfaces)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
 8007302:	78fa      	ldrb	r2, [r7, #3]
 8007304:	429a      	cmp	r2, r3
 8007306:	d204      	bcs.n	8007312 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	78fa      	ldrb	r2, [r7, #3]
 800730c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
 8007310:	e001      	b.n	8007316 <USBH_SelectInterface+0x2a>
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );
  }
  else
  {
    USBH_ErrLog ("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007312:	2302      	movs	r3, #2
 8007314:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8007316:	7bfb      	ldrb	r3, [r7, #15]
}
 8007318:	4618      	mov	r0, r3
 800731a:	3714      	adds	r7, #20
 800731c:	46bd      	mov	sp, r7
 800731e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007322:	4770      	bx	lr

08007324 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007324:	b480      	push	{r7}
 8007326:	b087      	sub	sp, #28
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
 800732c:	4608      	mov	r0, r1
 800732e:	4611      	mov	r1, r2
 8007330:	461a      	mov	r2, r3
 8007332:	4603      	mov	r3, r0
 8007334:	70fb      	strb	r3, [r7, #3]
 8007336:	460b      	mov	r3, r1
 8007338:	70bb      	strb	r3, [r7, #2]
 800733a:	4613      	mov	r3, r2
 800733c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_CfgDescTypeDef          *pcfg ;
  uint8_t                        if_ix = 0U;
 800733e:	2300      	movs	r3, #0
 8007340:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8007342:	2300      	movs	r3, #0
 8007344:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	f503 734d 	add.w	r3, r3, #820	; 0x334
 800734c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800734e:	e025      	b.n	800739c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007350:	7dfb      	ldrb	r3, [r7, #23]
 8007352:	221a      	movs	r2, #26
 8007354:	fb02 f303 	mul.w	r3, r2, r3
 8007358:	3308      	adds	r3, #8
 800735a:	68fa      	ldr	r2, [r7, #12]
 800735c:	4413      	add	r3, r2
 800735e:	3302      	adds	r3, #2
 8007360:	613b      	str	r3, [r7, #16]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 8007362:	693b      	ldr	r3, [r7, #16]
 8007364:	795b      	ldrb	r3, [r3, #5]
 8007366:	78fa      	ldrb	r2, [r7, #3]
 8007368:	429a      	cmp	r2, r3
 800736a:	d002      	beq.n	8007372 <USBH_FindInterface+0x4e>
 800736c:	78fb      	ldrb	r3, [r7, #3]
 800736e:	2bff      	cmp	r3, #255	; 0xff
 8007370:	d111      	bne.n	8007396 <USBH_FindInterface+0x72>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8007372:	693b      	ldr	r3, [r7, #16]
 8007374:	799b      	ldrb	r3, [r3, #6]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 8007376:	78ba      	ldrb	r2, [r7, #2]
 8007378:	429a      	cmp	r2, r3
 800737a:	d002      	beq.n	8007382 <USBH_FindInterface+0x5e>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 800737c:	78bb      	ldrb	r3, [r7, #2]
 800737e:	2bff      	cmp	r3, #255	; 0xff
 8007380:	d109      	bne.n	8007396 <USBH_FindInterface+0x72>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007382:	693b      	ldr	r3, [r7, #16]
 8007384:	79db      	ldrb	r3, [r3, #7]
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8007386:	787a      	ldrb	r2, [r7, #1]
 8007388:	429a      	cmp	r2, r3
 800738a:	d002      	beq.n	8007392 <USBH_FindInterface+0x6e>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800738c:	787b      	ldrb	r3, [r7, #1]
 800738e:	2bff      	cmp	r3, #255	; 0xff
 8007390:	d101      	bne.n	8007396 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007392:	7dfb      	ldrb	r3, [r7, #23]
 8007394:	e006      	b.n	80073a4 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007396:	7dfb      	ldrb	r3, [r7, #23]
 8007398:	3301      	adds	r3, #1
 800739a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800739c:	7dfb      	ldrb	r3, [r7, #23]
 800739e:	2b01      	cmp	r3, #1
 80073a0:	d9d6      	bls.n	8007350 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80073a2:	23ff      	movs	r3, #255	; 0xff
}
 80073a4:	4618      	mov	r0, r3
 80073a6:	371c      	adds	r7, #28
 80073a8:	46bd      	mov	sp, r7
 80073aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ae:	4770      	bx	lr

080073b0 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b082      	sub	sp, #8
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80073b8:	6878      	ldr	r0, [r7, #4]
 80073ba:	f005 fa6b 	bl	800c894 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS (phost, TRUE);
 80073be:	2101      	movs	r1, #1
 80073c0:	6878      	ldr	r0, [r7, #4]
 80073c2:	f005 fb82 	bl	800caca <USBH_LL_DriverVBUS>

  return USBH_OK;
 80073c6:	2300      	movs	r3, #0
}
 80073c8:	4618      	mov	r0, r3
 80073ca:	3708      	adds	r7, #8
 80073cc:	46bd      	mov	sp, r7
 80073ce:	bd80      	pop	{r7, pc}

080073d0 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b088      	sub	sp, #32
 80073d4:	af04      	add	r7, sp, #16
 80073d6:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80073d8:	2302      	movs	r3, #2
 80073da:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80073dc:	2300      	movs	r3, #0
 80073de:	73fb      	strb	r3, [r7, #15]

  /* check for Host port events */
  if (((USBH_IsPortEnabled(phost) == 0U)) && (phost->gState != HOST_IDLE))
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f000 fb7e 	bl	8007ae2 <USBH_IsPortEnabled>
 80073e6:	4603      	mov	r3, r0
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d10c      	bne.n	8007406 <USBH_Process+0x36>
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	781b      	ldrb	r3, [r3, #0]
 80073f0:	b2db      	uxtb	r3, r3
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d007      	beq.n	8007406 <USBH_Process+0x36>
  {
    if(phost->gState != HOST_DEV_DISCONNECTED)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	781b      	ldrb	r3, [r3, #0]
 80073fa:	b2db      	uxtb	r3, r3
 80073fc:	2b03      	cmp	r3, #3
 80073fe:	d002      	beq.n	8007406 <USBH_Process+0x36>
    {
      phost->gState = HOST_DEV_DISCONNECTED;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2203      	movs	r2, #3
 8007404:	701a      	strb	r2, [r3, #0]
    }
  }

  switch (phost->gState)
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	781b      	ldrb	r3, [r3, #0]
 800740a:	b2db      	uxtb	r3, r3
 800740c:	2b0b      	cmp	r3, #11
 800740e:	f200 81ab 	bhi.w	8007768 <USBH_Process+0x398>
 8007412:	a201      	add	r2, pc, #4	; (adr r2, 8007418 <USBH_Process+0x48>)
 8007414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007418:	08007449 	.word	0x08007449
 800741c:	08007487 	.word	0x08007487
 8007420:	0800749b 	.word	0x0800749b
 8007424:	08007743 	.word	0x08007743
 8007428:	08007769 	.word	0x08007769
 800742c:	08007545 	.word	0x08007545
 8007430:	080076dd 	.word	0x080076dd
 8007434:	08007575 	.word	0x08007575
 8007438:	080075b1 	.word	0x080075b1
 800743c:	080075eb 	.word	0x080075eb
 8007440:	08007633 	.word	0x08007633
 8007444:	0800772b 	.word	0x0800772b
  {
  case HOST_IDLE :

    if (phost->device.is_connected)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800744e:	b2db      	uxtb	r3, r3
 8007450:	2b00      	cmp	r3, #0
 8007452:	f000 818b 	beq.w	800776c <USBH_Process+0x39c>
    {
      /* Wait for 200 ms after connection */
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2201      	movs	r2, #1
 800745a:	701a      	strb	r2, [r3, #0]
      USBH_Delay(200U);
 800745c:	20c8      	movs	r0, #200	; 0xc8
 800745e:	f005 fb7e 	bl	800cb5e <USBH_Delay>
      USBH_LL_ResetPort(phost);
 8007462:	6878      	ldr	r0, [r7, #4]
 8007464:	f005 fa71 	bl	800c94a <USBH_LL_ResetPort>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2201      	movs	r2, #1
 800746c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800747c:	2200      	movs	r2, #0
 800747e:	4619      	mov	r1, r3
 8007480:	f001 fb36 	bl	8008af0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8007484:	e172      	b.n	800776c <USBH_Process+0x39c>

  case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Eabled */

    if (phost->device.PortEnabled == 1U)
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800748c:	2b01      	cmp	r3, #1
 800748e:	f040 816f 	bne.w	8007770 <USBH_Process+0x3a0>
    {
      phost->gState = HOST_DEV_ATTACHED;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2202      	movs	r2, #2
 8007496:	701a      	strb	r2, [r3, #0]
    }
    break;
 8007498:	e16a      	b.n	8007770 <USBH_Process+0x3a0>
  case HOST_DEV_ATTACHED :

    USBH_UsrLog("USB Device Attached");

    /* Wait for 100 ms after Reset */
    USBH_Delay(100U);
 800749a:	2064      	movs	r0, #100	; 0x64
 800749c:	f005 fb5f 	bl	800cb5e <USBH_Delay>

    phost->device.speed = USBH_LL_GetSpeed(phost);
 80074a0:	6878      	ldr	r0, [r7, #4]
 80074a2:	f005 fa2d 	bl	800c900 <USBH_LL_GetSpeed>
 80074a6:	4603      	mov	r3, r0
 80074a8:	461a      	mov	r2, r3
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

    phost->gState = HOST_ENUMERATION;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2205      	movs	r2, #5
 80074b4:	701a      	strb	r2, [r3, #0]

    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 80074b6:	2100      	movs	r1, #0
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	f001 fa16 	bl	80088ea <USBH_AllocPipe>
 80074be:	4603      	mov	r3, r0
 80074c0:	461a      	mov	r2, r3
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	715a      	strb	r2, [r3, #5]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 80074c6:	2180      	movs	r1, #128	; 0x80
 80074c8:	6878      	ldr	r0, [r7, #4]
 80074ca:	f001 fa0e 	bl	80088ea <USBH_AllocPipe>
 80074ce:	4603      	mov	r3, r0
 80074d0:	461a      	mov	r2, r3
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	711a      	strb	r2, [r3, #4]


    /* Open Control pipes */
    USBH_OpenPipe (phost,
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	7919      	ldrb	r1, [r3, #4]
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_in,
                   0x80U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 80074e6:	687a      	ldr	r2, [r7, #4]
 80074e8:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 80074ea:	b292      	uxth	r2, r2
 80074ec:	9202      	str	r2, [sp, #8]
 80074ee:	2200      	movs	r2, #0
 80074f0:	9201      	str	r2, [sp, #4]
 80074f2:	9300      	str	r3, [sp, #0]
 80074f4:	4603      	mov	r3, r0
 80074f6:	2280      	movs	r2, #128	; 0x80
 80074f8:	6878      	ldr	r0, [r7, #4]
 80074fa:	f001 f9c7 	bl	800888c <USBH_OpenPipe>

    /* Open Control pipes */
    USBH_OpenPipe (phost,
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	7959      	ldrb	r1, [r3, #5]
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_out,
                   0x00U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 800750e:	687a      	ldr	r2, [r7, #4]
 8007510:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 8007512:	b292      	uxth	r2, r2
 8007514:	9202      	str	r2, [sp, #8]
 8007516:	2200      	movs	r2, #0
 8007518:	9201      	str	r2, [sp, #4]
 800751a:	9300      	str	r3, [sp, #0]
 800751c:	4603      	mov	r3, r0
 800751e:	2200      	movs	r2, #0
 8007520:	6878      	ldr	r0, [r7, #4]
 8007522:	f001 f9b3 	bl	800888c <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2201      	movs	r2, #1
 800752a:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800753a:	2200      	movs	r2, #0
 800753c:	4619      	mov	r1, r3
 800753e:	f001 fad7 	bl	8008af0 <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8007542:	e120      	b.n	8007786 <USBH_Process+0x3b6>

  case HOST_ENUMERATION:
    /* Check for enumeration status */
    if ( USBH_HandleEnum(phost) == USBH_OK)
 8007544:	6878      	ldr	r0, [r7, #4]
 8007546:	f000 f923 	bl	8007790 <USBH_HandleEnum>
 800754a:	4603      	mov	r3, r0
 800754c:	2b00      	cmp	r3, #0
 800754e:	f040 8111 	bne.w	8007774 <USBH_Process+0x3a4>
    {
      /* The function shall return USBH_OK when full enumeration is complete */
      USBH_UsrLog ("Enumeration done.");
      phost->device.current_interface = 0U;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2200      	movs	r2, #0
 8007556:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
      if(phost->device.DevDesc.bNumConfigurations == 1U)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	f893 3333 	ldrb.w	r3, [r3, #819]	; 0x333
 8007560:	2b01      	cmp	r3, #1
 8007562:	d103      	bne.n	800756c <USBH_Process+0x19c>
      {
        USBH_UsrLog ("This device has only 1 configuration.");
        phost->gState  = HOST_SET_CONFIGURATION;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2208      	movs	r2, #8
 8007568:	701a      	strb	r2, [r3, #0]
      {
        phost->gState  = HOST_INPUT;
      }

    }
    break;
 800756a:	e103      	b.n	8007774 <USBH_Process+0x3a4>
        phost->gState  = HOST_INPUT;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2207      	movs	r2, #7
 8007570:	701a      	strb	r2, [r3, #0]
    break;
 8007572:	e0ff      	b.n	8007774 <USBH_Process+0x3a4>

  case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if(phost->pUser != NULL)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800757a:	2b00      	cmp	r3, #0
 800757c:	f000 80fc 	beq.w	8007778 <USBH_Process+0x3a8>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007586:	2101      	movs	r1, #1
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2208      	movs	r2, #8
 8007590:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2205      	movs	r2, #5
 8007596:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80075a6:	2200      	movs	r2, #0
 80075a8:	4619      	mov	r1, r3
 80075aa:	f001 faa1 	bl	8008af0 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 80075ae:	e0e3      	b.n	8007778 <USBH_Process+0x3a8>

  case HOST_SET_CONFIGURATION:
    /* set configuration */
    if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f893 3339 	ldrb.w	r3, [r3, #825]	; 0x339
 80075b6:	b29b      	uxth	r3, r3
 80075b8:	4619      	mov	r1, r3
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f000 fc09 	bl	8007dd2 <USBH_SetCfg>
 80075c0:	4603      	mov	r3, r0
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d102      	bne.n	80075cc <USBH_Process+0x1fc>
    {
      phost->gState  = HOST_SET_WAKEUP_FEATURE;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2209      	movs	r2, #9
 80075ca:	701a      	strb	r2, [r3, #0]
      USBH_UsrLog ("Default configuration set.");
    }

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2201      	movs	r2, #1
 80075d0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80075e0:	2200      	movs	r2, #0
 80075e2:	4619      	mov	r1, r3
 80075e4:	f001 fa84 	bl	8008af0 <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 80075e8:	e0cd      	b.n	8007786 <USBH_Process+0x3b6>

  case  HOST_SET_WAKEUP_FEATURE:

    if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
 80075f0:	f003 0320 	and.w	r3, r3, #32
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d00a      	beq.n	800760e <USBH_Process+0x23e>
    {
      if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 80075f8:	2101      	movs	r1, #1
 80075fa:	6878      	ldr	r0, [r7, #4]
 80075fc:	f000 fc0c 	bl	8007e18 <USBH_SetFeature>
 8007600:	4603      	mov	r3, r0
 8007602:	2b00      	cmp	r3, #0
 8007604:	d106      	bne.n	8007614 <USBH_Process+0x244>
      {
        USBH_UsrLog ("Device remote wakeup enabled");
        phost->gState  = HOST_CHECK_CLASS;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	220a      	movs	r2, #10
 800760a:	701a      	strb	r2, [r3, #0]
 800760c:	e002      	b.n	8007614 <USBH_Process+0x244>
      }
    }
    else
    {
      phost->gState  = HOST_CHECK_CLASS;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	220a      	movs	r2, #10
 8007612:	701a      	strb	r2, [r3, #0]
    }

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2201      	movs	r2, #1
 8007618:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007628:	2200      	movs	r2, #0
 800762a:	4619      	mov	r1, r3
 800762c:	f001 fa60 	bl	8008af0 <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8007630:	e0a9      	b.n	8007786 <USBH_Process+0x3b6>

  case HOST_CHECK_CLASS:

    if(phost->ClassNumber == 0U)
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007638:	2b00      	cmp	r3, #0
 800763a:	d040      	beq.n	80076be <USBH_Process+0x2ee>
    {
      USBH_UsrLog ("No Class has been registered.");
    }
    else
    {
      phost->pActiveClass = NULL;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2200      	movs	r2, #0
 8007640:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378

      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007644:	2300      	movs	r3, #0
 8007646:	73fb      	strb	r3, [r7, #15]
 8007648:	e017      	b.n	800767a <USBH_Process+0x2aa>
      {
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800764a:	7bfb      	ldrb	r3, [r7, #15]
 800764c:	687a      	ldr	r2, [r7, #4]
 800764e:	33dc      	adds	r3, #220	; 0xdc
 8007650:	009b      	lsls	r3, r3, #2
 8007652:	4413      	add	r3, r2
 8007654:	685b      	ldr	r3, [r3, #4]
 8007656:	791a      	ldrb	r2, [r3, #4]
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	f893 3343 	ldrb.w	r3, [r3, #835]	; 0x343
 800765e:	429a      	cmp	r2, r3
 8007660:	d108      	bne.n	8007674 <USBH_Process+0x2a4>
        {
          phost->pActiveClass = phost->pClass[idx];
 8007662:	7bfb      	ldrb	r3, [r7, #15]
 8007664:	687a      	ldr	r2, [r7, #4]
 8007666:	33dc      	adds	r3, #220	; 0xdc
 8007668:	009b      	lsls	r3, r3, #2
 800766a:	4413      	add	r3, r2
 800766c:	685a      	ldr	r2, [r3, #4]
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007674:	7bfb      	ldrb	r3, [r7, #15]
 8007676:	3301      	adds	r3, #1
 8007678:	73fb      	strb	r3, [r7, #15]
 800767a:	7bfb      	ldrb	r3, [r7, #15]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d0e4      	beq.n	800764a <USBH_Process+0x27a>
        }
      }

      if(phost->pActiveClass != NULL)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007686:	2b00      	cmp	r3, #0
 8007688:	d016      	beq.n	80076b8 <USBH_Process+0x2e8>
      {
        if(phost->pActiveClass->Init(phost)== USBH_OK)
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007690:	689b      	ldr	r3, [r3, #8]
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	4798      	blx	r3
 8007696:	4603      	mov	r3, r0
 8007698:	2b00      	cmp	r3, #0
 800769a:	d109      	bne.n	80076b0 <USBH_Process+0x2e0>
        {
          phost->gState  = HOST_CLASS_REQUEST;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2206      	movs	r2, #6
 80076a0:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog ("%s class started.", phost->pActiveClass->Name);

          /* Inform user that a class has been activated */
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80076a8:	2103      	movs	r1, #3
 80076aa:	6878      	ldr	r0, [r7, #4]
 80076ac:	4798      	blx	r3
 80076ae:	e006      	b.n	80076be <USBH_Process+0x2ee>
        }
        else
        {
          phost->gState  = HOST_ABORT_STATE;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	220d      	movs	r2, #13
 80076b4:	701a      	strb	r2, [r3, #0]
 80076b6:	e002      	b.n	80076be <USBH_Process+0x2ee>
          USBH_UsrLog ("Device not supporting %s class.", phost->pActiveClass->Name);
        }
      }
      else
      {
        phost->gState  = HOST_ABORT_STATE;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	220d      	movs	r2, #13
 80076bc:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog ("No registered class for this device.");
      }
    }

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2205      	movs	r2, #5
 80076c2:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80076d2:	2200      	movs	r2, #0
 80076d4:	4619      	mov	r1, r3
 80076d6:	f001 fa0b 	bl	8008af0 <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 80076da:	e054      	b.n	8007786 <USBH_Process+0x3b6>

  case HOST_CLASS_REQUEST:
    /* process class standard control requests state machine */
    if(phost->pActiveClass != NULL)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d00f      	beq.n	8007706 <USBH_Process+0x336>
    {
      status = phost->pActiveClass->Requests(phost);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80076ec:	691b      	ldr	r3, [r3, #16]
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	4798      	blx	r3
 80076f2:	4603      	mov	r3, r0
 80076f4:	73bb      	strb	r3, [r7, #14]

      if(status == USBH_OK)
 80076f6:	7bbb      	ldrb	r3, [r7, #14]
 80076f8:	b2db      	uxtb	r3, r3
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d13e      	bne.n	800777c <USBH_Process+0x3ac>
      {
        phost->gState  = HOST_CLASS;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	220b      	movs	r2, #11
 8007702:	701a      	strb	r2, [r3, #0]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }

    break;
 8007704:	e03a      	b.n	800777c <USBH_Process+0x3ac>
      phost->gState  = HOST_ABORT_STATE;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	220d      	movs	r2, #13
 800770a:	701a      	strb	r2, [r3, #0]
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2205      	movs	r2, #5
 8007710:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007720:	2200      	movs	r2, #0
 8007722:	4619      	mov	r1, r3
 8007724:	f001 f9e4 	bl	8008af0 <osMessagePut>
    break;
 8007728:	e028      	b.n	800777c <USBH_Process+0x3ac>
  case HOST_CLASS:
    /* process class state machine */
    if(phost->pActiveClass != NULL)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007730:	2b00      	cmp	r3, #0
 8007732:	d025      	beq.n	8007780 <USBH_Process+0x3b0>
    {
      phost->pActiveClass->BgndProcess(phost);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800773a:	695b      	ldr	r3, [r3, #20]
 800773c:	6878      	ldr	r0, [r7, #4]
 800773e:	4798      	blx	r3
    }
    break;
 8007740:	e01e      	b.n	8007780 <USBH_Process+0x3b0>

  case HOST_DEV_DISCONNECTED :

    DeInitStateMachine(phost);
 8007742:	6878      	ldr	r0, [r7, #4]
 8007744:	f7ff fd5e 	bl	8007204 <DeInitStateMachine>

    /* Re-Initilaize Host for new Enumeration */
    if(phost->pActiveClass != NULL)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800774e:	2b00      	cmp	r3, #0
 8007750:	d018      	beq.n	8007784 <USBH_Process+0x3b4>
    {
      phost->pActiveClass->DeInit(phost);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007758:	68db      	ldr	r3, [r3, #12]
 800775a:	6878      	ldr	r0, [r7, #4]
 800775c:	4798      	blx	r3
      phost->pActiveClass = NULL;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2200      	movs	r2, #0
 8007762:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
    }
    break;
 8007766:	e00d      	b.n	8007784 <USBH_Process+0x3b4>

  case HOST_ABORT_STATE:
  default :
    break;
 8007768:	bf00      	nop
 800776a:	e00c      	b.n	8007786 <USBH_Process+0x3b6>
    break;
 800776c:	bf00      	nop
 800776e:	e00a      	b.n	8007786 <USBH_Process+0x3b6>
    break;
 8007770:	bf00      	nop
 8007772:	e008      	b.n	8007786 <USBH_Process+0x3b6>
    break;
 8007774:	bf00      	nop
 8007776:	e006      	b.n	8007786 <USBH_Process+0x3b6>
    break;
 8007778:	bf00      	nop
 800777a:	e004      	b.n	8007786 <USBH_Process+0x3b6>
    break;
 800777c:	bf00      	nop
 800777e:	e002      	b.n	8007786 <USBH_Process+0x3b6>
    break;
 8007780:	bf00      	nop
 8007782:	e000      	b.n	8007786 <USBH_Process+0x3b6>
    break;
 8007784:	bf00      	nop
  }
 return USBH_OK;
 8007786:	2300      	movs	r3, #0
}
 8007788:	4618      	mov	r0, r3
 800778a:	3710      	adds	r7, #16
 800778c:	46bd      	mov	sp, r7
 800778e:	bd80      	pop	{r7, pc}

08007790 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum (USBH_HandleTypeDef *phost)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b088      	sub	sp, #32
 8007794:	af04      	add	r7, sp, #16
 8007796:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007798:	2301      	movs	r3, #1
 800779a:	73fb      	strb	r3, [r7, #15]

  switch (phost->EnumState)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	785b      	ldrb	r3, [r3, #1]
 80077a0:	2b07      	cmp	r3, #7
 80077a2:	f200 8132 	bhi.w	8007a0a <USBH_HandleEnum+0x27a>
 80077a6:	a201      	add	r2, pc, #4	; (adr r2, 80077ac <USBH_HandleEnum+0x1c>)
 80077a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077ac:	080077cd 	.word	0x080077cd
 80077b0:	0800783f 	.word	0x0800783f
 80077b4:	08007857 	.word	0x08007857
 80077b8:	080078cd 	.word	0x080078cd
 80077bc:	080078e5 	.word	0x080078e5
 80077c0:	08007903 	.word	0x08007903
 80077c4:	0800796f 	.word	0x0800796f
 80077c8:	080079bf 	.word	0x080079bf
  {
  case ENUM_IDLE:
    /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
    if ( USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 80077cc:	2108      	movs	r1, #8
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	f000 fa2f 	bl	8007c32 <USBH_Get_DevDesc>
 80077d4:	4603      	mov	r3, r0
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	f040 8119 	bne.w	8007a0e <USBH_HandleEnum+0x27e>
    {
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	f893 2329 	ldrb.w	r2, [r3, #809]	; 0x329
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	719a      	strb	r2, [r3, #6]

      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2201      	movs	r2, #1
 80077ea:	705a      	strb	r2, [r3, #1]

      /* modify control channels configuration for MaxPacket size */
      USBH_OpenPipe (phost,
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	7919      	ldrb	r1, [r3, #4]
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 80077fc:	687a      	ldr	r2, [r7, #4]
 80077fe:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8007800:	b292      	uxth	r2, r2
 8007802:	9202      	str	r2, [sp, #8]
 8007804:	2200      	movs	r2, #0
 8007806:	9201      	str	r2, [sp, #4]
 8007808:	9300      	str	r3, [sp, #0]
 800780a:	4603      	mov	r3, r0
 800780c:	2280      	movs	r2, #128	; 0x80
 800780e:	6878      	ldr	r0, [r7, #4]
 8007810:	f001 f83c 	bl	800888c <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	7959      	ldrb	r1, [r3, #5]
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8007824:	687a      	ldr	r2, [r7, #4]
 8007826:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8007828:	b292      	uxth	r2, r2
 800782a:	9202      	str	r2, [sp, #8]
 800782c:	2200      	movs	r2, #0
 800782e:	9201      	str	r2, [sp, #4]
 8007830:	9300      	str	r3, [sp, #0]
 8007832:	4603      	mov	r3, r0
 8007834:	2200      	movs	r2, #0
 8007836:	6878      	ldr	r0, [r7, #4]
 8007838:	f001 f828 	bl	800888c <USBH_OpenPipe>

    }
    break;
 800783c:	e0e7      	b.n	8007a0e <USBH_HandleEnum+0x27e>

  case ENUM_GET_FULL_DEV_DESC:
    /* Get FULL Device Desc  */
    if ( USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE)== USBH_OK)
 800783e:	2112      	movs	r1, #18
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f000 f9f6 	bl	8007c32 <USBH_Get_DevDesc>
 8007846:	4603      	mov	r3, r0
 8007848:	2b00      	cmp	r3, #0
 800784a:	f040 80e2 	bne.w	8007a12 <USBH_HandleEnum+0x282>
    {
      USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct );
      USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor );

      phost->EnumState = ENUM_SET_ADDR;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2202      	movs	r2, #2
 8007852:	705a      	strb	r2, [r3, #1]

    }
    break;
 8007854:	e0dd      	b.n	8007a12 <USBH_HandleEnum+0x282>

  case ENUM_SET_ADDR:
    /* set address */
    if ( USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 8007856:	2101      	movs	r1, #1
 8007858:	6878      	ldr	r0, [r7, #4]
 800785a:	f000 fa96 	bl	8007d8a <USBH_SetAddress>
 800785e:	4603      	mov	r3, r0
 8007860:	2b00      	cmp	r3, #0
 8007862:	f040 80d8 	bne.w	8007a16 <USBH_HandleEnum+0x286>
    {
      USBH_Delay(2U);
 8007866:	2002      	movs	r0, #2
 8007868:	f005 f979 	bl	800cb5e <USBH_Delay>
      phost->device.address = USBH_DEVICE_ADDRESS;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2201      	movs	r2, #1
 8007870:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

      /* user callback for device address assigned */
      USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
      phost->EnumState = ENUM_GET_CFG_DESC;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2203      	movs	r2, #3
 8007878:	705a      	strb	r2, [r3, #1]

      /* modify control channels to update device address */
      USBH_OpenPipe (phost,
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	7919      	ldrb	r1, [r3, #4]
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 800788a:	687a      	ldr	r2, [r7, #4]
 800788c:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 800788e:	b292      	uxth	r2, r2
 8007890:	9202      	str	r2, [sp, #8]
 8007892:	2200      	movs	r2, #0
 8007894:	9201      	str	r2, [sp, #4]
 8007896:	9300      	str	r3, [sp, #0]
 8007898:	4603      	mov	r3, r0
 800789a:	2280      	movs	r2, #128	; 0x80
 800789c:	6878      	ldr	r0, [r7, #4]
 800789e:	f000 fff5 	bl	800888c <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	7959      	ldrb	r1, [r3, #5]
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 80078b2:	687a      	ldr	r2, [r7, #4]
 80078b4:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 80078b6:	b292      	uxth	r2, r2
 80078b8:	9202      	str	r2, [sp, #8]
 80078ba:	2200      	movs	r2, #0
 80078bc:	9201      	str	r2, [sp, #4]
 80078be:	9300      	str	r3, [sp, #0]
 80078c0:	4603      	mov	r3, r0
 80078c2:	2200      	movs	r2, #0
 80078c4:	6878      	ldr	r0, [r7, #4]
 80078c6:	f000 ffe1 	bl	800888c <USBH_OpenPipe>
    }
    break;
 80078ca:	e0a4      	b.n	8007a16 <USBH_HandleEnum+0x286>

  case ENUM_GET_CFG_DESC:
    /* get standard configuration descriptor */
    if ( USBH_Get_CfgDesc(phost,
 80078cc:	2109      	movs	r1, #9
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	f000 f9d7 	bl	8007c82 <USBH_Get_CfgDesc>
 80078d4:	4603      	mov	r3, r0
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	f040 809f 	bne.w	8007a1a <USBH_HandleEnum+0x28a>
                          USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2204      	movs	r2, #4
 80078e0:	705a      	strb	r2, [r3, #1]
    }
    break;
 80078e2:	e09a      	b.n	8007a1a <USBH_HandleEnum+0x28a>

  case ENUM_GET_FULL_CFG_DESC:
    /* get FULL config descriptor (config, interface, endpoints) */
    if (USBH_Get_CfgDesc(phost,
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	f8b3 3336 	ldrh.w	r3, [r3, #822]	; 0x336
 80078ea:	4619      	mov	r1, r3
 80078ec:	6878      	ldr	r0, [r7, #4]
 80078ee:	f000 f9c8 	bl	8007c82 <USBH_Get_CfgDesc>
 80078f2:	4603      	mov	r3, r0
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	f040 8092 	bne.w	8007a1e <USBH_HandleEnum+0x28e>
                         phost->device.CfgDesc.wTotalLength) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2205      	movs	r2, #5
 80078fe:	705a      	strb	r2, [r3, #1]
    }
    break;
 8007900:	e08d      	b.n	8007a1e <USBH_HandleEnum+0x28e>

  case ENUM_GET_MFC_STRING_DESC:
    if (phost->device.DevDesc.iManufacturer != 0U)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
 8007908:	2b00      	cmp	r3, #0
 800790a:	d01e      	beq.n	800794a <USBH_HandleEnum+0x1ba>
    { /* Check that Manufacturer String is available */

      if ( USBH_Get_StringDesc(phost,
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	f893 1330 	ldrb.w	r1, [r3, #816]	; 0x330
                               phost->device.DevDesc.iManufacturer,
                               phost->device.Data,
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8007918:	23ff      	movs	r3, #255	; 0xff
 800791a:	6878      	ldr	r0, [r7, #4]
 800791c:	f000 f9d5 	bl	8007cca <USBH_Get_StringDesc>
 8007920:	4603      	mov	r3, r0
 8007922:	2b00      	cmp	r3, #0
 8007924:	d17d      	bne.n	8007a22 <USBH_HandleEnum+0x292>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Manufacturing string */
        USBH_UsrLog("Manufacturer : %s",  (char *)(void*)phost->device.Data);
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2206      	movs	r2, #6
 800792a:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2205      	movs	r2, #5
 8007930:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007940:	2200      	movs	r2, #0
 8007942:	4619      	mov	r1, r3
 8007944:	f001 f8d4 	bl	8008af0 <osMessagePut>
#else
     (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8007948:	e06b      	b.n	8007a22 <USBH_HandleEnum+0x292>
     phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2206      	movs	r2, #6
 800794e:	705a      	strb	r2, [r3, #1]
     phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2205      	movs	r2, #5
 8007954:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
     (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007964:	2200      	movs	r2, #0
 8007966:	4619      	mov	r1, r3
 8007968:	f001 f8c2 	bl	8008af0 <osMessagePut>
    break;
 800796c:	e059      	b.n	8007a22 <USBH_HandleEnum+0x292>

  case ENUM_GET_PRODUCT_STRING_DESC:
    if (phost->device.DevDesc.iProduct != 0U)
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
 8007974:	2b00      	cmp	r3, #0
 8007976:	d010      	beq.n	800799a <USBH_HandleEnum+0x20a>
    { /* Check that Product string is available */
      if ( USBH_Get_StringDesc(phost,
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	f893 1331 	ldrb.w	r1, [r3, #817]	; 0x331
                               phost->device.DevDesc.iProduct,
                               phost->device.Data,
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8007984:	23ff      	movs	r3, #255	; 0xff
 8007986:	6878      	ldr	r0, [r7, #4]
 8007988:	f000 f99f 	bl	8007cca <USBH_Get_StringDesc>
 800798c:	4603      	mov	r3, r0
 800798e:	2b00      	cmp	r3, #0
 8007990:	d149      	bne.n	8007a26 <USBH_HandleEnum+0x296>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Product string */
        USBH_UsrLog("Product : %s",  (char *)(void *)phost->device.Data);
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2207      	movs	r2, #7
 8007996:	705a      	strb	r2, [r3, #1]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8007998:	e045      	b.n	8007a26 <USBH_HandleEnum+0x296>
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2207      	movs	r2, #7
 800799e:	705a      	strb	r2, [r3, #1]
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2205      	movs	r2, #5
 80079a4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80079b4:	2200      	movs	r2, #0
 80079b6:	4619      	mov	r1, r3
 80079b8:	f001 f89a 	bl	8008af0 <osMessagePut>
    break;
 80079bc:	e033      	b.n	8007a26 <USBH_HandleEnum+0x296>

  case ENUM_GET_SERIALNUM_STRING_DESC:
    if (phost->device.DevDesc.iSerialNumber != 0U)
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d00f      	beq.n	80079e8 <USBH_HandleEnum+0x258>
    { /* Check that Serial number string is available */
      if ( USBH_Get_StringDesc(phost,
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	f893 1332 	ldrb.w	r1, [r3, #818]	; 0x332
                               phost->device.DevDesc.iSerialNumber,
                               phost->device.Data,
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 80079d4:	23ff      	movs	r3, #255	; 0xff
 80079d6:	6878      	ldr	r0, [r7, #4]
 80079d8:	f000 f977 	bl	8007cca <USBH_Get_StringDesc>
 80079dc:	4603      	mov	r3, r0
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d123      	bne.n	8007a2a <USBH_HandleEnum+0x29a>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Serial number string */
         USBH_UsrLog("Serial Number : %s",  (char *)(void*)phost->device.Data);
        Status = USBH_OK;
 80079e2:	2300      	movs	r3, #0
 80079e4:	73fb      	strb	r3, [r7, #15]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 80079e6:	e020      	b.n	8007a2a <USBH_HandleEnum+0x29a>
      Status = USBH_OK;
 80079e8:	2300      	movs	r3, #0
 80079ea:	73fb      	strb	r3, [r7, #15]
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2205      	movs	r2, #5
 80079f0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007a00:	2200      	movs	r2, #0
 8007a02:	4619      	mov	r1, r3
 8007a04:	f001 f874 	bl	8008af0 <osMessagePut>
    break;
 8007a08:	e00f      	b.n	8007a2a <USBH_HandleEnum+0x29a>

  default:
    break;
 8007a0a:	bf00      	nop
 8007a0c:	e00e      	b.n	8007a2c <USBH_HandleEnum+0x29c>
    break;
 8007a0e:	bf00      	nop
 8007a10:	e00c      	b.n	8007a2c <USBH_HandleEnum+0x29c>
    break;
 8007a12:	bf00      	nop
 8007a14:	e00a      	b.n	8007a2c <USBH_HandleEnum+0x29c>
    break;
 8007a16:	bf00      	nop
 8007a18:	e008      	b.n	8007a2c <USBH_HandleEnum+0x29c>
    break;
 8007a1a:	bf00      	nop
 8007a1c:	e006      	b.n	8007a2c <USBH_HandleEnum+0x29c>
    break;
 8007a1e:	bf00      	nop
 8007a20:	e004      	b.n	8007a2c <USBH_HandleEnum+0x29c>
    break;
 8007a22:	bf00      	nop
 8007a24:	e002      	b.n	8007a2c <USBH_HandleEnum+0x29c>
    break;
 8007a26:	bf00      	nop
 8007a28:	e000      	b.n	8007a2c <USBH_HandleEnum+0x29c>
    break;
 8007a2a:	bf00      	nop
  }
  return Status;
 8007a2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a2e:	4618      	mov	r0, r3
 8007a30:	3710      	adds	r7, #16
 8007a32:	46bd      	mov	sp, r7
 8007a34:	bd80      	pop	{r7, pc}
 8007a36:	bf00      	nop

08007a38 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer  (USBH_HandleTypeDef *phost, uint32_t time)
{
 8007a38:	b480      	push	{r7}
 8007a3a:	b083      	sub	sp, #12
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
 8007a40:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	683a      	ldr	r2, [r7, #0]
 8007a46:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
}
 8007a4a:	bf00      	nop
 8007a4c:	370c      	adds	r7, #12
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a54:	4770      	bx	lr

08007a56 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer  (USBH_HandleTypeDef *phost)
{
 8007a56:	b580      	push	{r7, lr}
 8007a58:	b082      	sub	sp, #8
 8007a5a:	af00      	add	r7, sp, #0
 8007a5c:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8007a64:	1c5a      	adds	r2, r3, #1
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
  USBH_HandleSof(phost);
 8007a6c:	6878      	ldr	r0, [r7, #4]
 8007a6e:	f000 f804 	bl	8007a7a <USBH_HandleSof>
}
 8007a72:	bf00      	nop
 8007a74:	3708      	adds	r7, #8
 8007a76:	46bd      	mov	sp, r7
 8007a78:	bd80      	pop	{r7, pc}

08007a7a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
{
 8007a7a:	b580      	push	{r7, lr}
 8007a7c:	b082      	sub	sp, #8
 8007a7e:	af00      	add	r7, sp, #0
 8007a80:	6078      	str	r0, [r7, #4]
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	781b      	ldrb	r3, [r3, #0]
 8007a86:	b2db      	uxtb	r3, r3
 8007a88:	2b0b      	cmp	r3, #11
 8007a8a:	d10a      	bne.n	8007aa2 <USBH_HandleSof+0x28>
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d005      	beq.n	8007aa2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007a9c:	699b      	ldr	r3, [r3, #24]
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	4798      	blx	r3
  }
}
 8007aa2:	bf00      	nop
 8007aa4:	3708      	adds	r7, #8
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bd80      	pop	{r7, pc}

08007aaa <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled (USBH_HandleTypeDef *phost)
{
 8007aaa:	b480      	push	{r7}
 8007aac:	b083      	sub	sp, #12
 8007aae:	af00      	add	r7, sp, #0
 8007ab0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2201      	movs	r2, #1
 8007ab6:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 8007aba:	bf00      	nop
}
 8007abc:	370c      	adds	r7, #12
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac4:	4770      	bx	lr

08007ac6 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled (USBH_HandleTypeDef *phost)
{
 8007ac6:	b480      	push	{r7}
 8007ac8:	b083      	sub	sp, #12
 8007aca:	af00      	add	r7, sp, #0
 8007acc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 8007ad6:	bf00      	nop
}
 8007ad8:	370c      	adds	r7, #12
 8007ada:	46bd      	mov	sp, r7
 8007adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae0:	4770      	bx	lr

08007ae2 <USBH_IsPortEnabled>:
  *         Is Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
uint8_t USBH_IsPortEnabled(USBH_HandleTypeDef *phost)
{
 8007ae2:	b480      	push	{r7}
 8007ae4:	b083      	sub	sp, #12
 8007ae6:	af00      	add	r7, sp, #0
 8007ae8:	6078      	str	r0, [r7, #4]
  return(phost->device.PortEnabled);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
}
 8007af0:	4618      	mov	r0, r3
 8007af2:	370c      	adds	r7, #12
 8007af4:	46bd      	mov	sp, r7
 8007af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afa:	4770      	bx	lr

08007afc <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect (USBH_HandleTypeDef *phost)
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b082      	sub	sp, #8
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
  if(phost->gState == HOST_IDLE )
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	781b      	ldrb	r3, [r3, #0]
 8007b08:	b2db      	uxtb	r3, r3
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d10f      	bne.n	8007b2e <USBH_LL_Connect+0x32>
  {
    phost->device.is_connected = 1U;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2201      	movs	r2, #1
 8007b12:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

    if(phost->pUser != NULL)
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d00e      	beq.n	8007b3e <USBH_LL_Connect+0x42>
    {
      phost->pUser(phost, HOST_USER_CONNECTION);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007b26:	2104      	movs	r1, #4
 8007b28:	6878      	ldr	r0, [r7, #4]
 8007b2a:	4798      	blx	r3
 8007b2c:	e007      	b.n	8007b3e <USBH_LL_Connect+0x42>
    }
  }
  else
  {
    if (phost->device.PortEnabled == 1U)
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007b34:	2b01      	cmp	r3, #1
 8007b36:	d102      	bne.n	8007b3e <USBH_LL_Connect+0x42>
    {
      phost->gState = HOST_DEV_ATTACHED;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2202      	movs	r2, #2
 8007b3c:	701a      	strb	r2, [r3, #0]
    }
  }

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2201      	movs	r2, #1
 8007b42:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007b52:	2200      	movs	r2, #0
 8007b54:	4619      	mov	r1, r3
 8007b56:	f000 ffcb 	bl	8008af0 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007b5a:	2300      	movs	r3, #0
}
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	3708      	adds	r7, #8
 8007b60:	46bd      	mov	sp, r7
 8007b62:	bd80      	pop	{r7, pc}

08007b64 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b082      	sub	sp, #8
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
  /*Stop Host */
  USBH_LL_Stop(phost);
 8007b6c:	6878      	ldr	r0, [r7, #4]
 8007b6e:	f004 feac 	bl	800c8ca <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	791b      	ldrb	r3, [r3, #4]
 8007b76:	4619      	mov	r1, r3
 8007b78:	6878      	ldr	r0, [r7, #4]
 8007b7a:	f000 fed4 	bl	8008926 <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	795b      	ldrb	r3, [r3, #5]
 8007b82:	4619      	mov	r1, r3
 8007b84:	6878      	ldr	r0, [r7, #4]
 8007b86:	f000 fece 	bl	8008926 <USBH_FreePipe>

  phost->device.is_connected = 0U;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  if(phost->pUser != NULL)
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d005      	beq.n	8007ba8 <USBH_LL_Disconnect+0x44>
  {
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007ba2:	2105      	movs	r1, #5
 8007ba4:	6878      	ldr	r0, [r7, #4]
 8007ba6:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected");

  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8007ba8:	6878      	ldr	r0, [r7, #4]
 8007baa:	f004 fe73 	bl	800c894 <USBH_LL_Start>

  phost->gState = HOST_DEV_DISCONNECTED;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2203      	movs	r2, #3
 8007bb2:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2201      	movs	r2, #1
 8007bb8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007bc8:	2200      	movs	r2, #0
 8007bca:	4619      	mov	r1, r3
 8007bcc:	f000 ff90 	bl	8008af0 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007bd0:	2300      	movs	r3, #0
}
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	3708      	adds	r7, #8
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	bd80      	pop	{r7, pc}

08007bda <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 8007bda:	b580      	push	{r7, lr}
 8007bdc:	b086      	sub	sp, #24
 8007bde:	af00      	add	r7, sp, #0
 8007be0:	6078      	str	r0, [r7, #4]
  osEvent event;

  for(;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	f8d3 13cc 	ldr.w	r1, [r3, #972]	; 0x3cc
 8007be8:	f107 030c 	add.w	r3, r7, #12
 8007bec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	f000 ffbd 	bl	8008b70 <osMessageGet>
    if(event.status == osEventMessage)
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	2b10      	cmp	r3, #16
 8007bfa:	d1f2      	bne.n	8007be2 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 8007bfc:	6878      	ldr	r0, [r7, #4]
 8007bfe:	f7ff fbe7 	bl	80073d0 <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 8007c02:	e7ee      	b.n	8007be2 <USBH_Process_OS+0x8>

08007c04 <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange (USBH_HandleTypeDef *phost)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b082      	sub	sp, #8
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2201      	movs	r2, #1
 8007c10:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007c20:	2200      	movs	r2, #0
 8007c22:	4619      	mov	r1, r3
 8007c24:	f000 ff64 	bl	8008af0 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif

  return USBH_OK;
 8007c28:	2300      	movs	r3, #0
}
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	3708      	adds	r7, #8
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bd80      	pop	{r7, pc}

08007c32 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007c32:	b580      	push	{r7, lr}
 8007c34:	b086      	sub	sp, #24
 8007c36:	af02      	add	r7, sp, #8
 8007c38:	6078      	str	r0, [r7, #4]
 8007c3a:	460b      	mov	r3, r1
 8007c3c:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if((status = USBH_GetDescriptor(phost,
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_DEVICE,
                                  phost->device.Data,
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 8007c44:	78fb      	ldrb	r3, [r7, #3]
 8007c46:	b29b      	uxth	r3, r3
 8007c48:	9300      	str	r3, [sp, #0]
 8007c4a:	4613      	mov	r3, r2
 8007c4c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007c50:	2100      	movs	r1, #0
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	f000 f864 	bl	8007d20 <USBH_GetDescriptor>
 8007c58:	4603      	mov	r3, r0
 8007c5a:	73fb      	strb	r3, [r7, #15]
 8007c5c:	7bfb      	ldrb	r3, [r7, #15]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d10a      	bne.n	8007c78 <USBH_Get_DevDesc+0x46>
                                  (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	f203 3022 	addw	r0, r3, #802	; 0x322
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007c6e:	78fa      	ldrb	r2, [r7, #3]
 8007c70:	b292      	uxth	r2, r2
 8007c72:	4619      	mov	r1, r3
 8007c74:	f000 f918 	bl	8007ea8 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }
  return status;
 8007c78:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	3710      	adds	r7, #16
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	bd80      	pop	{r7, pc}

08007c82 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                             uint16_t length)

{
 8007c82:	b580      	push	{r7, lr}
 8007c84:	b086      	sub	sp, #24
 8007c86:	af02      	add	r7, sp, #8
 8007c88:	6078      	str	r0, [r7, #4]
 8007c8a:	460b      	mov	r3, r1
 8007c8c:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData;
#if (USBH_KEEP_CFG_DESCRIPTOR == 1U)
  pData = phost->device.CfgDesc_Raw;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	331c      	adds	r3, #28
 8007c92:	60fb      	str	r3, [r7, #12]
#else
  pData = phost->device.Data;
#endif
  if((status = USBH_GetDescriptor(phost,
 8007c94:	887b      	ldrh	r3, [r7, #2]
 8007c96:	9300      	str	r3, [sp, #0]
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007c9e:	2100      	movs	r1, #0
 8007ca0:	6878      	ldr	r0, [r7, #4]
 8007ca2:	f000 f83d 	bl	8007d20 <USBH_GetDescriptor>
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	72fb      	strb	r3, [r7, #11]
 8007caa:	7afb      	ldrb	r3, [r7, #11]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d107      	bne.n	8007cc0 <USBH_Get_CfgDesc+0x3e>
                                  pData,
                                  length)) == USBH_OK)
  {

    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc (&phost->device.CfgDesc,
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8007cb6:	887a      	ldrh	r2, [r7, #2]
 8007cb8:	68f9      	ldr	r1, [r7, #12]
 8007cba:	4618      	mov	r0, r3
 8007cbc:	f000 f964 	bl	8007f88 <USBH_ParseCfgDesc>
                       pData,
                       length);

  }
  return status;
 8007cc0:	7afb      	ldrb	r3, [r7, #11]
}
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	3710      	adds	r7, #16
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	bd80      	pop	{r7, pc}

08007cca <USBH_Get_StringDesc>:
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                uint8_t string_index,
                                uint8_t *buff,
                                uint16_t length)
{
 8007cca:	b580      	push	{r7, lr}
 8007ccc:	b088      	sub	sp, #32
 8007cce:	af02      	add	r7, sp, #8
 8007cd0:	60f8      	str	r0, [r7, #12]
 8007cd2:	607a      	str	r2, [r7, #4]
 8007cd4:	461a      	mov	r2, r3
 8007cd6:	460b      	mov	r3, r1
 8007cd8:	72fb      	strb	r3, [r7, #11]
 8007cda:	4613      	mov	r3, r2
 8007cdc:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;
  if((status = USBH_GetDescriptor(phost,
 8007cde:	7afb      	ldrb	r3, [r7, #11]
 8007ce0:	b29b      	uxth	r3, r3
 8007ce2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007ce6:	b29a      	uxth	r2, r3
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_STRING | string_index,
                                  phost->device.Data,
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 8007cee:	893b      	ldrh	r3, [r7, #8]
 8007cf0:	9300      	str	r3, [sp, #0]
 8007cf2:	460b      	mov	r3, r1
 8007cf4:	2100      	movs	r1, #0
 8007cf6:	68f8      	ldr	r0, [r7, #12]
 8007cf8:	f000 f812 	bl	8007d20 <USBH_GetDescriptor>
 8007cfc:	4603      	mov	r3, r0
 8007cfe:	75fb      	strb	r3, [r7, #23]
 8007d00:	7dfb      	ldrb	r3, [r7, #23]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d107      	bne.n	8007d16 <USBH_Get_StringDesc+0x4c>
                                  length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data,buff, length);
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007d0c:	893a      	ldrh	r2, [r7, #8]
 8007d0e:	6879      	ldr	r1, [r7, #4]
 8007d10:	4618      	mov	r0, r3
 8007d12:	f000 fa37 	bl	8008184 <USBH_ParseStringDesc>
  }
  return status;
 8007d16:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d18:	4618      	mov	r0, r3
 8007d1a:	3718      	adds	r7, #24
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	bd80      	pop	{r7, pc}

08007d20 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                               uint8_t  req_type,
                               uint16_t value_idx,
                               uint8_t* buff,
                               uint16_t length)
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b084      	sub	sp, #16
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	60f8      	str	r0, [r7, #12]
 8007d28:	607b      	str	r3, [r7, #4]
 8007d2a:	460b      	mov	r3, r1
 8007d2c:	72fb      	strb	r3, [r7, #11]
 8007d2e:	4613      	mov	r3, r2
 8007d30:	813b      	strh	r3, [r7, #8]
  if(phost->RequestState == CMD_SEND)
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	789b      	ldrb	r3, [r3, #2]
 8007d36:	2b01      	cmp	r3, #1
 8007d38:	d11c      	bne.n	8007d74 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007d3a:	7afb      	ldrb	r3, [r7, #11]
 8007d3c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007d40:	b2da      	uxtb	r2, r3
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	2206      	movs	r2, #6
 8007d4a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	893a      	ldrh	r2, [r7, #8]
 8007d50:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007d52:	893b      	ldrh	r3, [r7, #8]
 8007d54:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007d58:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007d5c:	d104      	bne.n	8007d68 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	f240 4209 	movw	r2, #1033	; 0x409
 8007d64:	829a      	strh	r2, [r3, #20]
 8007d66:	e002      	b.n	8007d6e <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	8b3a      	ldrh	r2, [r7, #24]
 8007d72:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, buff, length);
 8007d74:	8b3b      	ldrh	r3, [r7, #24]
 8007d76:	461a      	mov	r2, r3
 8007d78:	6879      	ldr	r1, [r7, #4]
 8007d7a:	68f8      	ldr	r0, [r7, #12]
 8007d7c:	f000 fa50 	bl	8008220 <USBH_CtlReq>
 8007d80:	4603      	mov	r3, r0
}
 8007d82:	4618      	mov	r0, r3
 8007d84:	3710      	adds	r7, #16
 8007d86:	46bd      	mov	sp, r7
 8007d88:	bd80      	pop	{r7, pc}

08007d8a <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007d8a:	b580      	push	{r7, lr}
 8007d8c:	b082      	sub	sp, #8
 8007d8e:	af00      	add	r7, sp, #0
 8007d90:	6078      	str	r0, [r7, #4]
 8007d92:	460b      	mov	r3, r1
 8007d94:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	789b      	ldrb	r3, [r3, #2]
 8007d9a:	2b01      	cmp	r3, #1
 8007d9c:	d10f      	bne.n	8007dbe <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2200      	movs	r2, #0
 8007da2:	741a      	strb	r2, [r3, #16]
      USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2205      	movs	r2, #5
 8007da8:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007daa:	78fb      	ldrb	r3, [r7, #3]
 8007dac:	b29a      	uxth	r2, r3
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2200      	movs	r2, #0
 8007db6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2200      	movs	r2, #0
 8007dbc:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	2100      	movs	r1, #0
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	f000 fa2c 	bl	8008220 <USBH_CtlReq>
 8007dc8:	4603      	mov	r3, r0
}
 8007dca:	4618      	mov	r0, r3
 8007dcc:	3708      	adds	r7, #8
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	bd80      	pop	{r7, pc}

08007dd2 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007dd2:	b580      	push	{r7, lr}
 8007dd4:	b082      	sub	sp, #8
 8007dd6:	af00      	add	r7, sp, #0
 8007dd8:	6078      	str	r0, [r7, #4]
 8007dda:	460b      	mov	r3, r1
 8007ddc:	807b      	strh	r3, [r7, #2]
  if(phost->RequestState == CMD_SEND)
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	789b      	ldrb	r3, [r3, #2]
 8007de2:	2b01      	cmp	r3, #1
 8007de4:	d10e      	bne.n	8007e04 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2200      	movs	r2, #0
 8007dea:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2209      	movs	r2, #9
 8007df0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	887a      	ldrh	r2, [r7, #2]
 8007df6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	2200      	movs	r2, #0
 8007e02:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U , 0U);
 8007e04:	2200      	movs	r2, #0
 8007e06:	2100      	movs	r1, #0
 8007e08:	6878      	ldr	r0, [r7, #4]
 8007e0a:	f000 fa09 	bl	8008220 <USBH_CtlReq>
 8007e0e:	4603      	mov	r3, r0
}
 8007e10:	4618      	mov	r0, r3
 8007e12:	3708      	adds	r7, #8
 8007e14:	46bd      	mov	sp, r7
 8007e16:	bd80      	pop	{r7, pc}

08007e18 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b082      	sub	sp, #8
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
 8007e20:	460b      	mov	r3, r1
 8007e22:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	789b      	ldrb	r3, [r3, #2]
 8007e28:	2b01      	cmp	r3, #1
 8007e2a:	d10f      	bne.n	8007e4c <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2200      	movs	r2, #0
 8007e30:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2203      	movs	r2, #3
 8007e36:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007e38:	78fb      	ldrb	r3, [r7, #3]
 8007e3a:	b29a      	uxth	r2, r3
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2200      	movs	r2, #0
 8007e44:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2200      	movs	r2, #0
 8007e4a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	2100      	movs	r1, #0
 8007e50:	6878      	ldr	r0, [r7, #4]
 8007e52:	f000 f9e5 	bl	8008220 <USBH_CtlReq>
 8007e56:	4603      	mov	r3, r0
}
 8007e58:	4618      	mov	r0, r3
 8007e5a:	3708      	adds	r7, #8
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	bd80      	pop	{r7, pc}

08007e60 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b082      	sub	sp, #8
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
 8007e68:	460b      	mov	r3, r1
 8007e6a:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	789b      	ldrb	r3, [r3, #2]
 8007e70:	2b01      	cmp	r3, #1
 8007e72:	d10f      	bne.n	8007e94 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2202      	movs	r2, #2
 8007e78:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	2201      	movs	r2, #1
 8007e7e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2200      	movs	r2, #0
 8007e84:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007e86:	78fb      	ldrb	r3, [r7, #3]
 8007e88:	b29a      	uxth	r2, r3
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2200      	movs	r2, #0
 8007e92:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U , 0U);
 8007e94:	2200      	movs	r2, #0
 8007e96:	2100      	movs	r1, #0
 8007e98:	6878      	ldr	r0, [r7, #4]
 8007e9a:	f000 f9c1 	bl	8008220 <USBH_CtlReq>
 8007e9e:	4603      	mov	r3, r0
}
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	3708      	adds	r7, #8
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	bd80      	pop	{r7, pc}

08007ea8 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc (USBH_DevDescTypeDef* dev_desc, uint8_t *buf,
                                uint16_t length)
{
 8007ea8:	b480      	push	{r7}
 8007eaa:	b085      	sub	sp, #20
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	60f8      	str	r0, [r7, #12]
 8007eb0:	60b9      	str	r1, [r7, #8]
 8007eb2:	4613      	mov	r3, r2
 8007eb4:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 8007eb6:	68bb      	ldr	r3, [r7, #8]
 8007eb8:	781a      	ldrb	r2, [r3, #0]
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 8007ebe:	68bb      	ldr	r3, [r7, #8]
 8007ec0:	785a      	ldrb	r2, [r3, #1]
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16 (buf +  2);
 8007ec6:	68bb      	ldr	r3, [r7, #8]
 8007ec8:	3302      	adds	r3, #2
 8007eca:	781b      	ldrb	r3, [r3, #0]
 8007ecc:	b29a      	uxth	r2, r3
 8007ece:	68bb      	ldr	r3, [r7, #8]
 8007ed0:	3303      	adds	r3, #3
 8007ed2:	781b      	ldrb	r3, [r3, #0]
 8007ed4:	b29b      	uxth	r3, r3
 8007ed6:	021b      	lsls	r3, r3, #8
 8007ed8:	b29b      	uxth	r3, r3
 8007eda:	4313      	orrs	r3, r2
 8007edc:	b29a      	uxth	r2, r3
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 8007ee2:	68bb      	ldr	r3, [r7, #8]
 8007ee4:	791a      	ldrb	r2, [r3, #4]
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 8007eea:	68bb      	ldr	r3, [r7, #8]
 8007eec:	795a      	ldrb	r2, [r3, #5]
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 8007ef2:	68bb      	ldr	r3, [r7, #8]
 8007ef4:	799a      	ldrb	r2, [r3, #6]
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 8007efa:	68bb      	ldr	r3, [r7, #8]
 8007efc:	79da      	ldrb	r2, [r3, #7]
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8007f02:	88fb      	ldrh	r3, [r7, #6]
 8007f04:	2b08      	cmp	r3, #8
 8007f06:	d939      	bls.n	8007f7c <USBH_ParseDevDesc+0xd4>
  { /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16 (buf +  8);
 8007f08:	68bb      	ldr	r3, [r7, #8]
 8007f0a:	3308      	adds	r3, #8
 8007f0c:	781b      	ldrb	r3, [r3, #0]
 8007f0e:	b29a      	uxth	r2, r3
 8007f10:	68bb      	ldr	r3, [r7, #8]
 8007f12:	3309      	adds	r3, #9
 8007f14:	781b      	ldrb	r3, [r3, #0]
 8007f16:	b29b      	uxth	r3, r3
 8007f18:	021b      	lsls	r3, r3, #8
 8007f1a:	b29b      	uxth	r3, r3
 8007f1c:	4313      	orrs	r3, r2
 8007f1e:	b29a      	uxth	r2, r3
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16 (buf + 10);
 8007f24:	68bb      	ldr	r3, [r7, #8]
 8007f26:	330a      	adds	r3, #10
 8007f28:	781b      	ldrb	r3, [r3, #0]
 8007f2a:	b29a      	uxth	r2, r3
 8007f2c:	68bb      	ldr	r3, [r7, #8]
 8007f2e:	330b      	adds	r3, #11
 8007f30:	781b      	ldrb	r3, [r3, #0]
 8007f32:	b29b      	uxth	r3, r3
 8007f34:	021b      	lsls	r3, r3, #8
 8007f36:	b29b      	uxth	r3, r3
 8007f38:	4313      	orrs	r3, r2
 8007f3a:	b29a      	uxth	r2, r3
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16 (buf + 12);
 8007f40:	68bb      	ldr	r3, [r7, #8]
 8007f42:	330c      	adds	r3, #12
 8007f44:	781b      	ldrb	r3, [r3, #0]
 8007f46:	b29a      	uxth	r2, r3
 8007f48:	68bb      	ldr	r3, [r7, #8]
 8007f4a:	330d      	adds	r3, #13
 8007f4c:	781b      	ldrb	r3, [r3, #0]
 8007f4e:	b29b      	uxth	r3, r3
 8007f50:	021b      	lsls	r3, r3, #8
 8007f52:	b29b      	uxth	r3, r3
 8007f54:	4313      	orrs	r3, r2
 8007f56:	b29a      	uxth	r2, r3
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 8007f5c:	68bb      	ldr	r3, [r7, #8]
 8007f5e:	7b9a      	ldrb	r2, [r3, #14]
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 8007f64:	68bb      	ldr	r3, [r7, #8]
 8007f66:	7bda      	ldrb	r2, [r3, #15]
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 8007f6c:	68bb      	ldr	r3, [r7, #8]
 8007f6e:	7c1a      	ldrb	r2, [r3, #16]
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 8007f74:	68bb      	ldr	r3, [r7, #8]
 8007f76:	7c5a      	ldrb	r2, [r3, #17]
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	745a      	strb	r2, [r3, #17]
  }
}
 8007f7c:	bf00      	nop
 8007f7e:	3714      	adds	r7, #20
 8007f80:	46bd      	mov	sp, r7
 8007f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f86:	4770      	bx	lr

08007f88 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc (USBH_CfgDescTypeDef* cfg_desc, uint8_t *buf,
                               uint16_t length)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b08a      	sub	sp, #40	; 0x28
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	60f8      	str	r0, [r7, #12]
 8007f90:	60b9      	str	r1, [r7, #8]
 8007f92:	4613      	mov	r3, r2
 8007f94:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007f96:	68bb      	ldr	r3, [r7, #8]
 8007f98:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8007fa6:	68bb      	ldr	r3, [r7, #8]
 8007fa8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 8007faa:	68bb      	ldr	r3, [r7, #8]
 8007fac:	781a      	ldrb	r2, [r3, #0]
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 8007fb2:	68bb      	ldr	r3, [r7, #8]
 8007fb4:	785a      	ldrb	r2, [r3, #1]
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 8007fba:	68bb      	ldr	r3, [r7, #8]
 8007fbc:	3302      	adds	r3, #2
 8007fbe:	781b      	ldrb	r3, [r3, #0]
 8007fc0:	b29a      	uxth	r2, r3
 8007fc2:	68bb      	ldr	r3, [r7, #8]
 8007fc4:	3303      	adds	r3, #3
 8007fc6:	781b      	ldrb	r3, [r3, #0]
 8007fc8:	b29b      	uxth	r3, r3
 8007fca:	021b      	lsls	r3, r3, #8
 8007fcc:	b29b      	uxth	r3, r3
 8007fce:	4313      	orrs	r3, r2
 8007fd0:	b29a      	uxth	r2, r3
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 8007fd6:	68bb      	ldr	r3, [r7, #8]
 8007fd8:	791a      	ldrb	r2, [r3, #4]
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 8007fde:	68bb      	ldr	r3, [r7, #8]
 8007fe0:	795a      	ldrb	r2, [r3, #5]
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 8007fe6:	68bb      	ldr	r3, [r7, #8]
 8007fe8:	799a      	ldrb	r2, [r3, #6]
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 8007fee:	68bb      	ldr	r3, [r7, #8]
 8007ff0:	79da      	ldrb	r2, [r3, #7]
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);
 8007ff6:	68bb      	ldr	r3, [r7, #8]
 8007ff8:	7a1a      	ldrb	r2, [r3, #8]
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	721a      	strb	r2, [r3, #8]


  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007ffe:	88fb      	ldrh	r3, [r7, #6]
 8008000:	2b09      	cmp	r3, #9
 8008002:	d95f      	bls.n	80080c4 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8008004:	2309      	movs	r3, #9
 8008006:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8008008:	2300      	movs	r3, #0
 800800a:	61fb      	str	r3, [r7, #28]


    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800800c:	e051      	b.n	80080b2 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800800e:	f107 0316 	add.w	r3, r7, #22
 8008012:	4619      	mov	r1, r3
 8008014:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008016:	f000 f8e8 	bl	80081ea <USBH_GetNextDesc>
 800801a:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800801c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800801e:	785b      	ldrb	r3, [r3, #1]
 8008020:	2b04      	cmp	r3, #4
 8008022:	d146      	bne.n	80080b2 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8008024:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008028:	221a      	movs	r2, #26
 800802a:	fb02 f303 	mul.w	r3, r2, r3
 800802e:	3308      	adds	r3, #8
 8008030:	68fa      	ldr	r2, [r7, #12]
 8008032:	4413      	add	r3, r2
 8008034:	3302      	adds	r3, #2
 8008036:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc (pif, (uint8_t *)(void *)pdesc);
 8008038:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800803a:	69f8      	ldr	r0, [r7, #28]
 800803c:	f000 f846 	bl	80080cc <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008040:	2300      	movs	r3, #0
 8008042:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8008046:	2300      	movs	r3, #0
 8008048:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800804a:	e022      	b.n	8008092 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t*)(void *)pdesc, &ptr);
 800804c:	f107 0316 	add.w	r3, r7, #22
 8008050:	4619      	mov	r1, r3
 8008052:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008054:	f000 f8c9 	bl	80081ea <USBH_GetNextDesc>
 8008058:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800805a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800805c:	785b      	ldrb	r3, [r3, #1]
 800805e:	2b05      	cmp	r3, #5
 8008060:	d117      	bne.n	8008092 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008062:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008066:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800806a:	3201      	adds	r2, #1
 800806c:	00d2      	lsls	r2, r2, #3
 800806e:	211a      	movs	r1, #26
 8008070:	fb01 f303 	mul.w	r3, r1, r3
 8008074:	4413      	add	r3, r2
 8008076:	3308      	adds	r3, #8
 8008078:	68fa      	ldr	r2, [r7, #12]
 800807a:	4413      	add	r3, r2
 800807c:	3304      	adds	r3, #4
 800807e:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc (pep, (uint8_t *)(void *)pdesc);
 8008080:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008082:	69b8      	ldr	r0, [r7, #24]
 8008084:	f000 f851 	bl	800812a <USBH_ParseEPDesc>
            ep_ix++;
 8008088:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800808c:	3301      	adds	r3, #1
 800808e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008092:	69fb      	ldr	r3, [r7, #28]
 8008094:	791b      	ldrb	r3, [r3, #4]
 8008096:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800809a:	429a      	cmp	r2, r3
 800809c:	d204      	bcs.n	80080a8 <USBH_ParseCfgDesc+0x120>
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	885a      	ldrh	r2, [r3, #2]
 80080a2:	8afb      	ldrh	r3, [r7, #22]
 80080a4:	429a      	cmp	r2, r3
 80080a6:	d8d1      	bhi.n	800804c <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 80080a8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80080ac:	3301      	adds	r3, #1
 80080ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80080b2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80080b6:	2b01      	cmp	r3, #1
 80080b8:	d804      	bhi.n	80080c4 <USBH_ParseCfgDesc+0x13c>
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	885a      	ldrh	r2, [r3, #2]
 80080be:	8afb      	ldrh	r3, [r7, #22]
 80080c0:	429a      	cmp	r2, r3
 80080c2:	d8a4      	bhi.n	800800e <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 80080c4:	bf00      	nop
 80080c6:	3728      	adds	r7, #40	; 0x28
 80080c8:	46bd      	mov	sp, r7
 80080ca:	bd80      	pop	{r7, pc}

080080cc <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDescTypeDef *if_descriptor,
                                      uint8_t *buf)
{
 80080cc:	b480      	push	{r7}
 80080ce:	b083      	sub	sp, #12
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
 80080d4:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	781a      	ldrb	r2, [r3, #0]
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	785a      	ldrb	r2, [r3, #1]
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	789a      	ldrb	r2, [r3, #2]
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	78da      	ldrb	r2, [r3, #3]
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	791a      	ldrb	r2, [r3, #4]
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	795a      	ldrb	r2, [r3, #5]
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	799a      	ldrb	r2, [r3, #6]
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 800810e:	683b      	ldr	r3, [r7, #0]
 8008110:	79da      	ldrb	r2, [r3, #7]
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	7a1a      	ldrb	r2, [r3, #8]
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	721a      	strb	r2, [r3, #8]
}
 800811e:	bf00      	nop
 8008120:	370c      	adds	r7, #12
 8008122:	46bd      	mov	sp, r7
 8008124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008128:	4770      	bx	lr

0800812a <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc (USBH_EpDescTypeDef  *ep_descriptor,
                               uint8_t *buf)
{
 800812a:	b480      	push	{r7}
 800812c:	b083      	sub	sp, #12
 800812e:	af00      	add	r7, sp, #0
 8008130:	6078      	str	r0, [r7, #4]
 8008132:	6039      	str	r1, [r7, #0]

  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	781a      	ldrb	r2, [r3, #0]
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	785a      	ldrb	r2, [r3, #1]
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	789a      	ldrb	r2, [r3, #2]
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	78da      	ldrb	r2, [r3, #3]
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	3304      	adds	r3, #4
 8008158:	781b      	ldrb	r3, [r3, #0]
 800815a:	b29a      	uxth	r2, r3
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	3305      	adds	r3, #5
 8008160:	781b      	ldrb	r3, [r3, #0]
 8008162:	b29b      	uxth	r3, r3
 8008164:	021b      	lsls	r3, r3, #8
 8008166:	b29b      	uxth	r3, r3
 8008168:	4313      	orrs	r3, r2
 800816a:	b29a      	uxth	r2, r3
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	799a      	ldrb	r2, [r3, #6]
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	719a      	strb	r2, [r3, #6]
}
 8008178:	bf00      	nop
 800817a:	370c      	adds	r7, #12
 800817c:	46bd      	mov	sp, r7
 800817e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008182:	4770      	bx	lr

08008184 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc (uint8_t* psrc, uint8_t* pdest, uint16_t length)
{
 8008184:	b480      	push	{r7}
 8008186:	b087      	sub	sp, #28
 8008188:	af00      	add	r7, sp, #0
 800818a:	60f8      	str	r0, [r7, #12]
 800818c:	60b9      	str	r1, [r7, #8]
 800818e:	4613      	mov	r3, r2
 8008190:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	3301      	adds	r3, #1
 8008196:	781b      	ldrb	r3, [r3, #0]
 8008198:	2b03      	cmp	r3, #3
 800819a:	d120      	bne.n	80081de <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	781b      	ldrb	r3, [r3, #0]
 80081a0:	1e9a      	subs	r2, r3, #2
 80081a2:	88fb      	ldrh	r3, [r7, #6]
 80081a4:	4293      	cmp	r3, r2
 80081a6:	bf28      	it	cs
 80081a8:	4613      	movcs	r3, r2
 80081aa:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	3302      	adds	r3, #2
 80081b0:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80081b2:	2300      	movs	r3, #0
 80081b4:	82fb      	strh	r3, [r7, #22]
 80081b6:	e00b      	b.n	80081d0 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80081b8:	8afb      	ldrh	r3, [r7, #22]
 80081ba:	68fa      	ldr	r2, [r7, #12]
 80081bc:	4413      	add	r3, r2
 80081be:	781a      	ldrb	r2, [r3, #0]
 80081c0:	68bb      	ldr	r3, [r7, #8]
 80081c2:	701a      	strb	r2, [r3, #0]
      pdest++;
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	3301      	adds	r3, #1
 80081c8:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80081ca:	8afb      	ldrh	r3, [r7, #22]
 80081cc:	3302      	adds	r3, #2
 80081ce:	82fb      	strh	r3, [r7, #22]
 80081d0:	8afa      	ldrh	r2, [r7, #22]
 80081d2:	8abb      	ldrh	r3, [r7, #20]
 80081d4:	429a      	cmp	r2, r3
 80081d6:	d3ef      	bcc.n	80081b8 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80081d8:	68bb      	ldr	r3, [r7, #8]
 80081da:	2200      	movs	r2, #0
 80081dc:	701a      	strb	r2, [r3, #0]
  }
}
 80081de:	bf00      	nop
 80081e0:	371c      	adds	r7, #28
 80081e2:	46bd      	mov	sp, r7
 80081e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e8:	4770      	bx	lr

080081ea <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc (uint8_t   *pbuf, uint16_t  *ptr)
{
 80081ea:	b480      	push	{r7}
 80081ec:	b085      	sub	sp, #20
 80081ee:	af00      	add	r7, sp, #0
 80081f0:	6078      	str	r0, [r7, #4]
 80081f2:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	881a      	ldrh	r2, [r3, #0]
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	781b      	ldrb	r3, [r3, #0]
 80081fc:	b29b      	uxth	r3, r3
 80081fe:	4413      	add	r3, r2
 8008200:	b29a      	uxth	r2, r3
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
         ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	781b      	ldrb	r3, [r3, #0]
 800820a:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	4413      	add	r3, r2
 8008210:	60fb      	str	r3, [r7, #12]

  return(pnext);
 8008212:	68fb      	ldr	r3, [r7, #12]
}
 8008214:	4618      	mov	r0, r3
 8008216:	3714      	adds	r7, #20
 8008218:	46bd      	mov	sp, r7
 800821a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821e:	4770      	bx	lr

08008220 <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost,
                             uint8_t             *buff,
                             uint16_t            length)
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b086      	sub	sp, #24
 8008224:	af00      	add	r7, sp, #0
 8008226:	60f8      	str	r0, [r7, #12]
 8008228:	60b9      	str	r1, [r7, #8]
 800822a:	4613      	mov	r3, r2
 800822c:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800822e:	2301      	movs	r3, #1
 8008230:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	789b      	ldrb	r3, [r3, #2]
 8008236:	2b01      	cmp	r3, #1
 8008238:	d002      	beq.n	8008240 <USBH_CtlReq+0x20>
 800823a:	2b02      	cmp	r3, #2
 800823c:	d01d      	beq.n	800827a <USBH_CtlReq+0x5a>
      }
    }
    break;

  default:
    break;
 800823e:	e042      	b.n	80082c6 <USBH_CtlReq+0xa6>
    phost->Control.buff = buff;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	68ba      	ldr	r2, [r7, #8]
 8008244:	609a      	str	r2, [r3, #8]
    phost->Control.length = length;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	88fa      	ldrh	r2, [r7, #6]
 800824a:	819a      	strh	r2, [r3, #12]
    phost->Control.state = CTRL_SETUP;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	2201      	movs	r2, #1
 8008250:	761a      	strb	r2, [r3, #24]
    phost->RequestState = CMD_WAIT;
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	2202      	movs	r2, #2
 8008256:	709a      	strb	r2, [r3, #2]
    status = USBH_BUSY;
 8008258:	2301      	movs	r3, #1
 800825a:	75fb      	strb	r3, [r7, #23]
    phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	2203      	movs	r2, #3
 8008260:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008270:	2200      	movs	r2, #0
 8008272:	4619      	mov	r1, r3
 8008274:	f000 fc3c 	bl	8008af0 <osMessagePut>
    break;
 8008278:	e025      	b.n	80082c6 <USBH_CtlReq+0xa6>
    status = USBH_HandleControl(phost);
 800827a:	68f8      	ldr	r0, [r7, #12]
 800827c:	f000 f828 	bl	80082d0 <USBH_HandleControl>
 8008280:	4603      	mov	r3, r0
 8008282:	75fb      	strb	r3, [r7, #23]
    if (status == USBH_OK)
 8008284:	7dfb      	ldrb	r3, [r7, #23]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d108      	bne.n	800829c <USBH_CtlReq+0x7c>
      phost->RequestState = CMD_SEND;
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	2201      	movs	r2, #1
 800828e:	709a      	strb	r2, [r3, #2]
      phost->Control.state =CTRL_IDLE;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	2200      	movs	r2, #0
 8008294:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 8008296:	2300      	movs	r3, #0
 8008298:	75fb      	strb	r3, [r7, #23]
    break;
 800829a:	e013      	b.n	80082c4 <USBH_CtlReq+0xa4>
    else if (status == USBH_NOT_SUPPORTED)
 800829c:	7dfb      	ldrb	r3, [r7, #23]
 800829e:	2b03      	cmp	r3, #3
 80082a0:	d108      	bne.n	80082b4 <USBH_CtlReq+0x94>
      phost->RequestState = CMD_SEND;
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	2201      	movs	r2, #1
 80082a6:	709a      	strb	r2, [r3, #2]
      phost->Control.state = CTRL_IDLE;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	2200      	movs	r2, #0
 80082ac:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 80082ae:	2303      	movs	r3, #3
 80082b0:	75fb      	strb	r3, [r7, #23]
    break;
 80082b2:	e007      	b.n	80082c4 <USBH_CtlReq+0xa4>
      if (status == USBH_FAIL)
 80082b4:	7dfb      	ldrb	r3, [r7, #23]
 80082b6:	2b02      	cmp	r3, #2
 80082b8:	d104      	bne.n	80082c4 <USBH_CtlReq+0xa4>
        phost->RequestState = CMD_SEND;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	2201      	movs	r2, #1
 80082be:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 80082c0:	2302      	movs	r3, #2
 80082c2:	75fb      	strb	r3, [r7, #23]
    break;
 80082c4:	bf00      	nop
  }
  return status;
 80082c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80082c8:	4618      	mov	r0, r3
 80082ca:	3718      	adds	r7, #24
 80082cc:	46bd      	mov	sp, r7
 80082ce:	bd80      	pop	{r7, pc}

080082d0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b086      	sub	sp, #24
 80082d4:	af02      	add	r7, sp, #8
 80082d6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80082d8:	2301      	movs	r3, #1
 80082da:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80082dc:	2300      	movs	r3, #0
 80082de:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	7e1b      	ldrb	r3, [r3, #24]
 80082e4:	3b01      	subs	r3, #1
 80082e6:	2b0a      	cmp	r3, #10
 80082e8:	f200 821f 	bhi.w	800872a <USBH_HandleControl+0x45a>
 80082ec:	a201      	add	r2, pc, #4	; (adr r2, 80082f4 <USBH_HandleControl+0x24>)
 80082ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082f2:	bf00      	nop
 80082f4:	08008321 	.word	0x08008321
 80082f8:	0800833b 	.word	0x0800833b
 80082fc:	080083dd 	.word	0x080083dd
 8008300:	08008403 	.word	0x08008403
 8008304:	0800848f 	.word	0x0800848f
 8008308:	080084bb 	.word	0x080084bb
 800830c:	0800857d 	.word	0x0800857d
 8008310:	0800859f 	.word	0x0800859f
 8008314:	08008631 	.word	0x08008631
 8008318:	08008659 	.word	0x08008659
 800831c:	080086eb 	.word	0x080086eb
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	f103 0110 	add.w	r1, r3, #16
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	795b      	ldrb	r3, [r3, #5]
 800832a:	461a      	mov	r2, r3
 800832c:	6878      	ldr	r0, [r7, #4]
 800832e:	f000 fa0d 	bl	800874c <USBH_CtlSendSetup>
	                     phost->Control.pipe_out);

    phost->Control.state = CTRL_SETUP_WAIT;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	2202      	movs	r2, #2
 8008336:	761a      	strb	r2, [r3, #24]
    break;
 8008338:	e202      	b.n	8008740 <USBH_HandleControl+0x470>

  case CTRL_SETUP_WAIT:

    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	795b      	ldrb	r3, [r3, #5]
 800833e:	4619      	mov	r1, r3
 8008340:	6878      	ldr	r0, [r7, #4]
 8008342:	f004 fbaf 	bl	800caa4 <USBH_LL_GetURBState>
 8008346:	4603      	mov	r3, r0
 8008348:	73bb      	strb	r3, [r7, #14]
    /* case SETUP packet sent successfully */
    if(URB_Status == USBH_URB_DONE)
 800834a:	7bbb      	ldrb	r3, [r7, #14]
 800834c:	2b01      	cmp	r3, #1
 800834e:	d12c      	bne.n	80083aa <USBH_HandleControl+0xda>
    {
      direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	7c1b      	ldrb	r3, [r3, #16]
 8008354:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008358:	737b      	strb	r3, [r7, #13]

      /* check if there is a data stage */
      if (phost->Control.setup.b.wLength.w != 0U)
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	8adb      	ldrh	r3, [r3, #22]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d00a      	beq.n	8008378 <USBH_HandleControl+0xa8>
      {
        if (direction == USB_D2H)
 8008362:	7b7b      	ldrb	r3, [r7, #13]
 8008364:	2b80      	cmp	r3, #128	; 0x80
 8008366:	d103      	bne.n	8008370 <USBH_HandleControl+0xa0>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_DATA_IN;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2203      	movs	r2, #3
 800836c:	761a      	strb	r2, [r3, #24]
 800836e:	e00d      	b.n	800838c <USBH_HandleControl+0xbc>
        }
        else
        {
          /* Data Direction is OUT */
          phost->Control.state = CTRL_DATA_OUT;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2205      	movs	r2, #5
 8008374:	761a      	strb	r2, [r3, #24]
 8008376:	e009      	b.n	800838c <USBH_HandleControl+0xbc>
      }
      /* No DATA stage */
      else
      {
        /* If there is No Data Transfer Stage */
        if (direction == USB_D2H)
 8008378:	7b7b      	ldrb	r3, [r7, #13]
 800837a:	2b80      	cmp	r3, #128	; 0x80
 800837c:	d103      	bne.n	8008386 <USBH_HandleControl+0xb6>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_STATUS_OUT;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2209      	movs	r2, #9
 8008382:	761a      	strb	r2, [r3, #24]
 8008384:	e002      	b.n	800838c <USBH_HandleControl+0xbc>
        }
        else
        {
          /* Data Direction is OUT */
          phost->Control.state = CTRL_STATUS_IN;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	2207      	movs	r2, #7
 800838a:	761a      	strb	r2, [r3, #24]
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	2203      	movs	r2, #3
 8008390:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80083a0:	2200      	movs	r2, #0
 80083a2:	4619      	mov	r1, r3
 80083a4:	f000 fba4 	bl	8008af0 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 80083a8:	e1c1      	b.n	800872e <USBH_HandleControl+0x45e>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80083aa:	7bbb      	ldrb	r3, [r7, #14]
 80083ac:	2b04      	cmp	r3, #4
 80083ae:	d003      	beq.n	80083b8 <USBH_HandleControl+0xe8>
 80083b0:	7bbb      	ldrb	r3, [r7, #14]
 80083b2:	2b02      	cmp	r3, #2
 80083b4:	f040 81bb 	bne.w	800872e <USBH_HandleControl+0x45e>
        phost->Control.state = CTRL_ERROR;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	220b      	movs	r2, #11
 80083bc:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	2203      	movs	r2, #3
 80083c2:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80083d2:	2200      	movs	r2, #0
 80083d4:	4619      	mov	r1, r3
 80083d6:	f000 fb8b 	bl	8008af0 <osMessagePut>
    break;
 80083da:	e1a8      	b.n	800872e <USBH_HandleControl+0x45e>

  case CTRL_DATA_IN:
    /* Issue an IN token */
    phost->Control.timer = (uint16_t)phost->Timer;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 80083e2:	b29a      	uxth	r2, r3
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	81da      	strh	r2, [r3, #14]
    USBH_CtlReceiveData(phost,
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	6899      	ldr	r1, [r3, #8]
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	899a      	ldrh	r2, [r3, #12]
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	791b      	ldrb	r3, [r3, #4]
 80083f4:	6878      	ldr	r0, [r7, #4]
 80083f6:	f000 f9e8 	bl	80087ca <USBH_CtlReceiveData>
                        phost->Control.buff,
                        phost->Control.length,
                        phost->Control.pipe_in);

    phost->Control.state = CTRL_DATA_IN_WAIT;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	2204      	movs	r2, #4
 80083fe:	761a      	strb	r2, [r3, #24]
    break;
 8008400:	e19e      	b.n	8008740 <USBH_HandleControl+0x470>

  case CTRL_DATA_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	791b      	ldrb	r3, [r3, #4]
 8008406:	4619      	mov	r1, r3
 8008408:	6878      	ldr	r0, [r7, #4]
 800840a:	f004 fb4b 	bl	800caa4 <USBH_LL_GetURBState>
 800840e:	4603      	mov	r3, r0
 8008410:	73bb      	strb	r3, [r7, #14]

    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
 8008412:	7bbb      	ldrb	r3, [r7, #14]
 8008414:	2b01      	cmp	r3, #1
 8008416:	d110      	bne.n	800843a <USBH_HandleControl+0x16a>
    {
      phost->Control.state = CTRL_STATUS_OUT;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2209      	movs	r2, #9
 800841c:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	2203      	movs	r2, #3
 8008422:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008432:	2200      	movs	r2, #0
 8008434:	4619      	mov	r1, r3
 8008436:	f000 fb5b 	bl	8008af0 <osMessagePut>
#endif
#endif
    }

    /* manage error cases*/
    if  (URB_Status == USBH_URB_STALL)
 800843a:	7bbb      	ldrb	r3, [r7, #14]
 800843c:	2b05      	cmp	r3, #5
 800843e:	d110      	bne.n	8008462 <USBH_HandleControl+0x192>
    {
      /* In stall case, return to previous machine state*/
      status = USBH_NOT_SUPPORTED;
 8008440:	2303      	movs	r3, #3
 8008442:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2203      	movs	r2, #3
 8008448:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008458:	2200      	movs	r2, #0
 800845a:	4619      	mov	r1, r3
 800845c:	f000 fb48 	bl	8008af0 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8008460:	e167      	b.n	8008732 <USBH_HandleControl+0x462>
      if (URB_Status == USBH_URB_ERROR)
 8008462:	7bbb      	ldrb	r3, [r7, #14]
 8008464:	2b04      	cmp	r3, #4
 8008466:	f040 8164 	bne.w	8008732 <USBH_HandleControl+0x462>
        phost->Control.state = CTRL_ERROR;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	220b      	movs	r2, #11
 800846e:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2203      	movs	r2, #3
 8008474:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008484:	2200      	movs	r2, #0
 8008486:	4619      	mov	r1, r3
 8008488:	f000 fb32 	bl	8008af0 <osMessagePut>
    break;
 800848c:	e151      	b.n	8008732 <USBH_HandleControl+0x462>

  case CTRL_DATA_OUT:

    USBH_CtlSendData (phost,
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	6899      	ldr	r1, [r3, #8]
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	899a      	ldrh	r2, [r3, #12]
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	7958      	ldrb	r0, [r3, #5]
 800849a:	2301      	movs	r3, #1
 800849c:	9300      	str	r3, [sp, #0]
 800849e:	4603      	mov	r3, r0
 80084a0:	6878      	ldr	r0, [r7, #4]
 80084a2:	f000 f96d 	bl	8008780 <USBH_CtlSendData>
                      phost->Control.buff,
                      phost->Control.length ,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 80084ac:	b29a      	uxth	r2, r3
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2206      	movs	r2, #6
 80084b6:	761a      	strb	r2, [r3, #24]
    break;
 80084b8:	e142      	b.n	8008740 <USBH_HandleControl+0x470>

  case CTRL_DATA_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	795b      	ldrb	r3, [r3, #5]
 80084be:	4619      	mov	r1, r3
 80084c0:	6878      	ldr	r0, [r7, #4]
 80084c2:	f004 faef 	bl	800caa4 <USBH_LL_GetURBState>
 80084c6:	4603      	mov	r3, r0
 80084c8:	73bb      	strb	r3, [r7, #14]

    if  (URB_Status == USBH_URB_DONE)
 80084ca:	7bbb      	ldrb	r3, [r7, #14]
 80084cc:	2b01      	cmp	r3, #1
 80084ce:	d111      	bne.n	80084f4 <USBH_HandleControl+0x224>
    { /* If the Setup Pkt is sent successful, then change the state */
      phost->Control.state = CTRL_STATUS_IN;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2207      	movs	r2, #7
 80084d4:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	2203      	movs	r2, #3
 80084da:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80084ea:	2200      	movs	r2, #0
 80084ec:	4619      	mov	r1, r3
 80084ee:	f000 faff 	bl	8008af0 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 80084f2:	e120      	b.n	8008736 <USBH_HandleControl+0x466>
    else if  (URB_Status == USBH_URB_STALL)
 80084f4:	7bbb      	ldrb	r3, [r7, #14]
 80084f6:	2b05      	cmp	r3, #5
 80084f8:	d113      	bne.n	8008522 <USBH_HandleControl+0x252>
      phost->Control.state = CTRL_STALLED;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	220c      	movs	r2, #12
 80084fe:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 8008500:	2303      	movs	r3, #3
 8008502:	73fb      	strb	r3, [r7, #15]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2203      	movs	r2, #3
 8008508:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008518:	2200      	movs	r2, #0
 800851a:	4619      	mov	r1, r3
 800851c:	f000 fae8 	bl	8008af0 <osMessagePut>
    break;
 8008520:	e109      	b.n	8008736 <USBH_HandleControl+0x466>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8008522:	7bbb      	ldrb	r3, [r7, #14]
 8008524:	2b02      	cmp	r3, #2
 8008526:	d111      	bne.n	800854c <USBH_HandleControl+0x27c>
      phost->Control.state = CTRL_DATA_OUT;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2205      	movs	r2, #5
 800852c:	761a      	strb	r2, [r3, #24]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	2203      	movs	r2, #3
 8008532:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008542:	2200      	movs	r2, #0
 8008544:	4619      	mov	r1, r3
 8008546:	f000 fad3 	bl	8008af0 <osMessagePut>
    break;
 800854a:	e0f4      	b.n	8008736 <USBH_HandleControl+0x466>
      if (URB_Status == USBH_URB_ERROR)
 800854c:	7bbb      	ldrb	r3, [r7, #14]
 800854e:	2b04      	cmp	r3, #4
 8008550:	f040 80f1 	bne.w	8008736 <USBH_HandleControl+0x466>
        phost->Control.state = CTRL_ERROR;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	220b      	movs	r2, #11
 8008558:	761a      	strb	r2, [r3, #24]
        status = USBH_FAIL;
 800855a:	2302      	movs	r3, #2
 800855c:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	2203      	movs	r2, #3
 8008562:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008572:	2200      	movs	r2, #0
 8008574:	4619      	mov	r1, r3
 8008576:	f000 fabb 	bl	8008af0 <osMessagePut>
    break;
 800857a:	e0dc      	b.n	8008736 <USBH_HandleControl+0x466>


  case CTRL_STATUS_IN:
    /* Send 0 bytes out packet */
    USBH_CtlReceiveData (phost,
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	791b      	ldrb	r3, [r3, #4]
 8008580:	2200      	movs	r2, #0
 8008582:	2100      	movs	r1, #0
 8008584:	6878      	ldr	r0, [r7, #4]
 8008586:	f000 f920 	bl	80087ca <USBH_CtlReceiveData>
                         0U,
                         0U,
                         phost->Control.pipe_in);
    phost->Control.timer = (uint16_t)phost->Timer;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8008590:	b29a      	uxth	r2, r3
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	2208      	movs	r2, #8
 800859a:	761a      	strb	r2, [r3, #24]

    break;
 800859c:	e0d0      	b.n	8008740 <USBH_HandleControl+0x470>

  case CTRL_STATUS_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	791b      	ldrb	r3, [r3, #4]
 80085a2:	4619      	mov	r1, r3
 80085a4:	6878      	ldr	r0, [r7, #4]
 80085a6:	f004 fa7d 	bl	800caa4 <USBH_LL_GetURBState>
 80085aa:	4603      	mov	r3, r0
 80085ac:	73bb      	strb	r3, [r7, #14]

    if  ( URB_Status == USBH_URB_DONE)
 80085ae:	7bbb      	ldrb	r3, [r7, #14]
 80085b0:	2b01      	cmp	r3, #1
 80085b2:	d113      	bne.n	80085dc <USBH_HandleControl+0x30c>
    { /* Control transfers completed, Exit the State Machine */
      phost->Control.state = CTRL_COMPLETE;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	220d      	movs	r2, #13
 80085b8:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 80085ba:	2300      	movs	r3, #0
 80085bc:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2203      	movs	r2, #3
 80085c2:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80085d2:	2200      	movs	r2, #0
 80085d4:	4619      	mov	r1, r3
 80085d6:	f000 fa8b 	bl	8008af0 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 80085da:	e0ae      	b.n	800873a <USBH_HandleControl+0x46a>
    else if (URB_Status == USBH_URB_ERROR)
 80085dc:	7bbb      	ldrb	r3, [r7, #14]
 80085de:	2b04      	cmp	r3, #4
 80085e0:	d111      	bne.n	8008606 <USBH_HandleControl+0x336>
      phost->Control.state = CTRL_ERROR;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	220b      	movs	r2, #11
 80085e6:	761a      	strb	r2, [r3, #24]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2203      	movs	r2, #3
 80085ec:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80085fc:	2200      	movs	r2, #0
 80085fe:	4619      	mov	r1, r3
 8008600:	f000 fa76 	bl	8008af0 <osMessagePut>
    break;
 8008604:	e099      	b.n	800873a <USBH_HandleControl+0x46a>
      if(URB_Status == USBH_URB_STALL)
 8008606:	7bbb      	ldrb	r3, [r7, #14]
 8008608:	2b05      	cmp	r3, #5
 800860a:	f040 8096 	bne.w	800873a <USBH_HandleControl+0x46a>
        status = USBH_NOT_SUPPORTED;
 800860e:	2303      	movs	r3, #3
 8008610:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	2203      	movs	r2, #3
 8008616:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008626:	2200      	movs	r2, #0
 8008628:	4619      	mov	r1, r3
 800862a:	f000 fa61 	bl	8008af0 <osMessagePut>
    break;
 800862e:	e084      	b.n	800873a <USBH_HandleControl+0x46a>

  case CTRL_STATUS_OUT:
    USBH_CtlSendData (phost,
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	795a      	ldrb	r2, [r3, #5]
 8008634:	2301      	movs	r3, #1
 8008636:	9300      	str	r3, [sp, #0]
 8008638:	4613      	mov	r3, r2
 800863a:	2200      	movs	r2, #0
 800863c:	2100      	movs	r1, #0
 800863e:	6878      	ldr	r0, [r7, #4]
 8008640:	f000 f89e 	bl	8008780 <USBH_CtlSendData>
                      0U,
                      0U,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800864a:	b29a      	uxth	r2, r3
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	220a      	movs	r2, #10
 8008654:	761a      	strb	r2, [r3, #24]
    break;
 8008656:	e073      	b.n	8008740 <USBH_HandleControl+0x470>

  case CTRL_STATUS_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	795b      	ldrb	r3, [r3, #5]
 800865c:	4619      	mov	r1, r3
 800865e:	6878      	ldr	r0, [r7, #4]
 8008660:	f004 fa20 	bl	800caa4 <USBH_LL_GetURBState>
 8008664:	4603      	mov	r3, r0
 8008666:	73bb      	strb	r3, [r7, #14]
    if  (URB_Status == USBH_URB_DONE)
 8008668:	7bbb      	ldrb	r3, [r7, #14]
 800866a:	2b01      	cmp	r3, #1
 800866c:	d113      	bne.n	8008696 <USBH_HandleControl+0x3c6>
    {
      status = USBH_OK;
 800866e:	2300      	movs	r3, #0
 8008670:	73fb      	strb	r3, [r7, #15]
      phost->Control.state = CTRL_COMPLETE;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	220d      	movs	r2, #13
 8008676:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2203      	movs	r2, #3
 800867c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800868c:	2200      	movs	r2, #0
 800868e:	4619      	mov	r1, r3
 8008690:	f000 fa2e 	bl	8008af0 <osMessagePut>
#endif
#endif
      }

    }
    break;
 8008694:	e053      	b.n	800873e <USBH_HandleControl+0x46e>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8008696:	7bbb      	ldrb	r3, [r7, #14]
 8008698:	2b02      	cmp	r3, #2
 800869a:	d111      	bne.n	80086c0 <USBH_HandleControl+0x3f0>
      phost->Control.state = CTRL_STATUS_OUT;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2209      	movs	r2, #9
 80086a0:	761a      	strb	r2, [r3, #24]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	2203      	movs	r2, #3
 80086a6:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80086b6:	2200      	movs	r2, #0
 80086b8:	4619      	mov	r1, r3
 80086ba:	f000 fa19 	bl	8008af0 <osMessagePut>
    break;
 80086be:	e03e      	b.n	800873e <USBH_HandleControl+0x46e>
      if (URB_Status == USBH_URB_ERROR)
 80086c0:	7bbb      	ldrb	r3, [r7, #14]
 80086c2:	2b04      	cmp	r3, #4
 80086c4:	d13b      	bne.n	800873e <USBH_HandleControl+0x46e>
        phost->Control.state = CTRL_ERROR;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	220b      	movs	r2, #11
 80086ca:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2203      	movs	r2, #3
 80086d0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80086e0:	2200      	movs	r2, #0
 80086e2:	4619      	mov	r1, r3
 80086e4:	f000 fa04 	bl	8008af0 <osMessagePut>
    break;
 80086e8:	e029      	b.n	800873e <USBH_HandleControl+0x46e>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be
    required to clear the halt or error condition if the next Setup PID is not
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	7e5b      	ldrb	r3, [r3, #25]
 80086ee:	3301      	adds	r3, #1
 80086f0:	b2da      	uxtb	r2, r3
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	765a      	strb	r2, [r3, #25]
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	7e5b      	ldrb	r3, [r3, #25]
 80086fa:	2b02      	cmp	r3, #2
 80086fc:	d809      	bhi.n	8008712 <USBH_HandleControl+0x442>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 80086fe:	6878      	ldr	r0, [r7, #4]
 8008700:	f004 f8e3 	bl	800c8ca <USBH_LL_Stop>

      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2201      	movs	r2, #1
 8008708:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_SEND;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	2201      	movs	r2, #1
 800870e:	709a      	strb	r2, [r3, #2]
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
      phost->Control.errorcount = 0U;
      USBH_ErrLog("Control error");
      status = USBH_FAIL;
    }
    break;
 8008710:	e016      	b.n	8008740 <USBH_HandleControl+0x470>
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008718:	2106      	movs	r1, #6
 800871a:	6878      	ldr	r0, [r7, #4]
 800871c:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	2200      	movs	r2, #0
 8008722:	765a      	strb	r2, [r3, #25]
      status = USBH_FAIL;
 8008724:	2302      	movs	r3, #2
 8008726:	73fb      	strb	r3, [r7, #15]
    break;
 8008728:	e00a      	b.n	8008740 <USBH_HandleControl+0x470>

  default:
    break;
 800872a:	bf00      	nop
 800872c:	e008      	b.n	8008740 <USBH_HandleControl+0x470>
    break;
 800872e:	bf00      	nop
 8008730:	e006      	b.n	8008740 <USBH_HandleControl+0x470>
    break;
 8008732:	bf00      	nop
 8008734:	e004      	b.n	8008740 <USBH_HandleControl+0x470>
    break;
 8008736:	bf00      	nop
 8008738:	e002      	b.n	8008740 <USBH_HandleControl+0x470>
    break;
 800873a:	bf00      	nop
 800873c:	e000      	b.n	8008740 <USBH_HandleControl+0x470>
    break;
 800873e:	bf00      	nop
  }
  return status;
 8008740:	7bfb      	ldrb	r3, [r7, #15]
}
 8008742:	4618      	mov	r0, r3
 8008744:	3710      	adds	r7, #16
 8008746:	46bd      	mov	sp, r7
 8008748:	bd80      	pop	{r7, pc}
 800874a:	bf00      	nop

0800874c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint8_t pipe_num)
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b088      	sub	sp, #32
 8008750:	af04      	add	r7, sp, #16
 8008752:	60f8      	str	r0, [r7, #12]
 8008754:	60b9      	str	r1, [r7, #8]
 8008756:	4613      	mov	r3, r2
 8008758:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800875a:	79f9      	ldrb	r1, [r7, #7]
 800875c:	2300      	movs	r3, #0
 800875e:	9303      	str	r3, [sp, #12]
 8008760:	2308      	movs	r3, #8
 8008762:	9302      	str	r3, [sp, #8]
 8008764:	68bb      	ldr	r3, [r7, #8]
 8008766:	9301      	str	r3, [sp, #4]
 8008768:	2300      	movs	r3, #0
 800876a:	9300      	str	r3, [sp, #0]
 800876c:	2300      	movs	r3, #0
 800876e:	2200      	movs	r2, #0
 8008770:	68f8      	ldr	r0, [r7, #12]
 8008772:	f004 f966 	bl	800ca42 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8008776:	2300      	movs	r3, #0
}
 8008778:	4618      	mov	r0, r3
 800877a:	3710      	adds	r7, #16
 800877c:	46bd      	mov	sp, r7
 800877e:	bd80      	pop	{r7, pc}

08008780 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b088      	sub	sp, #32
 8008784:	af04      	add	r7, sp, #16
 8008786:	60f8      	str	r0, [r7, #12]
 8008788:	60b9      	str	r1, [r7, #8]
 800878a:	4611      	mov	r1, r2
 800878c:	461a      	mov	r2, r3
 800878e:	460b      	mov	r3, r1
 8008790:	80fb      	strh	r3, [r7, #6]
 8008792:	4613      	mov	r3, r2
 8008794:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800879c:	2b00      	cmp	r3, #0
 800879e:	d001      	beq.n	80087a4 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80087a0:	2300      	movs	r3, #0
 80087a2:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80087a4:	7979      	ldrb	r1, [r7, #5]
 80087a6:	7e3b      	ldrb	r3, [r7, #24]
 80087a8:	9303      	str	r3, [sp, #12]
 80087aa:	88fb      	ldrh	r3, [r7, #6]
 80087ac:	9302      	str	r3, [sp, #8]
 80087ae:	68bb      	ldr	r3, [r7, #8]
 80087b0:	9301      	str	r3, [sp, #4]
 80087b2:	2301      	movs	r3, #1
 80087b4:	9300      	str	r3, [sp, #0]
 80087b6:	2300      	movs	r3, #0
 80087b8:	2200      	movs	r2, #0
 80087ba:	68f8      	ldr	r0, [r7, #12]
 80087bc:	f004 f941 	bl	800ca42 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80087c0:	2300      	movs	r3, #0
}
 80087c2:	4618      	mov	r0, r3
 80087c4:	3710      	adds	r7, #16
 80087c6:	46bd      	mov	sp, r7
 80087c8:	bd80      	pop	{r7, pc}

080087ca <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t* buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 80087ca:	b580      	push	{r7, lr}
 80087cc:	b088      	sub	sp, #32
 80087ce:	af04      	add	r7, sp, #16
 80087d0:	60f8      	str	r0, [r7, #12]
 80087d2:	60b9      	str	r1, [r7, #8]
 80087d4:	4611      	mov	r1, r2
 80087d6:	461a      	mov	r2, r3
 80087d8:	460b      	mov	r3, r1
 80087da:	80fb      	strh	r3, [r7, #6]
 80087dc:	4613      	mov	r3, r2
 80087de:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80087e0:	7979      	ldrb	r1, [r7, #5]
 80087e2:	2300      	movs	r3, #0
 80087e4:	9303      	str	r3, [sp, #12]
 80087e6:	88fb      	ldrh	r3, [r7, #6]
 80087e8:	9302      	str	r3, [sp, #8]
 80087ea:	68bb      	ldr	r3, [r7, #8]
 80087ec:	9301      	str	r3, [sp, #4]
 80087ee:	2301      	movs	r3, #1
 80087f0:	9300      	str	r3, [sp, #0]
 80087f2:	2300      	movs	r3, #0
 80087f4:	2201      	movs	r2, #1
 80087f6:	68f8      	ldr	r0, [r7, #12]
 80087f8:	f004 f923 	bl	800ca42 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80087fc:	2300      	movs	r3, #0

}
 80087fe:	4618      	mov	r0, r3
 8008800:	3710      	adds	r7, #16
 8008802:	46bd      	mov	sp, r7
 8008804:	bd80      	pop	{r7, pc}

08008806 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping)
{
 8008806:	b580      	push	{r7, lr}
 8008808:	b088      	sub	sp, #32
 800880a:	af04      	add	r7, sp, #16
 800880c:	60f8      	str	r0, [r7, #12]
 800880e:	60b9      	str	r1, [r7, #8]
 8008810:	4611      	mov	r1, r2
 8008812:	461a      	mov	r2, r3
 8008814:	460b      	mov	r3, r1
 8008816:	80fb      	strh	r3, [r7, #6]
 8008818:	4613      	mov	r3, r2
 800881a:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008822:	2b00      	cmp	r3, #0
 8008824:	d001      	beq.n	800882a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008826:	2300      	movs	r3, #0
 8008828:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800882a:	7979      	ldrb	r1, [r7, #5]
 800882c:	7e3b      	ldrb	r3, [r7, #24]
 800882e:	9303      	str	r3, [sp, #12]
 8008830:	88fb      	ldrh	r3, [r7, #6]
 8008832:	9302      	str	r3, [sp, #8]
 8008834:	68bb      	ldr	r3, [r7, #8]
 8008836:	9301      	str	r3, [sp, #4]
 8008838:	2301      	movs	r3, #1
 800883a:	9300      	str	r3, [sp, #0]
 800883c:	2302      	movs	r3, #2
 800883e:	2200      	movs	r2, #0
 8008840:	68f8      	ldr	r0, [r7, #12]
 8008842:	f004 f8fe 	bl	800ca42 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8008846:	2300      	movs	r3, #0
}
 8008848:	4618      	mov	r0, r3
 800884a:	3710      	adds	r7, #16
 800884c:	46bd      	mov	sp, r7
 800884e:	bd80      	pop	{r7, pc}

08008850 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b088      	sub	sp, #32
 8008854:	af04      	add	r7, sp, #16
 8008856:	60f8      	str	r0, [r7, #12]
 8008858:	60b9      	str	r1, [r7, #8]
 800885a:	4611      	mov	r1, r2
 800885c:	461a      	mov	r2, r3
 800885e:	460b      	mov	r3, r1
 8008860:	80fb      	strh	r3, [r7, #6]
 8008862:	4613      	mov	r3, r2
 8008864:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8008866:	7979      	ldrb	r1, [r7, #5]
 8008868:	2300      	movs	r3, #0
 800886a:	9303      	str	r3, [sp, #12]
 800886c:	88fb      	ldrh	r3, [r7, #6]
 800886e:	9302      	str	r3, [sp, #8]
 8008870:	68bb      	ldr	r3, [r7, #8]
 8008872:	9301      	str	r3, [sp, #4]
 8008874:	2301      	movs	r3, #1
 8008876:	9300      	str	r3, [sp, #0]
 8008878:	2302      	movs	r3, #2
 800887a:	2201      	movs	r2, #1
 800887c:	68f8      	ldr	r0, [r7, #12]
 800887e:	f004 f8e0 	bl	800ca42 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008882:	2300      	movs	r3, #0
}
 8008884:	4618      	mov	r0, r3
 8008886:	3710      	adds	r7, #16
 8008888:	46bd      	mov	sp, r7
 800888a:	bd80      	pop	{r7, pc}

0800888c <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 800888c:	b580      	push	{r7, lr}
 800888e:	b086      	sub	sp, #24
 8008890:	af04      	add	r7, sp, #16
 8008892:	6078      	str	r0, [r7, #4]
 8008894:	4608      	mov	r0, r1
 8008896:	4611      	mov	r1, r2
 8008898:	461a      	mov	r2, r3
 800889a:	4603      	mov	r3, r0
 800889c:	70fb      	strb	r3, [r7, #3]
 800889e:	460b      	mov	r3, r1
 80088a0:	70bb      	strb	r3, [r7, #2]
 80088a2:	4613      	mov	r3, r2
 80088a4:	707b      	strb	r3, [r7, #1]

  USBH_LL_OpenPipe(phost,
 80088a6:	7878      	ldrb	r0, [r7, #1]
 80088a8:	78ba      	ldrb	r2, [r7, #2]
 80088aa:	78f9      	ldrb	r1, [r7, #3]
 80088ac:	8b3b      	ldrh	r3, [r7, #24]
 80088ae:	9302      	str	r3, [sp, #8]
 80088b0:	7d3b      	ldrb	r3, [r7, #20]
 80088b2:	9301      	str	r3, [sp, #4]
 80088b4:	7c3b      	ldrb	r3, [r7, #16]
 80088b6:	9300      	str	r3, [sp, #0]
 80088b8:	4603      	mov	r3, r0
 80088ba:	6878      	ldr	r0, [r7, #4]
 80088bc:	f004 f873 	bl	800c9a6 <USBH_LL_OpenPipe>
                        dev_address,
                        speed,
                        ep_type,
                        mps);

  return USBH_OK;
 80088c0:	2300      	movs	r3, #0

}
 80088c2:	4618      	mov	r0, r3
 80088c4:	3708      	adds	r7, #8
 80088c6:	46bd      	mov	sp, r7
 80088c8:	bd80      	pop	{r7, pc}

080088ca <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 80088ca:	b580      	push	{r7, lr}
 80088cc:	b082      	sub	sp, #8
 80088ce:	af00      	add	r7, sp, #0
 80088d0:	6078      	str	r0, [r7, #4]
 80088d2:	460b      	mov	r3, r1
 80088d4:	70fb      	strb	r3, [r7, #3]

  USBH_LL_ClosePipe(phost, pipe_num);
 80088d6:	78fb      	ldrb	r3, [r7, #3]
 80088d8:	4619      	mov	r1, r3
 80088da:	6878      	ldr	r0, [r7, #4]
 80088dc:	f004 f892 	bl	800ca04 <USBH_LL_ClosePipe>

  return USBH_OK;
 80088e0:	2300      	movs	r3, #0

}
 80088e2:	4618      	mov	r0, r3
 80088e4:	3708      	adds	r7, #8
 80088e6:	46bd      	mov	sp, r7
 80088e8:	bd80      	pop	{r7, pc}

080088ea <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80088ea:	b580      	push	{r7, lr}
 80088ec:	b084      	sub	sp, #16
 80088ee:	af00      	add	r7, sp, #0
 80088f0:	6078      	str	r0, [r7, #4]
 80088f2:	460b      	mov	r3, r1
 80088f4:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80088f6:	6878      	ldr	r0, [r7, #4]
 80088f8:	f000 f831 	bl	800895e <USBH_GetFreePipe>
 80088fc:	4603      	mov	r3, r0
 80088fe:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008900:	89fb      	ldrh	r3, [r7, #14]
 8008902:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008906:	4293      	cmp	r3, r2
 8008908:	d007      	beq.n	800891a <USBH_AllocPipe+0x30>
  {
	phost->Pipes[pipe] = 0x8000U | ep_addr;
 800890a:	78fb      	ldrb	r3, [r7, #3]
 800890c:	89fa      	ldrh	r2, [r7, #14]
 800890e:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	32e0      	adds	r2, #224	; 0xe0
 8008916:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  return (uint8_t)pipe;
 800891a:	89fb      	ldrh	r3, [r7, #14]
 800891c:	b2db      	uxtb	r3, r3
}
 800891e:	4618      	mov	r0, r3
 8008920:	3710      	adds	r7, #16
 8008922:	46bd      	mov	sp, r7
 8008924:	bd80      	pop	{r7, pc}

08008926 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe  (USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008926:	b480      	push	{r7}
 8008928:	b083      	sub	sp, #12
 800892a:	af00      	add	r7, sp, #0
 800892c:	6078      	str	r0, [r7, #4]
 800892e:	460b      	mov	r3, r1
 8008930:	70fb      	strb	r3, [r7, #3]
   if(idx < 11U)
 8008932:	78fb      	ldrb	r3, [r7, #3]
 8008934:	2b0a      	cmp	r3, #10
 8008936:	d80b      	bhi.n	8008950 <USBH_FreePipe+0x2a>
   {
	 phost->Pipes[idx] &= 0x7FFFU;
 8008938:	78fa      	ldrb	r2, [r7, #3]
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	32e0      	adds	r2, #224	; 0xe0
 800893e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008942:	78fa      	ldrb	r2, [r7, #3]
 8008944:	f3c3 010e 	ubfx	r1, r3, #0, #15
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	32e0      	adds	r2, #224	; 0xe0
 800894c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   }
   return USBH_OK;
 8008950:	2300      	movs	r3, #0
}
 8008952:	4618      	mov	r0, r3
 8008954:	370c      	adds	r7, #12
 8008956:	46bd      	mov	sp, r7
 8008958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895c:	4770      	bx	lr

0800895e <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe (USBH_HandleTypeDef *phost)
{
 800895e:	b480      	push	{r7}
 8008960:	b085      	sub	sp, #20
 8008962:	af00      	add	r7, sp, #0
 8008964:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008966:	2300      	movs	r3, #0
 8008968:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800896a:	2300      	movs	r3, #0
 800896c:	73fb      	strb	r3, [r7, #15]
 800896e:	e00e      	b.n	800898e <USBH_GetFreePipe+0x30>
  {
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008970:	7bfa      	ldrb	r2, [r7, #15]
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	32e0      	adds	r2, #224	; 0xe0
 8008976:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800897a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800897e:	2b00      	cmp	r3, #0
 8008980:	d102      	bne.n	8008988 <USBH_GetFreePipe+0x2a>
	{
	   return (uint16_t)idx;
 8008982:	7bfb      	ldrb	r3, [r7, #15]
 8008984:	b29b      	uxth	r3, r3
 8008986:	e007      	b.n	8008998 <USBH_GetFreePipe+0x3a>
  for (idx = 0U ; idx < 11U ; idx++)
 8008988:	7bfb      	ldrb	r3, [r7, #15]
 800898a:	3301      	adds	r3, #1
 800898c:	73fb      	strb	r3, [r7, #15]
 800898e:	7bfb      	ldrb	r3, [r7, #15]
 8008990:	2b0a      	cmp	r3, #10
 8008992:	d9ed      	bls.n	8008970 <USBH_GetFreePipe+0x12>
	}
  }
  return 0xFFFFU;
 8008994:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008998:	4618      	mov	r0, r3
 800899a:	3714      	adds	r7, #20
 800899c:	46bd      	mov	sp, r7
 800899e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a2:	4770      	bx	lr

080089a4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80089a4:	b480      	push	{r7}
 80089a6:	b085      	sub	sp, #20
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	4603      	mov	r3, r0
 80089ac:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80089ae:	2300      	movs	r3, #0
 80089b0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80089b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80089b6:	2b84      	cmp	r3, #132	; 0x84
 80089b8:	d005      	beq.n	80089c6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80089ba:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	4413      	add	r3, r2
 80089c2:	3303      	adds	r3, #3
 80089c4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80089c6:	68fb      	ldr	r3, [r7, #12]
}
 80089c8:	4618      	mov	r0, r3
 80089ca:	3714      	adds	r7, #20
 80089cc:	46bd      	mov	sp, r7
 80089ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d2:	4770      	bx	lr

080089d4 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80089d4:	b480      	push	{r7}
 80089d6:	b083      	sub	sp, #12
 80089d8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80089da:	f3ef 8305 	mrs	r3, IPSR
 80089de:	607b      	str	r3, [r7, #4]
  return(result);
 80089e0:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	bf14      	ite	ne
 80089e6:	2301      	movne	r3, #1
 80089e8:	2300      	moveq	r3, #0
 80089ea:	b2db      	uxtb	r3, r3
}
 80089ec:	4618      	mov	r0, r3
 80089ee:	370c      	adds	r7, #12
 80089f0:	46bd      	mov	sp, r7
 80089f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f6:	4770      	bx	lr

080089f8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80089fc:	f001 f89e 	bl	8009b3c <vTaskStartScheduler>
  
  return osOK;
 8008a00:	2300      	movs	r3, #0
}
 8008a02:	4618      	mov	r0, r3
 8008a04:	bd80      	pop	{r7, pc}

08008a06 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8008a06:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a08:	b089      	sub	sp, #36	; 0x24
 8008a0a:	af04      	add	r7, sp, #16
 8008a0c:	6078      	str	r0, [r7, #4]
 8008a0e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	695b      	ldr	r3, [r3, #20]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d020      	beq.n	8008a5a <osThreadCreate+0x54>
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	699b      	ldr	r3, [r3, #24]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d01c      	beq.n	8008a5a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	685c      	ldr	r4, [r3, #4]
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681d      	ldr	r5, [r3, #0]
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	691e      	ldr	r6, [r3, #16]
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008a32:	4618      	mov	r0, r3
 8008a34:	f7ff ffb6 	bl	80089a4 <makeFreeRtosPriority>
 8008a38:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	695b      	ldr	r3, [r3, #20]
 8008a3e:	687a      	ldr	r2, [r7, #4]
 8008a40:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008a42:	9202      	str	r2, [sp, #8]
 8008a44:	9301      	str	r3, [sp, #4]
 8008a46:	9100      	str	r1, [sp, #0]
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	4632      	mov	r2, r6
 8008a4c:	4629      	mov	r1, r5
 8008a4e:	4620      	mov	r0, r4
 8008a50:	f000 fee3 	bl	800981a <xTaskCreateStatic>
 8008a54:	4603      	mov	r3, r0
 8008a56:	60fb      	str	r3, [r7, #12]
 8008a58:	e01c      	b.n	8008a94 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	685c      	ldr	r4, [r3, #4]
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008a66:	b29e      	uxth	r6, r3
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008a6e:	4618      	mov	r0, r3
 8008a70:	f7ff ff98 	bl	80089a4 <makeFreeRtosPriority>
 8008a74:	4602      	mov	r2, r0
 8008a76:	f107 030c 	add.w	r3, r7, #12
 8008a7a:	9301      	str	r3, [sp, #4]
 8008a7c:	9200      	str	r2, [sp, #0]
 8008a7e:	683b      	ldr	r3, [r7, #0]
 8008a80:	4632      	mov	r2, r6
 8008a82:	4629      	mov	r1, r5
 8008a84:	4620      	mov	r0, r4
 8008a86:	f000 ff21 	bl	80098cc <xTaskCreate>
 8008a8a:	4603      	mov	r3, r0
 8008a8c:	2b01      	cmp	r3, #1
 8008a8e:	d001      	beq.n	8008a94 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8008a90:	2300      	movs	r3, #0
 8008a92:	e000      	b.n	8008a96 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8008a94:	68fb      	ldr	r3, [r7, #12]
}
 8008a96:	4618      	mov	r0, r3
 8008a98:	3714      	adds	r7, #20
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008a9e <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8008a9e:	b590      	push	{r4, r7, lr}
 8008aa0:	b085      	sub	sp, #20
 8008aa2:	af02      	add	r7, sp, #8
 8008aa4:	6078      	str	r0, [r7, #4]
 8008aa6:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	689b      	ldr	r3, [r3, #8]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d012      	beq.n	8008ad6 <osMessageCreate+0x38>
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	68db      	ldr	r3, [r3, #12]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d00e      	beq.n	8008ad6 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	6818      	ldr	r0, [r3, #0]
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	6859      	ldr	r1, [r3, #4]
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	689a      	ldr	r2, [r3, #8]
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	68dc      	ldr	r4, [r3, #12]
 8008ac8:	2300      	movs	r3, #0
 8008aca:	9300      	str	r3, [sp, #0]
 8008acc:	4623      	mov	r3, r4
 8008ace:	f000 f9df 	bl	8008e90 <xQueueGenericCreateStatic>
 8008ad2:	4603      	mov	r3, r0
 8008ad4:	e008      	b.n	8008ae8 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	6818      	ldr	r0, [r3, #0]
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	685b      	ldr	r3, [r3, #4]
 8008ade:	2200      	movs	r2, #0
 8008ae0:	4619      	mov	r1, r3
 8008ae2:	f000 fa47 	bl	8008f74 <xQueueGenericCreate>
 8008ae6:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8008ae8:	4618      	mov	r0, r3
 8008aea:	370c      	adds	r7, #12
 8008aec:	46bd      	mov	sp, r7
 8008aee:	bd90      	pop	{r4, r7, pc}

08008af0 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b086      	sub	sp, #24
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	60f8      	str	r0, [r7, #12]
 8008af8:	60b9      	str	r1, [r7, #8]
 8008afa:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8008afc:	2300      	movs	r3, #0
 8008afe:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8008b04:	697b      	ldr	r3, [r7, #20]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d101      	bne.n	8008b0e <osMessagePut+0x1e>
    ticks = 1;
 8008b0a:	2301      	movs	r3, #1
 8008b0c:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8008b0e:	f7ff ff61 	bl	80089d4 <inHandlerMode>
 8008b12:	4603      	mov	r3, r0
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d018      	beq.n	8008b4a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8008b18:	f107 0210 	add.w	r2, r7, #16
 8008b1c:	f107 0108 	add.w	r1, r7, #8
 8008b20:	2300      	movs	r3, #0
 8008b22:	68f8      	ldr	r0, [r7, #12]
 8008b24:	f000 fb7c 	bl	8009220 <xQueueGenericSendFromISR>
 8008b28:	4603      	mov	r3, r0
 8008b2a:	2b01      	cmp	r3, #1
 8008b2c:	d001      	beq.n	8008b32 <osMessagePut+0x42>
      return osErrorOS;
 8008b2e:	23ff      	movs	r3, #255	; 0xff
 8008b30:	e018      	b.n	8008b64 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8008b32:	693b      	ldr	r3, [r7, #16]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d014      	beq.n	8008b62 <osMessagePut+0x72>
 8008b38:	4b0c      	ldr	r3, [pc, #48]	; (8008b6c <osMessagePut+0x7c>)
 8008b3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b3e:	601a      	str	r2, [r3, #0]
 8008b40:	f3bf 8f4f 	dsb	sy
 8008b44:	f3bf 8f6f 	isb	sy
 8008b48:	e00b      	b.n	8008b62 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8008b4a:	f107 0108 	add.w	r1, r7, #8
 8008b4e:	2300      	movs	r3, #0
 8008b50:	697a      	ldr	r2, [r7, #20]
 8008b52:	68f8      	ldr	r0, [r7, #12]
 8008b54:	f000 fa6a 	bl	800902c <xQueueGenericSend>
 8008b58:	4603      	mov	r3, r0
 8008b5a:	2b01      	cmp	r3, #1
 8008b5c:	d001      	beq.n	8008b62 <osMessagePut+0x72>
      return osErrorOS;
 8008b5e:	23ff      	movs	r3, #255	; 0xff
 8008b60:	e000      	b.n	8008b64 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8008b62:	2300      	movs	r3, #0
}
 8008b64:	4618      	mov	r0, r3
 8008b66:	3718      	adds	r7, #24
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	bd80      	pop	{r7, pc}
 8008b6c:	e000ed04 	.word	0xe000ed04

08008b70 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8008b70:	b590      	push	{r4, r7, lr}
 8008b72:	b08b      	sub	sp, #44	; 0x2c
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	60f8      	str	r0, [r7, #12]
 8008b78:	60b9      	str	r1, [r7, #8]
 8008b7a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8008b7c:	68bb      	ldr	r3, [r7, #8]
 8008b7e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8008b80:	2300      	movs	r3, #0
 8008b82:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8008b84:	68bb      	ldr	r3, [r7, #8]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d10a      	bne.n	8008ba0 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8008b8a:	2380      	movs	r3, #128	; 0x80
 8008b8c:	617b      	str	r3, [r7, #20]
    return event;
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	461c      	mov	r4, r3
 8008b92:	f107 0314 	add.w	r3, r7, #20
 8008b96:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008b9a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008b9e:	e054      	b.n	8008c4a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008bae:	d103      	bne.n	8008bb8 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8008bb0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008bb4:	627b      	str	r3, [r7, #36]	; 0x24
 8008bb6:	e009      	b.n	8008bcc <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d006      	beq.n	8008bcc <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8008bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d101      	bne.n	8008bcc <osMessageGet+0x5c>
      ticks = 1;
 8008bc8:	2301      	movs	r3, #1
 8008bca:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8008bcc:	f7ff ff02 	bl	80089d4 <inHandlerMode>
 8008bd0:	4603      	mov	r3, r0
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d01c      	beq.n	8008c10 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8008bd6:	f107 0220 	add.w	r2, r7, #32
 8008bda:	f107 0314 	add.w	r3, r7, #20
 8008bde:	3304      	adds	r3, #4
 8008be0:	4619      	mov	r1, r3
 8008be2:	68b8      	ldr	r0, [r7, #8]
 8008be4:	f000 fc8c 	bl	8009500 <xQueueReceiveFromISR>
 8008be8:	4603      	mov	r3, r0
 8008bea:	2b01      	cmp	r3, #1
 8008bec:	d102      	bne.n	8008bf4 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8008bee:	2310      	movs	r3, #16
 8008bf0:	617b      	str	r3, [r7, #20]
 8008bf2:	e001      	b.n	8008bf8 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8008bf8:	6a3b      	ldr	r3, [r7, #32]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d01d      	beq.n	8008c3a <osMessageGet+0xca>
 8008bfe:	4b15      	ldr	r3, [pc, #84]	; (8008c54 <osMessageGet+0xe4>)
 8008c00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c04:	601a      	str	r2, [r3, #0]
 8008c06:	f3bf 8f4f 	dsb	sy
 8008c0a:	f3bf 8f6f 	isb	sy
 8008c0e:	e014      	b.n	8008c3a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8008c10:	f107 0314 	add.w	r3, r7, #20
 8008c14:	3304      	adds	r3, #4
 8008c16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c18:	4619      	mov	r1, r3
 8008c1a:	68b8      	ldr	r0, [r7, #8]
 8008c1c:	f000 fb94 	bl	8009348 <xQueueReceive>
 8008c20:	4603      	mov	r3, r0
 8008c22:	2b01      	cmp	r3, #1
 8008c24:	d102      	bne.n	8008c2c <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8008c26:	2310      	movs	r3, #16
 8008c28:	617b      	str	r3, [r7, #20]
 8008c2a:	e006      	b.n	8008c3a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8008c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d101      	bne.n	8008c36 <osMessageGet+0xc6>
 8008c32:	2300      	movs	r3, #0
 8008c34:	e000      	b.n	8008c38 <osMessageGet+0xc8>
 8008c36:	2340      	movs	r3, #64	; 0x40
 8008c38:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	461c      	mov	r4, r3
 8008c3e:	f107 0314 	add.w	r3, r7, #20
 8008c42:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008c46:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8008c4a:	68f8      	ldr	r0, [r7, #12]
 8008c4c:	372c      	adds	r7, #44	; 0x2c
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	bd90      	pop	{r4, r7, pc}
 8008c52:	bf00      	nop
 8008c54:	e000ed04 	.word	0xe000ed04

08008c58 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008c58:	b480      	push	{r7}
 8008c5a:	b083      	sub	sp, #12
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	f103 0208 	add.w	r2, r3, #8
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008c70:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	f103 0208 	add.w	r2, r3, #8
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	f103 0208 	add.w	r2, r3, #8
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	2200      	movs	r2, #0
 8008c8a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008c8c:	bf00      	nop
 8008c8e:	370c      	adds	r7, #12
 8008c90:	46bd      	mov	sp, r7
 8008c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c96:	4770      	bx	lr

08008c98 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008c98:	b480      	push	{r7}
 8008c9a:	b083      	sub	sp, #12
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008ca6:	bf00      	nop
 8008ca8:	370c      	adds	r7, #12
 8008caa:	46bd      	mov	sp, r7
 8008cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb0:	4770      	bx	lr

08008cb2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008cb2:	b480      	push	{r7}
 8008cb4:	b085      	sub	sp, #20
 8008cb6:	af00      	add	r7, sp, #0
 8008cb8:	6078      	str	r0, [r7, #4]
 8008cba:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	685b      	ldr	r3, [r3, #4]
 8008cc0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008cc2:	683b      	ldr	r3, [r7, #0]
 8008cc4:	68fa      	ldr	r2, [r7, #12]
 8008cc6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	689a      	ldr	r2, [r3, #8]
 8008ccc:	683b      	ldr	r3, [r7, #0]
 8008cce:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	689b      	ldr	r3, [r3, #8]
 8008cd4:	683a      	ldr	r2, [r7, #0]
 8008cd6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	683a      	ldr	r2, [r7, #0]
 8008cdc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8008cde:	683b      	ldr	r3, [r7, #0]
 8008ce0:	687a      	ldr	r2, [r7, #4]
 8008ce2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	1c5a      	adds	r2, r3, #1
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	601a      	str	r2, [r3, #0]
}
 8008cee:	bf00      	nop
 8008cf0:	3714      	adds	r7, #20
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf8:	4770      	bx	lr

08008cfa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008cfa:	b480      	push	{r7}
 8008cfc:	b085      	sub	sp, #20
 8008cfe:	af00      	add	r7, sp, #0
 8008d00:	6078      	str	r0, [r7, #4]
 8008d02:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008d0a:	68bb      	ldr	r3, [r7, #8]
 8008d0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008d10:	d103      	bne.n	8008d1a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	691b      	ldr	r3, [r3, #16]
 8008d16:	60fb      	str	r3, [r7, #12]
 8008d18:	e00c      	b.n	8008d34 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	3308      	adds	r3, #8
 8008d1e:	60fb      	str	r3, [r7, #12]
 8008d20:	e002      	b.n	8008d28 <vListInsert+0x2e>
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	685b      	ldr	r3, [r3, #4]
 8008d26:	60fb      	str	r3, [r7, #12]
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	685b      	ldr	r3, [r3, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	68ba      	ldr	r2, [r7, #8]
 8008d30:	429a      	cmp	r2, r3
 8008d32:	d2f6      	bcs.n	8008d22 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	685a      	ldr	r2, [r3, #4]
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008d3c:	683b      	ldr	r3, [r7, #0]
 8008d3e:	685b      	ldr	r3, [r3, #4]
 8008d40:	683a      	ldr	r2, [r7, #0]
 8008d42:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008d44:	683b      	ldr	r3, [r7, #0]
 8008d46:	68fa      	ldr	r2, [r7, #12]
 8008d48:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	683a      	ldr	r2, [r7, #0]
 8008d4e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8008d50:	683b      	ldr	r3, [r7, #0]
 8008d52:	687a      	ldr	r2, [r7, #4]
 8008d54:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	1c5a      	adds	r2, r3, #1
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	601a      	str	r2, [r3, #0]
}
 8008d60:	bf00      	nop
 8008d62:	3714      	adds	r7, #20
 8008d64:	46bd      	mov	sp, r7
 8008d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6a:	4770      	bx	lr

08008d6c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008d6c:	b480      	push	{r7}
 8008d6e:	b085      	sub	sp, #20
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	691b      	ldr	r3, [r3, #16]
 8008d78:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	685b      	ldr	r3, [r3, #4]
 8008d7e:	687a      	ldr	r2, [r7, #4]
 8008d80:	6892      	ldr	r2, [r2, #8]
 8008d82:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	689b      	ldr	r3, [r3, #8]
 8008d88:	687a      	ldr	r2, [r7, #4]
 8008d8a:	6852      	ldr	r2, [r2, #4]
 8008d8c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	685b      	ldr	r3, [r3, #4]
 8008d92:	687a      	ldr	r2, [r7, #4]
 8008d94:	429a      	cmp	r2, r3
 8008d96:	d103      	bne.n	8008da0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	689a      	ldr	r2, [r3, #8]
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2200      	movs	r2, #0
 8008da4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	1e5a      	subs	r2, r3, #1
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	681b      	ldr	r3, [r3, #0]
}
 8008db4:	4618      	mov	r0, r3
 8008db6:	3714      	adds	r7, #20
 8008db8:	46bd      	mov	sp, r7
 8008dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dbe:	4770      	bx	lr

08008dc0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	b084      	sub	sp, #16
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
 8008dc8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d109      	bne.n	8008de8 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dd8:	f383 8811 	msr	BASEPRI, r3
 8008ddc:	f3bf 8f6f 	isb	sy
 8008de0:	f3bf 8f4f 	dsb	sy
 8008de4:	60bb      	str	r3, [r7, #8]
 8008de6:	e7fe      	b.n	8008de6 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8008de8:	f001 fd00 	bl	800a7ec <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	681a      	ldr	r2, [r3, #0]
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008df4:	68f9      	ldr	r1, [r7, #12]
 8008df6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008df8:	fb01 f303 	mul.w	r3, r1, r3
 8008dfc:	441a      	add	r2, r3
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	2200      	movs	r2, #0
 8008e06:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	681a      	ldr	r2, [r3, #0]
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	681a      	ldr	r2, [r3, #0]
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e18:	3b01      	subs	r3, #1
 8008e1a:	68f9      	ldr	r1, [r7, #12]
 8008e1c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008e1e:	fb01 f303 	mul.w	r3, r1, r3
 8008e22:	441a      	add	r2, r3
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	22ff      	movs	r2, #255	; 0xff
 8008e2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	22ff      	movs	r2, #255	; 0xff
 8008e34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d114      	bne.n	8008e68 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	691b      	ldr	r3, [r3, #16]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d01a      	beq.n	8008e7c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	3310      	adds	r3, #16
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	f001 f8de 	bl	800a00c <xTaskRemoveFromEventList>
 8008e50:	4603      	mov	r3, r0
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d012      	beq.n	8008e7c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008e56:	4b0d      	ldr	r3, [pc, #52]	; (8008e8c <xQueueGenericReset+0xcc>)
 8008e58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e5c:	601a      	str	r2, [r3, #0]
 8008e5e:	f3bf 8f4f 	dsb	sy
 8008e62:	f3bf 8f6f 	isb	sy
 8008e66:	e009      	b.n	8008e7c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	3310      	adds	r3, #16
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	f7ff fef3 	bl	8008c58 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	3324      	adds	r3, #36	; 0x24
 8008e76:	4618      	mov	r0, r3
 8008e78:	f7ff feee 	bl	8008c58 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008e7c:	f001 fce4 	bl	800a848 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008e80:	2301      	movs	r3, #1
}
 8008e82:	4618      	mov	r0, r3
 8008e84:	3710      	adds	r7, #16
 8008e86:	46bd      	mov	sp, r7
 8008e88:	bd80      	pop	{r7, pc}
 8008e8a:	bf00      	nop
 8008e8c:	e000ed04 	.word	0xe000ed04

08008e90 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b08e      	sub	sp, #56	; 0x38
 8008e94:	af02      	add	r7, sp, #8
 8008e96:	60f8      	str	r0, [r7, #12]
 8008e98:	60b9      	str	r1, [r7, #8]
 8008e9a:	607a      	str	r2, [r7, #4]
 8008e9c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d109      	bne.n	8008eb8 <xQueueGenericCreateStatic+0x28>
 8008ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ea8:	f383 8811 	msr	BASEPRI, r3
 8008eac:	f3bf 8f6f 	isb	sy
 8008eb0:	f3bf 8f4f 	dsb	sy
 8008eb4:	62bb      	str	r3, [r7, #40]	; 0x28
 8008eb6:	e7fe      	b.n	8008eb6 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008eb8:	683b      	ldr	r3, [r7, #0]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d109      	bne.n	8008ed2 <xQueueGenericCreateStatic+0x42>
 8008ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ec2:	f383 8811 	msr	BASEPRI, r3
 8008ec6:	f3bf 8f6f 	isb	sy
 8008eca:	f3bf 8f4f 	dsb	sy
 8008ece:	627b      	str	r3, [r7, #36]	; 0x24
 8008ed0:	e7fe      	b.n	8008ed0 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d002      	beq.n	8008ede <xQueueGenericCreateStatic+0x4e>
 8008ed8:	68bb      	ldr	r3, [r7, #8]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d001      	beq.n	8008ee2 <xQueueGenericCreateStatic+0x52>
 8008ede:	2301      	movs	r3, #1
 8008ee0:	e000      	b.n	8008ee4 <xQueueGenericCreateStatic+0x54>
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d109      	bne.n	8008efc <xQueueGenericCreateStatic+0x6c>
 8008ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eec:	f383 8811 	msr	BASEPRI, r3
 8008ef0:	f3bf 8f6f 	isb	sy
 8008ef4:	f3bf 8f4f 	dsb	sy
 8008ef8:	623b      	str	r3, [r7, #32]
 8008efa:	e7fe      	b.n	8008efa <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d102      	bne.n	8008f08 <xQueueGenericCreateStatic+0x78>
 8008f02:	68bb      	ldr	r3, [r7, #8]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d101      	bne.n	8008f0c <xQueueGenericCreateStatic+0x7c>
 8008f08:	2301      	movs	r3, #1
 8008f0a:	e000      	b.n	8008f0e <xQueueGenericCreateStatic+0x7e>
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d109      	bne.n	8008f26 <xQueueGenericCreateStatic+0x96>
 8008f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f16:	f383 8811 	msr	BASEPRI, r3
 8008f1a:	f3bf 8f6f 	isb	sy
 8008f1e:	f3bf 8f4f 	dsb	sy
 8008f22:	61fb      	str	r3, [r7, #28]
 8008f24:	e7fe      	b.n	8008f24 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008f26:	2348      	movs	r3, #72	; 0x48
 8008f28:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008f2a:	697b      	ldr	r3, [r7, #20]
 8008f2c:	2b48      	cmp	r3, #72	; 0x48
 8008f2e:	d009      	beq.n	8008f44 <xQueueGenericCreateStatic+0xb4>
 8008f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f34:	f383 8811 	msr	BASEPRI, r3
 8008f38:	f3bf 8f6f 	isb	sy
 8008f3c:	f3bf 8f4f 	dsb	sy
 8008f40:	61bb      	str	r3, [r7, #24]
 8008f42:	e7fe      	b.n	8008f42 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008f44:	683b      	ldr	r3, [r7, #0]
 8008f46:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d00d      	beq.n	8008f6a <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f50:	2201      	movs	r2, #1
 8008f52:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008f56:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f5c:	9300      	str	r3, [sp, #0]
 8008f5e:	4613      	mov	r3, r2
 8008f60:	687a      	ldr	r2, [r7, #4]
 8008f62:	68b9      	ldr	r1, [r7, #8]
 8008f64:	68f8      	ldr	r0, [r7, #12]
 8008f66:	f000 f842 	bl	8008fee <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8008f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	3730      	adds	r7, #48	; 0x30
 8008f70:	46bd      	mov	sp, r7
 8008f72:	bd80      	pop	{r7, pc}

08008f74 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b08a      	sub	sp, #40	; 0x28
 8008f78:	af02      	add	r7, sp, #8
 8008f7a:	60f8      	str	r0, [r7, #12]
 8008f7c:	60b9      	str	r1, [r7, #8]
 8008f7e:	4613      	mov	r3, r2
 8008f80:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d109      	bne.n	8008f9c <xQueueGenericCreate+0x28>
 8008f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f8c:	f383 8811 	msr	BASEPRI, r3
 8008f90:	f3bf 8f6f 	isb	sy
 8008f94:	f3bf 8f4f 	dsb	sy
 8008f98:	613b      	str	r3, [r7, #16]
 8008f9a:	e7fe      	b.n	8008f9a <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8008f9c:	68bb      	ldr	r3, [r7, #8]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d102      	bne.n	8008fa8 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	61fb      	str	r3, [r7, #28]
 8008fa6:	e004      	b.n	8008fb2 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	68ba      	ldr	r2, [r7, #8]
 8008fac:	fb02 f303 	mul.w	r3, r2, r3
 8008fb0:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8008fb2:	69fb      	ldr	r3, [r7, #28]
 8008fb4:	3348      	adds	r3, #72	; 0x48
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	f001 fd32 	bl	800aa20 <pvPortMalloc>
 8008fbc:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008fbe:	69bb      	ldr	r3, [r7, #24]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d00f      	beq.n	8008fe4 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8008fc4:	69bb      	ldr	r3, [r7, #24]
 8008fc6:	3348      	adds	r3, #72	; 0x48
 8008fc8:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008fca:	69bb      	ldr	r3, [r7, #24]
 8008fcc:	2200      	movs	r2, #0
 8008fce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008fd2:	79fa      	ldrb	r2, [r7, #7]
 8008fd4:	69bb      	ldr	r3, [r7, #24]
 8008fd6:	9300      	str	r3, [sp, #0]
 8008fd8:	4613      	mov	r3, r2
 8008fda:	697a      	ldr	r2, [r7, #20]
 8008fdc:	68b9      	ldr	r1, [r7, #8]
 8008fde:	68f8      	ldr	r0, [r7, #12]
 8008fe0:	f000 f805 	bl	8008fee <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8008fe4:	69bb      	ldr	r3, [r7, #24]
	}
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	3720      	adds	r7, #32
 8008fea:	46bd      	mov	sp, r7
 8008fec:	bd80      	pop	{r7, pc}

08008fee <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008fee:	b580      	push	{r7, lr}
 8008ff0:	b084      	sub	sp, #16
 8008ff2:	af00      	add	r7, sp, #0
 8008ff4:	60f8      	str	r0, [r7, #12]
 8008ff6:	60b9      	str	r1, [r7, #8]
 8008ff8:	607a      	str	r2, [r7, #4]
 8008ffa:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008ffc:	68bb      	ldr	r3, [r7, #8]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d103      	bne.n	800900a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009002:	69bb      	ldr	r3, [r7, #24]
 8009004:	69ba      	ldr	r2, [r7, #24]
 8009006:	601a      	str	r2, [r3, #0]
 8009008:	e002      	b.n	8009010 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800900a:	69bb      	ldr	r3, [r7, #24]
 800900c:	687a      	ldr	r2, [r7, #4]
 800900e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009010:	69bb      	ldr	r3, [r7, #24]
 8009012:	68fa      	ldr	r2, [r7, #12]
 8009014:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009016:	69bb      	ldr	r3, [r7, #24]
 8009018:	68ba      	ldr	r2, [r7, #8]
 800901a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800901c:	2101      	movs	r1, #1
 800901e:	69b8      	ldr	r0, [r7, #24]
 8009020:	f7ff fece 	bl	8008dc0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009024:	bf00      	nop
 8009026:	3710      	adds	r7, #16
 8009028:	46bd      	mov	sp, r7
 800902a:	bd80      	pop	{r7, pc}

0800902c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800902c:	b580      	push	{r7, lr}
 800902e:	b08e      	sub	sp, #56	; 0x38
 8009030:	af00      	add	r7, sp, #0
 8009032:	60f8      	str	r0, [r7, #12]
 8009034:	60b9      	str	r1, [r7, #8]
 8009036:	607a      	str	r2, [r7, #4]
 8009038:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800903a:	2300      	movs	r3, #0
 800903c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009044:	2b00      	cmp	r3, #0
 8009046:	d109      	bne.n	800905c <xQueueGenericSend+0x30>
 8009048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800904c:	f383 8811 	msr	BASEPRI, r3
 8009050:	f3bf 8f6f 	isb	sy
 8009054:	f3bf 8f4f 	dsb	sy
 8009058:	62bb      	str	r3, [r7, #40]	; 0x28
 800905a:	e7fe      	b.n	800905a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800905c:	68bb      	ldr	r3, [r7, #8]
 800905e:	2b00      	cmp	r3, #0
 8009060:	d103      	bne.n	800906a <xQueueGenericSend+0x3e>
 8009062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009066:	2b00      	cmp	r3, #0
 8009068:	d101      	bne.n	800906e <xQueueGenericSend+0x42>
 800906a:	2301      	movs	r3, #1
 800906c:	e000      	b.n	8009070 <xQueueGenericSend+0x44>
 800906e:	2300      	movs	r3, #0
 8009070:	2b00      	cmp	r3, #0
 8009072:	d109      	bne.n	8009088 <xQueueGenericSend+0x5c>
 8009074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009078:	f383 8811 	msr	BASEPRI, r3
 800907c:	f3bf 8f6f 	isb	sy
 8009080:	f3bf 8f4f 	dsb	sy
 8009084:	627b      	str	r3, [r7, #36]	; 0x24
 8009086:	e7fe      	b.n	8009086 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009088:	683b      	ldr	r3, [r7, #0]
 800908a:	2b02      	cmp	r3, #2
 800908c:	d103      	bne.n	8009096 <xQueueGenericSend+0x6a>
 800908e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009092:	2b01      	cmp	r3, #1
 8009094:	d101      	bne.n	800909a <xQueueGenericSend+0x6e>
 8009096:	2301      	movs	r3, #1
 8009098:	e000      	b.n	800909c <xQueueGenericSend+0x70>
 800909a:	2300      	movs	r3, #0
 800909c:	2b00      	cmp	r3, #0
 800909e:	d109      	bne.n	80090b4 <xQueueGenericSend+0x88>
 80090a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090a4:	f383 8811 	msr	BASEPRI, r3
 80090a8:	f3bf 8f6f 	isb	sy
 80090ac:	f3bf 8f4f 	dsb	sy
 80090b0:	623b      	str	r3, [r7, #32]
 80090b2:	e7fe      	b.n	80090b2 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80090b4:	f001 f968 	bl	800a388 <xTaskGetSchedulerState>
 80090b8:	4603      	mov	r3, r0
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d102      	bne.n	80090c4 <xQueueGenericSend+0x98>
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d101      	bne.n	80090c8 <xQueueGenericSend+0x9c>
 80090c4:	2301      	movs	r3, #1
 80090c6:	e000      	b.n	80090ca <xQueueGenericSend+0x9e>
 80090c8:	2300      	movs	r3, #0
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d109      	bne.n	80090e2 <xQueueGenericSend+0xb6>
 80090ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090d2:	f383 8811 	msr	BASEPRI, r3
 80090d6:	f3bf 8f6f 	isb	sy
 80090da:	f3bf 8f4f 	dsb	sy
 80090de:	61fb      	str	r3, [r7, #28]
 80090e0:	e7fe      	b.n	80090e0 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80090e2:	f001 fb83 	bl	800a7ec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80090e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80090ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090ee:	429a      	cmp	r2, r3
 80090f0:	d302      	bcc.n	80090f8 <xQueueGenericSend+0xcc>
 80090f2:	683b      	ldr	r3, [r7, #0]
 80090f4:	2b02      	cmp	r3, #2
 80090f6:	d129      	bne.n	800914c <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80090f8:	683a      	ldr	r2, [r7, #0]
 80090fa:	68b9      	ldr	r1, [r7, #8]
 80090fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80090fe:	f000 fa7c 	bl	80095fa <prvCopyDataToQueue>
 8009102:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009108:	2b00      	cmp	r3, #0
 800910a:	d010      	beq.n	800912e <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800910c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800910e:	3324      	adds	r3, #36	; 0x24
 8009110:	4618      	mov	r0, r3
 8009112:	f000 ff7b 	bl	800a00c <xTaskRemoveFromEventList>
 8009116:	4603      	mov	r3, r0
 8009118:	2b00      	cmp	r3, #0
 800911a:	d013      	beq.n	8009144 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800911c:	4b3f      	ldr	r3, [pc, #252]	; (800921c <xQueueGenericSend+0x1f0>)
 800911e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009122:	601a      	str	r2, [r3, #0]
 8009124:	f3bf 8f4f 	dsb	sy
 8009128:	f3bf 8f6f 	isb	sy
 800912c:	e00a      	b.n	8009144 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800912e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009130:	2b00      	cmp	r3, #0
 8009132:	d007      	beq.n	8009144 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009134:	4b39      	ldr	r3, [pc, #228]	; (800921c <xQueueGenericSend+0x1f0>)
 8009136:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800913a:	601a      	str	r2, [r3, #0]
 800913c:	f3bf 8f4f 	dsb	sy
 8009140:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009144:	f001 fb80 	bl	800a848 <vPortExitCritical>
				return pdPASS;
 8009148:	2301      	movs	r3, #1
 800914a:	e063      	b.n	8009214 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d103      	bne.n	800915a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009152:	f001 fb79 	bl	800a848 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009156:	2300      	movs	r3, #0
 8009158:	e05c      	b.n	8009214 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800915a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800915c:	2b00      	cmp	r3, #0
 800915e:	d106      	bne.n	800916e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009160:	f107 0314 	add.w	r3, r7, #20
 8009164:	4618      	mov	r0, r3
 8009166:	f000 ffb3 	bl	800a0d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800916a:	2301      	movs	r3, #1
 800916c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800916e:	f001 fb6b 	bl	800a848 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009172:	f000 fd41 	bl	8009bf8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009176:	f001 fb39 	bl	800a7ec <vPortEnterCritical>
 800917a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800917c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009180:	b25b      	sxtb	r3, r3
 8009182:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009186:	d103      	bne.n	8009190 <xQueueGenericSend+0x164>
 8009188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800918a:	2200      	movs	r2, #0
 800918c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009192:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009196:	b25b      	sxtb	r3, r3
 8009198:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800919c:	d103      	bne.n	80091a6 <xQueueGenericSend+0x17a>
 800919e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091a0:	2200      	movs	r2, #0
 80091a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80091a6:	f001 fb4f 	bl	800a848 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80091aa:	1d3a      	adds	r2, r7, #4
 80091ac:	f107 0314 	add.w	r3, r7, #20
 80091b0:	4611      	mov	r1, r2
 80091b2:	4618      	mov	r0, r3
 80091b4:	f000 ffa2 	bl	800a0fc <xTaskCheckForTimeOut>
 80091b8:	4603      	mov	r3, r0
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d124      	bne.n	8009208 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80091be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80091c0:	f000 fb13 	bl	80097ea <prvIsQueueFull>
 80091c4:	4603      	mov	r3, r0
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d018      	beq.n	80091fc <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80091ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091cc:	3310      	adds	r3, #16
 80091ce:	687a      	ldr	r2, [r7, #4]
 80091d0:	4611      	mov	r1, r2
 80091d2:	4618      	mov	r0, r3
 80091d4:	f000 fef6 	bl	8009fc4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80091d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80091da:	f000 fa9e 	bl	800971a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80091de:	f000 fd19 	bl	8009c14 <xTaskResumeAll>
 80091e2:	4603      	mov	r3, r0
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	f47f af7c 	bne.w	80090e2 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80091ea:	4b0c      	ldr	r3, [pc, #48]	; (800921c <xQueueGenericSend+0x1f0>)
 80091ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091f0:	601a      	str	r2, [r3, #0]
 80091f2:	f3bf 8f4f 	dsb	sy
 80091f6:	f3bf 8f6f 	isb	sy
 80091fa:	e772      	b.n	80090e2 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80091fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80091fe:	f000 fa8c 	bl	800971a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009202:	f000 fd07 	bl	8009c14 <xTaskResumeAll>
 8009206:	e76c      	b.n	80090e2 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009208:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800920a:	f000 fa86 	bl	800971a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800920e:	f000 fd01 	bl	8009c14 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009212:	2300      	movs	r3, #0
		}
	}
}
 8009214:	4618      	mov	r0, r3
 8009216:	3738      	adds	r7, #56	; 0x38
 8009218:	46bd      	mov	sp, r7
 800921a:	bd80      	pop	{r7, pc}
 800921c:	e000ed04 	.word	0xe000ed04

08009220 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009220:	b580      	push	{r7, lr}
 8009222:	b08e      	sub	sp, #56	; 0x38
 8009224:	af00      	add	r7, sp, #0
 8009226:	60f8      	str	r0, [r7, #12]
 8009228:	60b9      	str	r1, [r7, #8]
 800922a:	607a      	str	r2, [r7, #4]
 800922c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009234:	2b00      	cmp	r3, #0
 8009236:	d109      	bne.n	800924c <xQueueGenericSendFromISR+0x2c>
 8009238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800923c:	f383 8811 	msr	BASEPRI, r3
 8009240:	f3bf 8f6f 	isb	sy
 8009244:	f3bf 8f4f 	dsb	sy
 8009248:	627b      	str	r3, [r7, #36]	; 0x24
 800924a:	e7fe      	b.n	800924a <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800924c:	68bb      	ldr	r3, [r7, #8]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d103      	bne.n	800925a <xQueueGenericSendFromISR+0x3a>
 8009252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009256:	2b00      	cmp	r3, #0
 8009258:	d101      	bne.n	800925e <xQueueGenericSendFromISR+0x3e>
 800925a:	2301      	movs	r3, #1
 800925c:	e000      	b.n	8009260 <xQueueGenericSendFromISR+0x40>
 800925e:	2300      	movs	r3, #0
 8009260:	2b00      	cmp	r3, #0
 8009262:	d109      	bne.n	8009278 <xQueueGenericSendFromISR+0x58>
 8009264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009268:	f383 8811 	msr	BASEPRI, r3
 800926c:	f3bf 8f6f 	isb	sy
 8009270:	f3bf 8f4f 	dsb	sy
 8009274:	623b      	str	r3, [r7, #32]
 8009276:	e7fe      	b.n	8009276 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009278:	683b      	ldr	r3, [r7, #0]
 800927a:	2b02      	cmp	r3, #2
 800927c:	d103      	bne.n	8009286 <xQueueGenericSendFromISR+0x66>
 800927e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009280:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009282:	2b01      	cmp	r3, #1
 8009284:	d101      	bne.n	800928a <xQueueGenericSendFromISR+0x6a>
 8009286:	2301      	movs	r3, #1
 8009288:	e000      	b.n	800928c <xQueueGenericSendFromISR+0x6c>
 800928a:	2300      	movs	r3, #0
 800928c:	2b00      	cmp	r3, #0
 800928e:	d109      	bne.n	80092a4 <xQueueGenericSendFromISR+0x84>
 8009290:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009294:	f383 8811 	msr	BASEPRI, r3
 8009298:	f3bf 8f6f 	isb	sy
 800929c:	f3bf 8f4f 	dsb	sy
 80092a0:	61fb      	str	r3, [r7, #28]
 80092a2:	e7fe      	b.n	80092a2 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80092a4:	f001 fb7e 	bl	800a9a4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80092a8:	f3ef 8211 	mrs	r2, BASEPRI
 80092ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092b0:	f383 8811 	msr	BASEPRI, r3
 80092b4:	f3bf 8f6f 	isb	sy
 80092b8:	f3bf 8f4f 	dsb	sy
 80092bc:	61ba      	str	r2, [r7, #24]
 80092be:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80092c0:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80092c2:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80092c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80092c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092cc:	429a      	cmp	r2, r3
 80092ce:	d302      	bcc.n	80092d6 <xQueueGenericSendFromISR+0xb6>
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	2b02      	cmp	r3, #2
 80092d4:	d12c      	bne.n	8009330 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80092d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80092dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80092e0:	683a      	ldr	r2, [r7, #0]
 80092e2:	68b9      	ldr	r1, [r7, #8]
 80092e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80092e6:	f000 f988 	bl	80095fa <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80092ea:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80092ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80092f2:	d112      	bne.n	800931a <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80092f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d016      	beq.n	800932a <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80092fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092fe:	3324      	adds	r3, #36	; 0x24
 8009300:	4618      	mov	r0, r3
 8009302:	f000 fe83 	bl	800a00c <xTaskRemoveFromEventList>
 8009306:	4603      	mov	r3, r0
 8009308:	2b00      	cmp	r3, #0
 800930a:	d00e      	beq.n	800932a <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d00b      	beq.n	800932a <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	2201      	movs	r2, #1
 8009316:	601a      	str	r2, [r3, #0]
 8009318:	e007      	b.n	800932a <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800931a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800931e:	3301      	adds	r3, #1
 8009320:	b2db      	uxtb	r3, r3
 8009322:	b25a      	sxtb	r2, r3
 8009324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009326:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800932a:	2301      	movs	r3, #1
 800932c:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800932e:	e001      	b.n	8009334 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009330:	2300      	movs	r3, #0
 8009332:	637b      	str	r3, [r7, #52]	; 0x34
 8009334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009336:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009338:	693b      	ldr	r3, [r7, #16]
 800933a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800933e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009340:	4618      	mov	r0, r3
 8009342:	3738      	adds	r7, #56	; 0x38
 8009344:	46bd      	mov	sp, r7
 8009346:	bd80      	pop	{r7, pc}

08009348 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009348:	b580      	push	{r7, lr}
 800934a:	b08c      	sub	sp, #48	; 0x30
 800934c:	af00      	add	r7, sp, #0
 800934e:	60f8      	str	r0, [r7, #12]
 8009350:	60b9      	str	r1, [r7, #8]
 8009352:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009354:	2300      	movs	r3, #0
 8009356:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800935c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800935e:	2b00      	cmp	r3, #0
 8009360:	d109      	bne.n	8009376 <xQueueReceive+0x2e>
	__asm volatile
 8009362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009366:	f383 8811 	msr	BASEPRI, r3
 800936a:	f3bf 8f6f 	isb	sy
 800936e:	f3bf 8f4f 	dsb	sy
 8009372:	623b      	str	r3, [r7, #32]
 8009374:	e7fe      	b.n	8009374 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009376:	68bb      	ldr	r3, [r7, #8]
 8009378:	2b00      	cmp	r3, #0
 800937a:	d103      	bne.n	8009384 <xQueueReceive+0x3c>
 800937c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800937e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009380:	2b00      	cmp	r3, #0
 8009382:	d101      	bne.n	8009388 <xQueueReceive+0x40>
 8009384:	2301      	movs	r3, #1
 8009386:	e000      	b.n	800938a <xQueueReceive+0x42>
 8009388:	2300      	movs	r3, #0
 800938a:	2b00      	cmp	r3, #0
 800938c:	d109      	bne.n	80093a2 <xQueueReceive+0x5a>
 800938e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009392:	f383 8811 	msr	BASEPRI, r3
 8009396:	f3bf 8f6f 	isb	sy
 800939a:	f3bf 8f4f 	dsb	sy
 800939e:	61fb      	str	r3, [r7, #28]
 80093a0:	e7fe      	b.n	80093a0 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80093a2:	f000 fff1 	bl	800a388 <xTaskGetSchedulerState>
 80093a6:	4603      	mov	r3, r0
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d102      	bne.n	80093b2 <xQueueReceive+0x6a>
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d101      	bne.n	80093b6 <xQueueReceive+0x6e>
 80093b2:	2301      	movs	r3, #1
 80093b4:	e000      	b.n	80093b8 <xQueueReceive+0x70>
 80093b6:	2300      	movs	r3, #0
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d109      	bne.n	80093d0 <xQueueReceive+0x88>
 80093bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093c0:	f383 8811 	msr	BASEPRI, r3
 80093c4:	f3bf 8f6f 	isb	sy
 80093c8:	f3bf 8f4f 	dsb	sy
 80093cc:	61bb      	str	r3, [r7, #24]
 80093ce:	e7fe      	b.n	80093ce <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80093d0:	f001 fa0c 	bl	800a7ec <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80093d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093d8:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80093da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d01f      	beq.n	8009420 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80093e0:	68b9      	ldr	r1, [r7, #8]
 80093e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80093e4:	f000 f973 	bl	80096ce <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80093e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093ea:	1e5a      	subs	r2, r3, #1
 80093ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093ee:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80093f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093f2:	691b      	ldr	r3, [r3, #16]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d00f      	beq.n	8009418 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80093f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093fa:	3310      	adds	r3, #16
 80093fc:	4618      	mov	r0, r3
 80093fe:	f000 fe05 	bl	800a00c <xTaskRemoveFromEventList>
 8009402:	4603      	mov	r3, r0
 8009404:	2b00      	cmp	r3, #0
 8009406:	d007      	beq.n	8009418 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009408:	4b3c      	ldr	r3, [pc, #240]	; (80094fc <xQueueReceive+0x1b4>)
 800940a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800940e:	601a      	str	r2, [r3, #0]
 8009410:	f3bf 8f4f 	dsb	sy
 8009414:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009418:	f001 fa16 	bl	800a848 <vPortExitCritical>
				return pdPASS;
 800941c:	2301      	movs	r3, #1
 800941e:	e069      	b.n	80094f4 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d103      	bne.n	800942e <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009426:	f001 fa0f 	bl	800a848 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800942a:	2300      	movs	r3, #0
 800942c:	e062      	b.n	80094f4 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800942e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009430:	2b00      	cmp	r3, #0
 8009432:	d106      	bne.n	8009442 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009434:	f107 0310 	add.w	r3, r7, #16
 8009438:	4618      	mov	r0, r3
 800943a:	f000 fe49 	bl	800a0d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800943e:	2301      	movs	r3, #1
 8009440:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009442:	f001 fa01 	bl	800a848 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009446:	f000 fbd7 	bl	8009bf8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800944a:	f001 f9cf 	bl	800a7ec <vPortEnterCritical>
 800944e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009450:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009454:	b25b      	sxtb	r3, r3
 8009456:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800945a:	d103      	bne.n	8009464 <xQueueReceive+0x11c>
 800945c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800945e:	2200      	movs	r2, #0
 8009460:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009466:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800946a:	b25b      	sxtb	r3, r3
 800946c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009470:	d103      	bne.n	800947a <xQueueReceive+0x132>
 8009472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009474:	2200      	movs	r2, #0
 8009476:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800947a:	f001 f9e5 	bl	800a848 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800947e:	1d3a      	adds	r2, r7, #4
 8009480:	f107 0310 	add.w	r3, r7, #16
 8009484:	4611      	mov	r1, r2
 8009486:	4618      	mov	r0, r3
 8009488:	f000 fe38 	bl	800a0fc <xTaskCheckForTimeOut>
 800948c:	4603      	mov	r3, r0
 800948e:	2b00      	cmp	r3, #0
 8009490:	d123      	bne.n	80094da <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009492:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009494:	f000 f993 	bl	80097be <prvIsQueueEmpty>
 8009498:	4603      	mov	r3, r0
 800949a:	2b00      	cmp	r3, #0
 800949c:	d017      	beq.n	80094ce <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800949e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094a0:	3324      	adds	r3, #36	; 0x24
 80094a2:	687a      	ldr	r2, [r7, #4]
 80094a4:	4611      	mov	r1, r2
 80094a6:	4618      	mov	r0, r3
 80094a8:	f000 fd8c 	bl	8009fc4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80094ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80094ae:	f000 f934 	bl	800971a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80094b2:	f000 fbaf 	bl	8009c14 <xTaskResumeAll>
 80094b6:	4603      	mov	r3, r0
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d189      	bne.n	80093d0 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80094bc:	4b0f      	ldr	r3, [pc, #60]	; (80094fc <xQueueReceive+0x1b4>)
 80094be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80094c2:	601a      	str	r2, [r3, #0]
 80094c4:	f3bf 8f4f 	dsb	sy
 80094c8:	f3bf 8f6f 	isb	sy
 80094cc:	e780      	b.n	80093d0 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80094ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80094d0:	f000 f923 	bl	800971a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80094d4:	f000 fb9e 	bl	8009c14 <xTaskResumeAll>
 80094d8:	e77a      	b.n	80093d0 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80094da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80094dc:	f000 f91d 	bl	800971a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80094e0:	f000 fb98 	bl	8009c14 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80094e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80094e6:	f000 f96a 	bl	80097be <prvIsQueueEmpty>
 80094ea:	4603      	mov	r3, r0
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	f43f af6f 	beq.w	80093d0 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80094f2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80094f4:	4618      	mov	r0, r3
 80094f6:	3730      	adds	r7, #48	; 0x30
 80094f8:	46bd      	mov	sp, r7
 80094fa:	bd80      	pop	{r7, pc}
 80094fc:	e000ed04 	.word	0xe000ed04

08009500 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009500:	b580      	push	{r7, lr}
 8009502:	b08e      	sub	sp, #56	; 0x38
 8009504:	af00      	add	r7, sp, #0
 8009506:	60f8      	str	r0, [r7, #12]
 8009508:	60b9      	str	r1, [r7, #8]
 800950a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009512:	2b00      	cmp	r3, #0
 8009514:	d109      	bne.n	800952a <xQueueReceiveFromISR+0x2a>
 8009516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800951a:	f383 8811 	msr	BASEPRI, r3
 800951e:	f3bf 8f6f 	isb	sy
 8009522:	f3bf 8f4f 	dsb	sy
 8009526:	623b      	str	r3, [r7, #32]
 8009528:	e7fe      	b.n	8009528 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800952a:	68bb      	ldr	r3, [r7, #8]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d103      	bne.n	8009538 <xQueueReceiveFromISR+0x38>
 8009530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009534:	2b00      	cmp	r3, #0
 8009536:	d101      	bne.n	800953c <xQueueReceiveFromISR+0x3c>
 8009538:	2301      	movs	r3, #1
 800953a:	e000      	b.n	800953e <xQueueReceiveFromISR+0x3e>
 800953c:	2300      	movs	r3, #0
 800953e:	2b00      	cmp	r3, #0
 8009540:	d109      	bne.n	8009556 <xQueueReceiveFromISR+0x56>
 8009542:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009546:	f383 8811 	msr	BASEPRI, r3
 800954a:	f3bf 8f6f 	isb	sy
 800954e:	f3bf 8f4f 	dsb	sy
 8009552:	61fb      	str	r3, [r7, #28]
 8009554:	e7fe      	b.n	8009554 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009556:	f001 fa25 	bl	800a9a4 <vPortValidateInterruptPriority>
	__asm volatile
 800955a:	f3ef 8211 	mrs	r2, BASEPRI
 800955e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009562:	f383 8811 	msr	BASEPRI, r3
 8009566:	f3bf 8f6f 	isb	sy
 800956a:	f3bf 8f4f 	dsb	sy
 800956e:	61ba      	str	r2, [r7, #24]
 8009570:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8009572:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009574:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800957a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800957c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800957e:	2b00      	cmp	r3, #0
 8009580:	d02f      	beq.n	80095e2 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8009582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009584:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009588:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800958c:	68b9      	ldr	r1, [r7, #8]
 800958e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009590:	f000 f89d 	bl	80096ce <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009596:	1e5a      	subs	r2, r3, #1
 8009598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800959a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800959c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80095a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80095a4:	d112      	bne.n	80095cc <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80095a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095a8:	691b      	ldr	r3, [r3, #16]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d016      	beq.n	80095dc <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80095ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095b0:	3310      	adds	r3, #16
 80095b2:	4618      	mov	r0, r3
 80095b4:	f000 fd2a 	bl	800a00c <xTaskRemoveFromEventList>
 80095b8:	4603      	mov	r3, r0
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d00e      	beq.n	80095dc <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d00b      	beq.n	80095dc <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	2201      	movs	r2, #1
 80095c8:	601a      	str	r2, [r3, #0]
 80095ca:	e007      	b.n	80095dc <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80095cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80095d0:	3301      	adds	r3, #1
 80095d2:	b2db      	uxtb	r3, r3
 80095d4:	b25a      	sxtb	r2, r3
 80095d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80095dc:	2301      	movs	r3, #1
 80095de:	637b      	str	r3, [r7, #52]	; 0x34
 80095e0:	e001      	b.n	80095e6 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 80095e2:	2300      	movs	r3, #0
 80095e4:	637b      	str	r3, [r7, #52]	; 0x34
 80095e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095e8:	613b      	str	r3, [r7, #16]
	__asm volatile
 80095ea:	693b      	ldr	r3, [r7, #16]
 80095ec:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80095f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80095f2:	4618      	mov	r0, r3
 80095f4:	3738      	adds	r7, #56	; 0x38
 80095f6:	46bd      	mov	sp, r7
 80095f8:	bd80      	pop	{r7, pc}

080095fa <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80095fa:	b580      	push	{r7, lr}
 80095fc:	b086      	sub	sp, #24
 80095fe:	af00      	add	r7, sp, #0
 8009600:	60f8      	str	r0, [r7, #12]
 8009602:	60b9      	str	r1, [r7, #8]
 8009604:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009606:	2300      	movs	r3, #0
 8009608:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800960e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009614:	2b00      	cmp	r3, #0
 8009616:	d10d      	bne.n	8009634 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d14d      	bne.n	80096bc <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	685b      	ldr	r3, [r3, #4]
 8009624:	4618      	mov	r0, r3
 8009626:	f000 fecd 	bl	800a3c4 <xTaskPriorityDisinherit>
 800962a:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	2200      	movs	r2, #0
 8009630:	605a      	str	r2, [r3, #4]
 8009632:	e043      	b.n	80096bc <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d119      	bne.n	800966e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	6898      	ldr	r0, [r3, #8]
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009642:	461a      	mov	r2, r3
 8009644:	68b9      	ldr	r1, [r7, #8]
 8009646:	f003 fb41 	bl	800cccc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	689a      	ldr	r2, [r3, #8]
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009652:	441a      	add	r2, r3
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	689a      	ldr	r2, [r3, #8]
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	685b      	ldr	r3, [r3, #4]
 8009660:	429a      	cmp	r2, r3
 8009662:	d32b      	bcc.n	80096bc <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	681a      	ldr	r2, [r3, #0]
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	609a      	str	r2, [r3, #8]
 800966c:	e026      	b.n	80096bc <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	68d8      	ldr	r0, [r3, #12]
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009676:	461a      	mov	r2, r3
 8009678:	68b9      	ldr	r1, [r7, #8]
 800967a:	f003 fb27 	bl	800cccc <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	68da      	ldr	r2, [r3, #12]
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009686:	425b      	negs	r3, r3
 8009688:	441a      	add	r2, r3
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	68da      	ldr	r2, [r3, #12]
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	429a      	cmp	r2, r3
 8009698:	d207      	bcs.n	80096aa <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	685a      	ldr	r2, [r3, #4]
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096a2:	425b      	negs	r3, r3
 80096a4:	441a      	add	r2, r3
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	2b02      	cmp	r3, #2
 80096ae:	d105      	bne.n	80096bc <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80096b0:	693b      	ldr	r3, [r7, #16]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d002      	beq.n	80096bc <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80096b6:	693b      	ldr	r3, [r7, #16]
 80096b8:	3b01      	subs	r3, #1
 80096ba:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80096bc:	693b      	ldr	r3, [r7, #16]
 80096be:	1c5a      	adds	r2, r3, #1
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80096c4:	697b      	ldr	r3, [r7, #20]
}
 80096c6:	4618      	mov	r0, r3
 80096c8:	3718      	adds	r7, #24
 80096ca:	46bd      	mov	sp, r7
 80096cc:	bd80      	pop	{r7, pc}

080096ce <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80096ce:	b580      	push	{r7, lr}
 80096d0:	b082      	sub	sp, #8
 80096d2:	af00      	add	r7, sp, #0
 80096d4:	6078      	str	r0, [r7, #4]
 80096d6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d018      	beq.n	8009712 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	68da      	ldr	r2, [r3, #12]
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096e8:	441a      	add	r2, r3
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	68da      	ldr	r2, [r3, #12]
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	685b      	ldr	r3, [r3, #4]
 80096f6:	429a      	cmp	r2, r3
 80096f8:	d303      	bcc.n	8009702 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681a      	ldr	r2, [r3, #0]
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	68d9      	ldr	r1, [r3, #12]
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800970a:	461a      	mov	r2, r3
 800970c:	6838      	ldr	r0, [r7, #0]
 800970e:	f003 fadd 	bl	800cccc <memcpy>
	}
}
 8009712:	bf00      	nop
 8009714:	3708      	adds	r7, #8
 8009716:	46bd      	mov	sp, r7
 8009718:	bd80      	pop	{r7, pc}

0800971a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800971a:	b580      	push	{r7, lr}
 800971c:	b084      	sub	sp, #16
 800971e:	af00      	add	r7, sp, #0
 8009720:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009722:	f001 f863 	bl	800a7ec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800972c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800972e:	e011      	b.n	8009754 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009734:	2b00      	cmp	r3, #0
 8009736:	d012      	beq.n	800975e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	3324      	adds	r3, #36	; 0x24
 800973c:	4618      	mov	r0, r3
 800973e:	f000 fc65 	bl	800a00c <xTaskRemoveFromEventList>
 8009742:	4603      	mov	r3, r0
 8009744:	2b00      	cmp	r3, #0
 8009746:	d001      	beq.n	800974c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009748:	f000 fd38 	bl	800a1bc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800974c:	7bfb      	ldrb	r3, [r7, #15]
 800974e:	3b01      	subs	r3, #1
 8009750:	b2db      	uxtb	r3, r3
 8009752:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009754:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009758:	2b00      	cmp	r3, #0
 800975a:	dce9      	bgt.n	8009730 <prvUnlockQueue+0x16>
 800975c:	e000      	b.n	8009760 <prvUnlockQueue+0x46>
					break;
 800975e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	22ff      	movs	r2, #255	; 0xff
 8009764:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009768:	f001 f86e 	bl	800a848 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800976c:	f001 f83e 	bl	800a7ec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009776:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009778:	e011      	b.n	800979e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	691b      	ldr	r3, [r3, #16]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d012      	beq.n	80097a8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	3310      	adds	r3, #16
 8009786:	4618      	mov	r0, r3
 8009788:	f000 fc40 	bl	800a00c <xTaskRemoveFromEventList>
 800978c:	4603      	mov	r3, r0
 800978e:	2b00      	cmp	r3, #0
 8009790:	d001      	beq.n	8009796 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009792:	f000 fd13 	bl	800a1bc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009796:	7bbb      	ldrb	r3, [r7, #14]
 8009798:	3b01      	subs	r3, #1
 800979a:	b2db      	uxtb	r3, r3
 800979c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800979e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	dce9      	bgt.n	800977a <prvUnlockQueue+0x60>
 80097a6:	e000      	b.n	80097aa <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80097a8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	22ff      	movs	r2, #255	; 0xff
 80097ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80097b2:	f001 f849 	bl	800a848 <vPortExitCritical>
}
 80097b6:	bf00      	nop
 80097b8:	3710      	adds	r7, #16
 80097ba:	46bd      	mov	sp, r7
 80097bc:	bd80      	pop	{r7, pc}

080097be <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80097be:	b580      	push	{r7, lr}
 80097c0:	b084      	sub	sp, #16
 80097c2:	af00      	add	r7, sp, #0
 80097c4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80097c6:	f001 f811 	bl	800a7ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d102      	bne.n	80097d8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80097d2:	2301      	movs	r3, #1
 80097d4:	60fb      	str	r3, [r7, #12]
 80097d6:	e001      	b.n	80097dc <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80097d8:	2300      	movs	r3, #0
 80097da:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80097dc:	f001 f834 	bl	800a848 <vPortExitCritical>

	return xReturn;
 80097e0:	68fb      	ldr	r3, [r7, #12]
}
 80097e2:	4618      	mov	r0, r3
 80097e4:	3710      	adds	r7, #16
 80097e6:	46bd      	mov	sp, r7
 80097e8:	bd80      	pop	{r7, pc}

080097ea <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80097ea:	b580      	push	{r7, lr}
 80097ec:	b084      	sub	sp, #16
 80097ee:	af00      	add	r7, sp, #0
 80097f0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80097f2:	f000 fffb 	bl	800a7ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097fe:	429a      	cmp	r2, r3
 8009800:	d102      	bne.n	8009808 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009802:	2301      	movs	r3, #1
 8009804:	60fb      	str	r3, [r7, #12]
 8009806:	e001      	b.n	800980c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009808:	2300      	movs	r3, #0
 800980a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800980c:	f001 f81c 	bl	800a848 <vPortExitCritical>

	return xReturn;
 8009810:	68fb      	ldr	r3, [r7, #12]
}
 8009812:	4618      	mov	r0, r3
 8009814:	3710      	adds	r7, #16
 8009816:	46bd      	mov	sp, r7
 8009818:	bd80      	pop	{r7, pc}

0800981a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800981a:	b580      	push	{r7, lr}
 800981c:	b08e      	sub	sp, #56	; 0x38
 800981e:	af04      	add	r7, sp, #16
 8009820:	60f8      	str	r0, [r7, #12]
 8009822:	60b9      	str	r1, [r7, #8]
 8009824:	607a      	str	r2, [r7, #4]
 8009826:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009828:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800982a:	2b00      	cmp	r3, #0
 800982c:	d109      	bne.n	8009842 <xTaskCreateStatic+0x28>
	__asm volatile
 800982e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009832:	f383 8811 	msr	BASEPRI, r3
 8009836:	f3bf 8f6f 	isb	sy
 800983a:	f3bf 8f4f 	dsb	sy
 800983e:	623b      	str	r3, [r7, #32]
 8009840:	e7fe      	b.n	8009840 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8009842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009844:	2b00      	cmp	r3, #0
 8009846:	d109      	bne.n	800985c <xTaskCreateStatic+0x42>
 8009848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800984c:	f383 8811 	msr	BASEPRI, r3
 8009850:	f3bf 8f6f 	isb	sy
 8009854:	f3bf 8f4f 	dsb	sy
 8009858:	61fb      	str	r3, [r7, #28]
 800985a:	e7fe      	b.n	800985a <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800985c:	2358      	movs	r3, #88	; 0x58
 800985e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009860:	693b      	ldr	r3, [r7, #16]
 8009862:	2b58      	cmp	r3, #88	; 0x58
 8009864:	d009      	beq.n	800987a <xTaskCreateStatic+0x60>
 8009866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800986a:	f383 8811 	msr	BASEPRI, r3
 800986e:	f3bf 8f6f 	isb	sy
 8009872:	f3bf 8f4f 	dsb	sy
 8009876:	61bb      	str	r3, [r7, #24]
 8009878:	e7fe      	b.n	8009878 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800987a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800987c:	2b00      	cmp	r3, #0
 800987e:	d01e      	beq.n	80098be <xTaskCreateStatic+0xa4>
 8009880:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009882:	2b00      	cmp	r3, #0
 8009884:	d01b      	beq.n	80098be <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009888:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800988a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800988c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800988e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009892:	2202      	movs	r2, #2
 8009894:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009898:	2300      	movs	r3, #0
 800989a:	9303      	str	r3, [sp, #12]
 800989c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800989e:	9302      	str	r3, [sp, #8]
 80098a0:	f107 0314 	add.w	r3, r7, #20
 80098a4:	9301      	str	r3, [sp, #4]
 80098a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098a8:	9300      	str	r3, [sp, #0]
 80098aa:	683b      	ldr	r3, [r7, #0]
 80098ac:	687a      	ldr	r2, [r7, #4]
 80098ae:	68b9      	ldr	r1, [r7, #8]
 80098b0:	68f8      	ldr	r0, [r7, #12]
 80098b2:	f000 f850 	bl	8009956 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80098b6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80098b8:	f000 f8d6 	bl	8009a68 <prvAddNewTaskToReadyList>
 80098bc:	e001      	b.n	80098c2 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 80098be:	2300      	movs	r3, #0
 80098c0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80098c2:	697b      	ldr	r3, [r7, #20]
	}
 80098c4:	4618      	mov	r0, r3
 80098c6:	3728      	adds	r7, #40	; 0x28
 80098c8:	46bd      	mov	sp, r7
 80098ca:	bd80      	pop	{r7, pc}

080098cc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80098cc:	b580      	push	{r7, lr}
 80098ce:	b08c      	sub	sp, #48	; 0x30
 80098d0:	af04      	add	r7, sp, #16
 80098d2:	60f8      	str	r0, [r7, #12]
 80098d4:	60b9      	str	r1, [r7, #8]
 80098d6:	603b      	str	r3, [r7, #0]
 80098d8:	4613      	mov	r3, r2
 80098da:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80098dc:	88fb      	ldrh	r3, [r7, #6]
 80098de:	009b      	lsls	r3, r3, #2
 80098e0:	4618      	mov	r0, r3
 80098e2:	f001 f89d 	bl	800aa20 <pvPortMalloc>
 80098e6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80098e8:	697b      	ldr	r3, [r7, #20]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d00e      	beq.n	800990c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80098ee:	2058      	movs	r0, #88	; 0x58
 80098f0:	f001 f896 	bl	800aa20 <pvPortMalloc>
 80098f4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80098f6:	69fb      	ldr	r3, [r7, #28]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d003      	beq.n	8009904 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80098fc:	69fb      	ldr	r3, [r7, #28]
 80098fe:	697a      	ldr	r2, [r7, #20]
 8009900:	631a      	str	r2, [r3, #48]	; 0x30
 8009902:	e005      	b.n	8009910 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009904:	6978      	ldr	r0, [r7, #20]
 8009906:	f001 f951 	bl	800abac <vPortFree>
 800990a:	e001      	b.n	8009910 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800990c:	2300      	movs	r3, #0
 800990e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009910:	69fb      	ldr	r3, [r7, #28]
 8009912:	2b00      	cmp	r3, #0
 8009914:	d017      	beq.n	8009946 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009916:	69fb      	ldr	r3, [r7, #28]
 8009918:	2200      	movs	r2, #0
 800991a:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800991e:	88fa      	ldrh	r2, [r7, #6]
 8009920:	2300      	movs	r3, #0
 8009922:	9303      	str	r3, [sp, #12]
 8009924:	69fb      	ldr	r3, [r7, #28]
 8009926:	9302      	str	r3, [sp, #8]
 8009928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800992a:	9301      	str	r3, [sp, #4]
 800992c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800992e:	9300      	str	r3, [sp, #0]
 8009930:	683b      	ldr	r3, [r7, #0]
 8009932:	68b9      	ldr	r1, [r7, #8]
 8009934:	68f8      	ldr	r0, [r7, #12]
 8009936:	f000 f80e 	bl	8009956 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800993a:	69f8      	ldr	r0, [r7, #28]
 800993c:	f000 f894 	bl	8009a68 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009940:	2301      	movs	r3, #1
 8009942:	61bb      	str	r3, [r7, #24]
 8009944:	e002      	b.n	800994c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009946:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800994a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800994c:	69bb      	ldr	r3, [r7, #24]
	}
 800994e:	4618      	mov	r0, r3
 8009950:	3720      	adds	r7, #32
 8009952:	46bd      	mov	sp, r7
 8009954:	bd80      	pop	{r7, pc}

08009956 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009956:	b580      	push	{r7, lr}
 8009958:	b088      	sub	sp, #32
 800995a:	af00      	add	r7, sp, #0
 800995c:	60f8      	str	r0, [r7, #12]
 800995e:	60b9      	str	r1, [r7, #8]
 8009960:	607a      	str	r2, [r7, #4]
 8009962:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009966:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	009b      	lsls	r3, r3, #2
 800996c:	461a      	mov	r2, r3
 800996e:	21a5      	movs	r1, #165	; 0xa5
 8009970:	f003 f9b7 	bl	800cce2 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8009974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009976:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800997e:	3b01      	subs	r3, #1
 8009980:	009b      	lsls	r3, r3, #2
 8009982:	4413      	add	r3, r2
 8009984:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8009986:	69bb      	ldr	r3, [r7, #24]
 8009988:	f023 0307 	bic.w	r3, r3, #7
 800998c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800998e:	69bb      	ldr	r3, [r7, #24]
 8009990:	f003 0307 	and.w	r3, r3, #7
 8009994:	2b00      	cmp	r3, #0
 8009996:	d009      	beq.n	80099ac <prvInitialiseNewTask+0x56>
 8009998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800999c:	f383 8811 	msr	BASEPRI, r3
 80099a0:	f3bf 8f6f 	isb	sy
 80099a4:	f3bf 8f4f 	dsb	sy
 80099a8:	617b      	str	r3, [r7, #20]
 80099aa:	e7fe      	b.n	80099aa <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80099ac:	2300      	movs	r3, #0
 80099ae:	61fb      	str	r3, [r7, #28]
 80099b0:	e012      	b.n	80099d8 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80099b2:	68ba      	ldr	r2, [r7, #8]
 80099b4:	69fb      	ldr	r3, [r7, #28]
 80099b6:	4413      	add	r3, r2
 80099b8:	7819      	ldrb	r1, [r3, #0]
 80099ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80099bc:	69fb      	ldr	r3, [r7, #28]
 80099be:	4413      	add	r3, r2
 80099c0:	3334      	adds	r3, #52	; 0x34
 80099c2:	460a      	mov	r2, r1
 80099c4:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80099c6:	68ba      	ldr	r2, [r7, #8]
 80099c8:	69fb      	ldr	r3, [r7, #28]
 80099ca:	4413      	add	r3, r2
 80099cc:	781b      	ldrb	r3, [r3, #0]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d006      	beq.n	80099e0 <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80099d2:	69fb      	ldr	r3, [r7, #28]
 80099d4:	3301      	adds	r3, #1
 80099d6:	61fb      	str	r3, [r7, #28]
 80099d8:	69fb      	ldr	r3, [r7, #28]
 80099da:	2b0f      	cmp	r3, #15
 80099dc:	d9e9      	bls.n	80099b2 <prvInitialiseNewTask+0x5c>
 80099de:	e000      	b.n	80099e2 <prvInitialiseNewTask+0x8c>
		{
			break;
 80099e0:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80099e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099e4:	2200      	movs	r2, #0
 80099e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80099ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099ec:	2b06      	cmp	r3, #6
 80099ee:	d901      	bls.n	80099f4 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80099f0:	2306      	movs	r3, #6
 80099f2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80099f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80099f8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80099fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80099fe:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8009a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a02:	2200      	movs	r2, #0
 8009a04:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a08:	3304      	adds	r3, #4
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	f7ff f944 	bl	8008c98 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a12:	3318      	adds	r3, #24
 8009a14:	4618      	mov	r0, r3
 8009a16:	f7ff f93f 	bl	8008c98 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a1e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a22:	f1c3 0207 	rsb	r2, r3, #7
 8009a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a28:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a2e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 8009a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a32:	2200      	movs	r2, #0
 8009a34:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a38:	2200      	movs	r2, #0
 8009a3a:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a3e:	2200      	movs	r2, #0
 8009a40:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009a44:	683a      	ldr	r2, [r7, #0]
 8009a46:	68f9      	ldr	r1, [r7, #12]
 8009a48:	69b8      	ldr	r0, [r7, #24]
 8009a4a:	f000 fda5 	bl	800a598 <pxPortInitialiseStack>
 8009a4e:	4602      	mov	r2, r0
 8009a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a52:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8009a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d002      	beq.n	8009a60 <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a5e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009a60:	bf00      	nop
 8009a62:	3720      	adds	r7, #32
 8009a64:	46bd      	mov	sp, r7
 8009a66:	bd80      	pop	{r7, pc}

08009a68 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	b082      	sub	sp, #8
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009a70:	f000 febc 	bl	800a7ec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009a74:	4b2a      	ldr	r3, [pc, #168]	; (8009b20 <prvAddNewTaskToReadyList+0xb8>)
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	3301      	adds	r3, #1
 8009a7a:	4a29      	ldr	r2, [pc, #164]	; (8009b20 <prvAddNewTaskToReadyList+0xb8>)
 8009a7c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009a7e:	4b29      	ldr	r3, [pc, #164]	; (8009b24 <prvAddNewTaskToReadyList+0xbc>)
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d109      	bne.n	8009a9a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009a86:	4a27      	ldr	r2, [pc, #156]	; (8009b24 <prvAddNewTaskToReadyList+0xbc>)
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009a8c:	4b24      	ldr	r3, [pc, #144]	; (8009b20 <prvAddNewTaskToReadyList+0xb8>)
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	2b01      	cmp	r3, #1
 8009a92:	d110      	bne.n	8009ab6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009a94:	f000 fbb8 	bl	800a208 <prvInitialiseTaskLists>
 8009a98:	e00d      	b.n	8009ab6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009a9a:	4b23      	ldr	r3, [pc, #140]	; (8009b28 <prvAddNewTaskToReadyList+0xc0>)
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d109      	bne.n	8009ab6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009aa2:	4b20      	ldr	r3, [pc, #128]	; (8009b24 <prvAddNewTaskToReadyList+0xbc>)
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009aac:	429a      	cmp	r2, r3
 8009aae:	d802      	bhi.n	8009ab6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009ab0:	4a1c      	ldr	r2, [pc, #112]	; (8009b24 <prvAddNewTaskToReadyList+0xbc>)
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009ab6:	4b1d      	ldr	r3, [pc, #116]	; (8009b2c <prvAddNewTaskToReadyList+0xc4>)
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	3301      	adds	r3, #1
 8009abc:	4a1b      	ldr	r2, [pc, #108]	; (8009b2c <prvAddNewTaskToReadyList+0xc4>)
 8009abe:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ac4:	2201      	movs	r2, #1
 8009ac6:	409a      	lsls	r2, r3
 8009ac8:	4b19      	ldr	r3, [pc, #100]	; (8009b30 <prvAddNewTaskToReadyList+0xc8>)
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	4313      	orrs	r3, r2
 8009ace:	4a18      	ldr	r2, [pc, #96]	; (8009b30 <prvAddNewTaskToReadyList+0xc8>)
 8009ad0:	6013      	str	r3, [r2, #0]
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ad6:	4613      	mov	r3, r2
 8009ad8:	009b      	lsls	r3, r3, #2
 8009ada:	4413      	add	r3, r2
 8009adc:	009b      	lsls	r3, r3, #2
 8009ade:	4a15      	ldr	r2, [pc, #84]	; (8009b34 <prvAddNewTaskToReadyList+0xcc>)
 8009ae0:	441a      	add	r2, r3
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	3304      	adds	r3, #4
 8009ae6:	4619      	mov	r1, r3
 8009ae8:	4610      	mov	r0, r2
 8009aea:	f7ff f8e2 	bl	8008cb2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009aee:	f000 feab 	bl	800a848 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009af2:	4b0d      	ldr	r3, [pc, #52]	; (8009b28 <prvAddNewTaskToReadyList+0xc0>)
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d00e      	beq.n	8009b18 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009afa:	4b0a      	ldr	r3, [pc, #40]	; (8009b24 <prvAddNewTaskToReadyList+0xbc>)
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b04:	429a      	cmp	r2, r3
 8009b06:	d207      	bcs.n	8009b18 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009b08:	4b0b      	ldr	r3, [pc, #44]	; (8009b38 <prvAddNewTaskToReadyList+0xd0>)
 8009b0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b0e:	601a      	str	r2, [r3, #0]
 8009b10:	f3bf 8f4f 	dsb	sy
 8009b14:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009b18:	bf00      	nop
 8009b1a:	3708      	adds	r7, #8
 8009b1c:	46bd      	mov	sp, r7
 8009b1e:	bd80      	pop	{r7, pc}
 8009b20:	200001c0 	.word	0x200001c0
 8009b24:	200000c0 	.word	0x200000c0
 8009b28:	200001cc 	.word	0x200001cc
 8009b2c:	200001dc 	.word	0x200001dc
 8009b30:	200001c8 	.word	0x200001c8
 8009b34:	200000c4 	.word	0x200000c4
 8009b38:	e000ed04 	.word	0xe000ed04

08009b3c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	b08a      	sub	sp, #40	; 0x28
 8009b40:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009b42:	2300      	movs	r3, #0
 8009b44:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009b46:	2300      	movs	r3, #0
 8009b48:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009b4a:	463a      	mov	r2, r7
 8009b4c:	1d39      	adds	r1, r7, #4
 8009b4e:	f107 0308 	add.w	r3, r7, #8
 8009b52:	4618      	mov	r0, r3
 8009b54:	f001 f958 	bl	800ae08 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009b58:	6839      	ldr	r1, [r7, #0]
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	68ba      	ldr	r2, [r7, #8]
 8009b5e:	9202      	str	r2, [sp, #8]
 8009b60:	9301      	str	r3, [sp, #4]
 8009b62:	2300      	movs	r3, #0
 8009b64:	9300      	str	r3, [sp, #0]
 8009b66:	2300      	movs	r3, #0
 8009b68:	460a      	mov	r2, r1
 8009b6a:	491d      	ldr	r1, [pc, #116]	; (8009be0 <vTaskStartScheduler+0xa4>)
 8009b6c:	481d      	ldr	r0, [pc, #116]	; (8009be4 <vTaskStartScheduler+0xa8>)
 8009b6e:	f7ff fe54 	bl	800981a <xTaskCreateStatic>
 8009b72:	4602      	mov	r2, r0
 8009b74:	4b1c      	ldr	r3, [pc, #112]	; (8009be8 <vTaskStartScheduler+0xac>)
 8009b76:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009b78:	4b1b      	ldr	r3, [pc, #108]	; (8009be8 <vTaskStartScheduler+0xac>)
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d002      	beq.n	8009b86 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009b80:	2301      	movs	r3, #1
 8009b82:	617b      	str	r3, [r7, #20]
 8009b84:	e001      	b.n	8009b8a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009b86:	2300      	movs	r3, #0
 8009b88:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009b8a:	697b      	ldr	r3, [r7, #20]
 8009b8c:	2b01      	cmp	r3, #1
 8009b8e:	d115      	bne.n	8009bbc <vTaskStartScheduler+0x80>
 8009b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b94:	f383 8811 	msr	BASEPRI, r3
 8009b98:	f3bf 8f6f 	isb	sy
 8009b9c:	f3bf 8f4f 	dsb	sy
 8009ba0:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009ba2:	4b12      	ldr	r3, [pc, #72]	; (8009bec <vTaskStartScheduler+0xb0>)
 8009ba4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009ba8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009baa:	4b11      	ldr	r3, [pc, #68]	; (8009bf0 <vTaskStartScheduler+0xb4>)
 8009bac:	2201      	movs	r2, #1
 8009bae:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8009bb0:	4b10      	ldr	r3, [pc, #64]	; (8009bf4 <vTaskStartScheduler+0xb8>)
 8009bb2:	2200      	movs	r2, #0
 8009bb4:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009bb6:	f000 fd7b 	bl	800a6b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009bba:	e00d      	b.n	8009bd8 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009bbc:	697b      	ldr	r3, [r7, #20]
 8009bbe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009bc2:	d109      	bne.n	8009bd8 <vTaskStartScheduler+0x9c>
 8009bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bc8:	f383 8811 	msr	BASEPRI, r3
 8009bcc:	f3bf 8f6f 	isb	sy
 8009bd0:	f3bf 8f4f 	dsb	sy
 8009bd4:	60fb      	str	r3, [r7, #12]
 8009bd6:	e7fe      	b.n	8009bd6 <vTaskStartScheduler+0x9a>
}
 8009bd8:	bf00      	nop
 8009bda:	3718      	adds	r7, #24
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	bd80      	pop	{r7, pc}
 8009be0:	0800cebc 	.word	0x0800cebc
 8009be4:	0800a1d5 	.word	0x0800a1d5
 8009be8:	200001e4 	.word	0x200001e4
 8009bec:	200001e0 	.word	0x200001e0
 8009bf0:	200001cc 	.word	0x200001cc
 8009bf4:	200001c4 	.word	0x200001c4

08009bf8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009bf8:	b480      	push	{r7}
 8009bfa:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8009bfc:	4b04      	ldr	r3, [pc, #16]	; (8009c10 <vTaskSuspendAll+0x18>)
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	3301      	adds	r3, #1
 8009c02:	4a03      	ldr	r2, [pc, #12]	; (8009c10 <vTaskSuspendAll+0x18>)
 8009c04:	6013      	str	r3, [r2, #0]
}
 8009c06:	bf00      	nop
 8009c08:	46bd      	mov	sp, r7
 8009c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0e:	4770      	bx	lr
 8009c10:	200001e8 	.word	0x200001e8

08009c14 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009c14:	b580      	push	{r7, lr}
 8009c16:	b084      	sub	sp, #16
 8009c18:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009c1e:	2300      	movs	r3, #0
 8009c20:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009c22:	4b41      	ldr	r3, [pc, #260]	; (8009d28 <xTaskResumeAll+0x114>)
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d109      	bne.n	8009c3e <xTaskResumeAll+0x2a>
 8009c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c2e:	f383 8811 	msr	BASEPRI, r3
 8009c32:	f3bf 8f6f 	isb	sy
 8009c36:	f3bf 8f4f 	dsb	sy
 8009c3a:	603b      	str	r3, [r7, #0]
 8009c3c:	e7fe      	b.n	8009c3c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009c3e:	f000 fdd5 	bl	800a7ec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009c42:	4b39      	ldr	r3, [pc, #228]	; (8009d28 <xTaskResumeAll+0x114>)
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	3b01      	subs	r3, #1
 8009c48:	4a37      	ldr	r2, [pc, #220]	; (8009d28 <xTaskResumeAll+0x114>)
 8009c4a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009c4c:	4b36      	ldr	r3, [pc, #216]	; (8009d28 <xTaskResumeAll+0x114>)
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d161      	bne.n	8009d18 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009c54:	4b35      	ldr	r3, [pc, #212]	; (8009d2c <xTaskResumeAll+0x118>)
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d05d      	beq.n	8009d18 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009c5c:	e02e      	b.n	8009cbc <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8009c5e:	4b34      	ldr	r3, [pc, #208]	; (8009d30 <xTaskResumeAll+0x11c>)
 8009c60:	68db      	ldr	r3, [r3, #12]
 8009c62:	68db      	ldr	r3, [r3, #12]
 8009c64:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	3318      	adds	r3, #24
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	f7ff f87e 	bl	8008d6c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	3304      	adds	r3, #4
 8009c74:	4618      	mov	r0, r3
 8009c76:	f7ff f879 	bl	8008d6c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c7e:	2201      	movs	r2, #1
 8009c80:	409a      	lsls	r2, r3
 8009c82:	4b2c      	ldr	r3, [pc, #176]	; (8009d34 <xTaskResumeAll+0x120>)
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	4313      	orrs	r3, r2
 8009c88:	4a2a      	ldr	r2, [pc, #168]	; (8009d34 <xTaskResumeAll+0x120>)
 8009c8a:	6013      	str	r3, [r2, #0]
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c90:	4613      	mov	r3, r2
 8009c92:	009b      	lsls	r3, r3, #2
 8009c94:	4413      	add	r3, r2
 8009c96:	009b      	lsls	r3, r3, #2
 8009c98:	4a27      	ldr	r2, [pc, #156]	; (8009d38 <xTaskResumeAll+0x124>)
 8009c9a:	441a      	add	r2, r3
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	3304      	adds	r3, #4
 8009ca0:	4619      	mov	r1, r3
 8009ca2:	4610      	mov	r0, r2
 8009ca4:	f7ff f805 	bl	8008cb2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cac:	4b23      	ldr	r3, [pc, #140]	; (8009d3c <xTaskResumeAll+0x128>)
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cb2:	429a      	cmp	r2, r3
 8009cb4:	d302      	bcc.n	8009cbc <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8009cb6:	4b22      	ldr	r3, [pc, #136]	; (8009d40 <xTaskResumeAll+0x12c>)
 8009cb8:	2201      	movs	r2, #1
 8009cba:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009cbc:	4b1c      	ldr	r3, [pc, #112]	; (8009d30 <xTaskResumeAll+0x11c>)
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d1cc      	bne.n	8009c5e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d001      	beq.n	8009cce <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009cca:	f000 fb37 	bl	800a33c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8009cce:	4b1d      	ldr	r3, [pc, #116]	; (8009d44 <xTaskResumeAll+0x130>)
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d010      	beq.n	8009cfc <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009cda:	f000 f837 	bl	8009d4c <xTaskIncrementTick>
 8009cde:	4603      	mov	r3, r0
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d002      	beq.n	8009cea <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8009ce4:	4b16      	ldr	r3, [pc, #88]	; (8009d40 <xTaskResumeAll+0x12c>)
 8009ce6:	2201      	movs	r2, #1
 8009ce8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	3b01      	subs	r3, #1
 8009cee:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d1f1      	bne.n	8009cda <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8009cf6:	4b13      	ldr	r3, [pc, #76]	; (8009d44 <xTaskResumeAll+0x130>)
 8009cf8:	2200      	movs	r2, #0
 8009cfa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009cfc:	4b10      	ldr	r3, [pc, #64]	; (8009d40 <xTaskResumeAll+0x12c>)
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d009      	beq.n	8009d18 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009d04:	2301      	movs	r3, #1
 8009d06:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009d08:	4b0f      	ldr	r3, [pc, #60]	; (8009d48 <xTaskResumeAll+0x134>)
 8009d0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d0e:	601a      	str	r2, [r3, #0]
 8009d10:	f3bf 8f4f 	dsb	sy
 8009d14:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009d18:	f000 fd96 	bl	800a848 <vPortExitCritical>

	return xAlreadyYielded;
 8009d1c:	68bb      	ldr	r3, [r7, #8]
}
 8009d1e:	4618      	mov	r0, r3
 8009d20:	3710      	adds	r7, #16
 8009d22:	46bd      	mov	sp, r7
 8009d24:	bd80      	pop	{r7, pc}
 8009d26:	bf00      	nop
 8009d28:	200001e8 	.word	0x200001e8
 8009d2c:	200001c0 	.word	0x200001c0
 8009d30:	20000180 	.word	0x20000180
 8009d34:	200001c8 	.word	0x200001c8
 8009d38:	200000c4 	.word	0x200000c4
 8009d3c:	200000c0 	.word	0x200000c0
 8009d40:	200001d4 	.word	0x200001d4
 8009d44:	200001d0 	.word	0x200001d0
 8009d48:	e000ed04 	.word	0xe000ed04

08009d4c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b086      	sub	sp, #24
 8009d50:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009d52:	2300      	movs	r3, #0
 8009d54:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009d56:	4b50      	ldr	r3, [pc, #320]	; (8009e98 <xTaskIncrementTick+0x14c>)
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	f040 808c 	bne.w	8009e78 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009d60:	4b4e      	ldr	r3, [pc, #312]	; (8009e9c <xTaskIncrementTick+0x150>)
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	3301      	adds	r3, #1
 8009d66:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009d68:	4a4c      	ldr	r2, [pc, #304]	; (8009e9c <xTaskIncrementTick+0x150>)
 8009d6a:	693b      	ldr	r3, [r7, #16]
 8009d6c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009d6e:	693b      	ldr	r3, [r7, #16]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d11f      	bne.n	8009db4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8009d74:	4b4a      	ldr	r3, [pc, #296]	; (8009ea0 <xTaskIncrementTick+0x154>)
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d009      	beq.n	8009d92 <xTaskIncrementTick+0x46>
 8009d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d82:	f383 8811 	msr	BASEPRI, r3
 8009d86:	f3bf 8f6f 	isb	sy
 8009d8a:	f3bf 8f4f 	dsb	sy
 8009d8e:	603b      	str	r3, [r7, #0]
 8009d90:	e7fe      	b.n	8009d90 <xTaskIncrementTick+0x44>
 8009d92:	4b43      	ldr	r3, [pc, #268]	; (8009ea0 <xTaskIncrementTick+0x154>)
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	60fb      	str	r3, [r7, #12]
 8009d98:	4b42      	ldr	r3, [pc, #264]	; (8009ea4 <xTaskIncrementTick+0x158>)
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	4a40      	ldr	r2, [pc, #256]	; (8009ea0 <xTaskIncrementTick+0x154>)
 8009d9e:	6013      	str	r3, [r2, #0]
 8009da0:	4a40      	ldr	r2, [pc, #256]	; (8009ea4 <xTaskIncrementTick+0x158>)
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	6013      	str	r3, [r2, #0]
 8009da6:	4b40      	ldr	r3, [pc, #256]	; (8009ea8 <xTaskIncrementTick+0x15c>)
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	3301      	adds	r3, #1
 8009dac:	4a3e      	ldr	r2, [pc, #248]	; (8009ea8 <xTaskIncrementTick+0x15c>)
 8009dae:	6013      	str	r3, [r2, #0]
 8009db0:	f000 fac4 	bl	800a33c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009db4:	4b3d      	ldr	r3, [pc, #244]	; (8009eac <xTaskIncrementTick+0x160>)
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	693a      	ldr	r2, [r7, #16]
 8009dba:	429a      	cmp	r2, r3
 8009dbc:	d34d      	bcc.n	8009e5a <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009dbe:	4b38      	ldr	r3, [pc, #224]	; (8009ea0 <xTaskIncrementTick+0x154>)
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d101      	bne.n	8009dcc <xTaskIncrementTick+0x80>
 8009dc8:	2301      	movs	r3, #1
 8009dca:	e000      	b.n	8009dce <xTaskIncrementTick+0x82>
 8009dcc:	2300      	movs	r3, #0
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d004      	beq.n	8009ddc <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009dd2:	4b36      	ldr	r3, [pc, #216]	; (8009eac <xTaskIncrementTick+0x160>)
 8009dd4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009dd8:	601a      	str	r2, [r3, #0]
					break;
 8009dda:	e03e      	b.n	8009e5a <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009ddc:	4b30      	ldr	r3, [pc, #192]	; (8009ea0 <xTaskIncrementTick+0x154>)
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	68db      	ldr	r3, [r3, #12]
 8009de2:	68db      	ldr	r3, [r3, #12]
 8009de4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009de6:	68bb      	ldr	r3, [r7, #8]
 8009de8:	685b      	ldr	r3, [r3, #4]
 8009dea:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009dec:	693a      	ldr	r2, [r7, #16]
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	429a      	cmp	r2, r3
 8009df2:	d203      	bcs.n	8009dfc <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009df4:	4a2d      	ldr	r2, [pc, #180]	; (8009eac <xTaskIncrementTick+0x160>)
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	6013      	str	r3, [r2, #0]
						break;
 8009dfa:	e02e      	b.n	8009e5a <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009dfc:	68bb      	ldr	r3, [r7, #8]
 8009dfe:	3304      	adds	r3, #4
 8009e00:	4618      	mov	r0, r3
 8009e02:	f7fe ffb3 	bl	8008d6c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009e06:	68bb      	ldr	r3, [r7, #8]
 8009e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d004      	beq.n	8009e18 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009e0e:	68bb      	ldr	r3, [r7, #8]
 8009e10:	3318      	adds	r3, #24
 8009e12:	4618      	mov	r0, r3
 8009e14:	f7fe ffaa 	bl	8008d6c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009e18:	68bb      	ldr	r3, [r7, #8]
 8009e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e1c:	2201      	movs	r2, #1
 8009e1e:	409a      	lsls	r2, r3
 8009e20:	4b23      	ldr	r3, [pc, #140]	; (8009eb0 <xTaskIncrementTick+0x164>)
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	4313      	orrs	r3, r2
 8009e26:	4a22      	ldr	r2, [pc, #136]	; (8009eb0 <xTaskIncrementTick+0x164>)
 8009e28:	6013      	str	r3, [r2, #0]
 8009e2a:	68bb      	ldr	r3, [r7, #8]
 8009e2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e2e:	4613      	mov	r3, r2
 8009e30:	009b      	lsls	r3, r3, #2
 8009e32:	4413      	add	r3, r2
 8009e34:	009b      	lsls	r3, r3, #2
 8009e36:	4a1f      	ldr	r2, [pc, #124]	; (8009eb4 <xTaskIncrementTick+0x168>)
 8009e38:	441a      	add	r2, r3
 8009e3a:	68bb      	ldr	r3, [r7, #8]
 8009e3c:	3304      	adds	r3, #4
 8009e3e:	4619      	mov	r1, r3
 8009e40:	4610      	mov	r0, r2
 8009e42:	f7fe ff36 	bl	8008cb2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009e46:	68bb      	ldr	r3, [r7, #8]
 8009e48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e4a:	4b1b      	ldr	r3, [pc, #108]	; (8009eb8 <xTaskIncrementTick+0x16c>)
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e50:	429a      	cmp	r2, r3
 8009e52:	d3b4      	bcc.n	8009dbe <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8009e54:	2301      	movs	r3, #1
 8009e56:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009e58:	e7b1      	b.n	8009dbe <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009e5a:	4b17      	ldr	r3, [pc, #92]	; (8009eb8 <xTaskIncrementTick+0x16c>)
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e60:	4914      	ldr	r1, [pc, #80]	; (8009eb4 <xTaskIncrementTick+0x168>)
 8009e62:	4613      	mov	r3, r2
 8009e64:	009b      	lsls	r3, r3, #2
 8009e66:	4413      	add	r3, r2
 8009e68:	009b      	lsls	r3, r3, #2
 8009e6a:	440b      	add	r3, r1
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	2b01      	cmp	r3, #1
 8009e70:	d907      	bls.n	8009e82 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8009e72:	2301      	movs	r3, #1
 8009e74:	617b      	str	r3, [r7, #20]
 8009e76:	e004      	b.n	8009e82 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009e78:	4b10      	ldr	r3, [pc, #64]	; (8009ebc <xTaskIncrementTick+0x170>)
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	3301      	adds	r3, #1
 8009e7e:	4a0f      	ldr	r2, [pc, #60]	; (8009ebc <xTaskIncrementTick+0x170>)
 8009e80:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009e82:	4b0f      	ldr	r3, [pc, #60]	; (8009ec0 <xTaskIncrementTick+0x174>)
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d001      	beq.n	8009e8e <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8009e8a:	2301      	movs	r3, #1
 8009e8c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009e8e:	697b      	ldr	r3, [r7, #20]
}
 8009e90:	4618      	mov	r0, r3
 8009e92:	3718      	adds	r7, #24
 8009e94:	46bd      	mov	sp, r7
 8009e96:	bd80      	pop	{r7, pc}
 8009e98:	200001e8 	.word	0x200001e8
 8009e9c:	200001c4 	.word	0x200001c4
 8009ea0:	20000178 	.word	0x20000178
 8009ea4:	2000017c 	.word	0x2000017c
 8009ea8:	200001d8 	.word	0x200001d8
 8009eac:	200001e0 	.word	0x200001e0
 8009eb0:	200001c8 	.word	0x200001c8
 8009eb4:	200000c4 	.word	0x200000c4
 8009eb8:	200000c0 	.word	0x200000c0
 8009ebc:	200001d0 	.word	0x200001d0
 8009ec0:	200001d4 	.word	0x200001d4

08009ec4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009ec4:	b580      	push	{r7, lr}
 8009ec6:	b088      	sub	sp, #32
 8009ec8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009eca:	4b39      	ldr	r3, [pc, #228]	; (8009fb0 <vTaskSwitchContext+0xec>)
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d003      	beq.n	8009eda <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009ed2:	4b38      	ldr	r3, [pc, #224]	; (8009fb4 <vTaskSwitchContext+0xf0>)
 8009ed4:	2201      	movs	r2, #1
 8009ed6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009ed8:	e065      	b.n	8009fa6 <vTaskSwitchContext+0xe2>
		xYieldPending = pdFALSE;
 8009eda:	4b36      	ldr	r3, [pc, #216]	; (8009fb4 <vTaskSwitchContext+0xf0>)
 8009edc:	2200      	movs	r2, #0
 8009ede:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8009ee0:	4b35      	ldr	r3, [pc, #212]	; (8009fb8 <vTaskSwitchContext+0xf4>)
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ee6:	61fb      	str	r3, [r7, #28]
 8009ee8:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8009eec:	61bb      	str	r3, [r7, #24]
 8009eee:	69fb      	ldr	r3, [r7, #28]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	69ba      	ldr	r2, [r7, #24]
 8009ef4:	429a      	cmp	r2, r3
 8009ef6:	d111      	bne.n	8009f1c <vTaskSwitchContext+0x58>
 8009ef8:	69fb      	ldr	r3, [r7, #28]
 8009efa:	3304      	adds	r3, #4
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	69ba      	ldr	r2, [r7, #24]
 8009f00:	429a      	cmp	r2, r3
 8009f02:	d10b      	bne.n	8009f1c <vTaskSwitchContext+0x58>
 8009f04:	69fb      	ldr	r3, [r7, #28]
 8009f06:	3308      	adds	r3, #8
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	69ba      	ldr	r2, [r7, #24]
 8009f0c:	429a      	cmp	r2, r3
 8009f0e:	d105      	bne.n	8009f1c <vTaskSwitchContext+0x58>
 8009f10:	69fb      	ldr	r3, [r7, #28]
 8009f12:	330c      	adds	r3, #12
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	69ba      	ldr	r2, [r7, #24]
 8009f18:	429a      	cmp	r2, r3
 8009f1a:	d008      	beq.n	8009f2e <vTaskSwitchContext+0x6a>
 8009f1c:	4b26      	ldr	r3, [pc, #152]	; (8009fb8 <vTaskSwitchContext+0xf4>)
 8009f1e:	681a      	ldr	r2, [r3, #0]
 8009f20:	4b25      	ldr	r3, [pc, #148]	; (8009fb8 <vTaskSwitchContext+0xf4>)
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	3334      	adds	r3, #52	; 0x34
 8009f26:	4619      	mov	r1, r3
 8009f28:	4610      	mov	r0, r2
 8009f2a:	f000 ff5a 	bl	800ade2 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8009f2e:	4b23      	ldr	r3, [pc, #140]	; (8009fbc <vTaskSwitchContext+0xf8>)
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	fab3 f383 	clz	r3, r3
 8009f3a:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8009f3c:	7afb      	ldrb	r3, [r7, #11]
 8009f3e:	f1c3 031f 	rsb	r3, r3, #31
 8009f42:	617b      	str	r3, [r7, #20]
 8009f44:	491e      	ldr	r1, [pc, #120]	; (8009fc0 <vTaskSwitchContext+0xfc>)
 8009f46:	697a      	ldr	r2, [r7, #20]
 8009f48:	4613      	mov	r3, r2
 8009f4a:	009b      	lsls	r3, r3, #2
 8009f4c:	4413      	add	r3, r2
 8009f4e:	009b      	lsls	r3, r3, #2
 8009f50:	440b      	add	r3, r1
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d109      	bne.n	8009f6c <vTaskSwitchContext+0xa8>
	__asm volatile
 8009f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f5c:	f383 8811 	msr	BASEPRI, r3
 8009f60:	f3bf 8f6f 	isb	sy
 8009f64:	f3bf 8f4f 	dsb	sy
 8009f68:	607b      	str	r3, [r7, #4]
 8009f6a:	e7fe      	b.n	8009f6a <vTaskSwitchContext+0xa6>
 8009f6c:	697a      	ldr	r2, [r7, #20]
 8009f6e:	4613      	mov	r3, r2
 8009f70:	009b      	lsls	r3, r3, #2
 8009f72:	4413      	add	r3, r2
 8009f74:	009b      	lsls	r3, r3, #2
 8009f76:	4a12      	ldr	r2, [pc, #72]	; (8009fc0 <vTaskSwitchContext+0xfc>)
 8009f78:	4413      	add	r3, r2
 8009f7a:	613b      	str	r3, [r7, #16]
 8009f7c:	693b      	ldr	r3, [r7, #16]
 8009f7e:	685b      	ldr	r3, [r3, #4]
 8009f80:	685a      	ldr	r2, [r3, #4]
 8009f82:	693b      	ldr	r3, [r7, #16]
 8009f84:	605a      	str	r2, [r3, #4]
 8009f86:	693b      	ldr	r3, [r7, #16]
 8009f88:	685a      	ldr	r2, [r3, #4]
 8009f8a:	693b      	ldr	r3, [r7, #16]
 8009f8c:	3308      	adds	r3, #8
 8009f8e:	429a      	cmp	r2, r3
 8009f90:	d104      	bne.n	8009f9c <vTaskSwitchContext+0xd8>
 8009f92:	693b      	ldr	r3, [r7, #16]
 8009f94:	685b      	ldr	r3, [r3, #4]
 8009f96:	685a      	ldr	r2, [r3, #4]
 8009f98:	693b      	ldr	r3, [r7, #16]
 8009f9a:	605a      	str	r2, [r3, #4]
 8009f9c:	693b      	ldr	r3, [r7, #16]
 8009f9e:	685b      	ldr	r3, [r3, #4]
 8009fa0:	68db      	ldr	r3, [r3, #12]
 8009fa2:	4a05      	ldr	r2, [pc, #20]	; (8009fb8 <vTaskSwitchContext+0xf4>)
 8009fa4:	6013      	str	r3, [r2, #0]
}
 8009fa6:	bf00      	nop
 8009fa8:	3720      	adds	r7, #32
 8009faa:	46bd      	mov	sp, r7
 8009fac:	bd80      	pop	{r7, pc}
 8009fae:	bf00      	nop
 8009fb0:	200001e8 	.word	0x200001e8
 8009fb4:	200001d4 	.word	0x200001d4
 8009fb8:	200000c0 	.word	0x200000c0
 8009fbc:	200001c8 	.word	0x200001c8
 8009fc0:	200000c4 	.word	0x200000c4

08009fc4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009fc4:	b580      	push	{r7, lr}
 8009fc6:	b084      	sub	sp, #16
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	6078      	str	r0, [r7, #4]
 8009fcc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d109      	bne.n	8009fe8 <vTaskPlaceOnEventList+0x24>
 8009fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fd8:	f383 8811 	msr	BASEPRI, r3
 8009fdc:	f3bf 8f6f 	isb	sy
 8009fe0:	f3bf 8f4f 	dsb	sy
 8009fe4:	60fb      	str	r3, [r7, #12]
 8009fe6:	e7fe      	b.n	8009fe6 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009fe8:	4b07      	ldr	r3, [pc, #28]	; (800a008 <vTaskPlaceOnEventList+0x44>)
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	3318      	adds	r3, #24
 8009fee:	4619      	mov	r1, r3
 8009ff0:	6878      	ldr	r0, [r7, #4]
 8009ff2:	f7fe fe82 	bl	8008cfa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009ff6:	2101      	movs	r1, #1
 8009ff8:	6838      	ldr	r0, [r7, #0]
 8009ffa:	f000 fa67 	bl	800a4cc <prvAddCurrentTaskToDelayedList>
}
 8009ffe:	bf00      	nop
 800a000:	3710      	adds	r7, #16
 800a002:	46bd      	mov	sp, r7
 800a004:	bd80      	pop	{r7, pc}
 800a006:	bf00      	nop
 800a008:	200000c0 	.word	0x200000c0

0800a00c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a00c:	b580      	push	{r7, lr}
 800a00e:	b086      	sub	sp, #24
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	68db      	ldr	r3, [r3, #12]
 800a018:	68db      	ldr	r3, [r3, #12]
 800a01a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a01c:	693b      	ldr	r3, [r7, #16]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d109      	bne.n	800a036 <xTaskRemoveFromEventList+0x2a>
 800a022:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a026:	f383 8811 	msr	BASEPRI, r3
 800a02a:	f3bf 8f6f 	isb	sy
 800a02e:	f3bf 8f4f 	dsb	sy
 800a032:	60fb      	str	r3, [r7, #12]
 800a034:	e7fe      	b.n	800a034 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a036:	693b      	ldr	r3, [r7, #16]
 800a038:	3318      	adds	r3, #24
 800a03a:	4618      	mov	r0, r3
 800a03c:	f7fe fe96 	bl	8008d6c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a040:	4b1d      	ldr	r3, [pc, #116]	; (800a0b8 <xTaskRemoveFromEventList+0xac>)
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	2b00      	cmp	r3, #0
 800a046:	d11c      	bne.n	800a082 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a048:	693b      	ldr	r3, [r7, #16]
 800a04a:	3304      	adds	r3, #4
 800a04c:	4618      	mov	r0, r3
 800a04e:	f7fe fe8d 	bl	8008d6c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a052:	693b      	ldr	r3, [r7, #16]
 800a054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a056:	2201      	movs	r2, #1
 800a058:	409a      	lsls	r2, r3
 800a05a:	4b18      	ldr	r3, [pc, #96]	; (800a0bc <xTaskRemoveFromEventList+0xb0>)
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	4313      	orrs	r3, r2
 800a060:	4a16      	ldr	r2, [pc, #88]	; (800a0bc <xTaskRemoveFromEventList+0xb0>)
 800a062:	6013      	str	r3, [r2, #0]
 800a064:	693b      	ldr	r3, [r7, #16]
 800a066:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a068:	4613      	mov	r3, r2
 800a06a:	009b      	lsls	r3, r3, #2
 800a06c:	4413      	add	r3, r2
 800a06e:	009b      	lsls	r3, r3, #2
 800a070:	4a13      	ldr	r2, [pc, #76]	; (800a0c0 <xTaskRemoveFromEventList+0xb4>)
 800a072:	441a      	add	r2, r3
 800a074:	693b      	ldr	r3, [r7, #16]
 800a076:	3304      	adds	r3, #4
 800a078:	4619      	mov	r1, r3
 800a07a:	4610      	mov	r0, r2
 800a07c:	f7fe fe19 	bl	8008cb2 <vListInsertEnd>
 800a080:	e005      	b.n	800a08e <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a082:	693b      	ldr	r3, [r7, #16]
 800a084:	3318      	adds	r3, #24
 800a086:	4619      	mov	r1, r3
 800a088:	480e      	ldr	r0, [pc, #56]	; (800a0c4 <xTaskRemoveFromEventList+0xb8>)
 800a08a:	f7fe fe12 	bl	8008cb2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a08e:	693b      	ldr	r3, [r7, #16]
 800a090:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a092:	4b0d      	ldr	r3, [pc, #52]	; (800a0c8 <xTaskRemoveFromEventList+0xbc>)
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a098:	429a      	cmp	r2, r3
 800a09a:	d905      	bls.n	800a0a8 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a09c:	2301      	movs	r3, #1
 800a09e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a0a0:	4b0a      	ldr	r3, [pc, #40]	; (800a0cc <xTaskRemoveFromEventList+0xc0>)
 800a0a2:	2201      	movs	r2, #1
 800a0a4:	601a      	str	r2, [r3, #0]
 800a0a6:	e001      	b.n	800a0ac <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800a0ac:	697b      	ldr	r3, [r7, #20]
}
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	3718      	adds	r7, #24
 800a0b2:	46bd      	mov	sp, r7
 800a0b4:	bd80      	pop	{r7, pc}
 800a0b6:	bf00      	nop
 800a0b8:	200001e8 	.word	0x200001e8
 800a0bc:	200001c8 	.word	0x200001c8
 800a0c0:	200000c4 	.word	0x200000c4
 800a0c4:	20000180 	.word	0x20000180
 800a0c8:	200000c0 	.word	0x200000c0
 800a0cc:	200001d4 	.word	0x200001d4

0800a0d0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a0d0:	b480      	push	{r7}
 800a0d2:	b083      	sub	sp, #12
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a0d8:	4b06      	ldr	r3, [pc, #24]	; (800a0f4 <vTaskInternalSetTimeOutState+0x24>)
 800a0da:	681a      	ldr	r2, [r3, #0]
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a0e0:	4b05      	ldr	r3, [pc, #20]	; (800a0f8 <vTaskInternalSetTimeOutState+0x28>)
 800a0e2:	681a      	ldr	r2, [r3, #0]
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	605a      	str	r2, [r3, #4]
}
 800a0e8:	bf00      	nop
 800a0ea:	370c      	adds	r7, #12
 800a0ec:	46bd      	mov	sp, r7
 800a0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f2:	4770      	bx	lr
 800a0f4:	200001d8 	.word	0x200001d8
 800a0f8:	200001c4 	.word	0x200001c4

0800a0fc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a0fc:	b580      	push	{r7, lr}
 800a0fe:	b088      	sub	sp, #32
 800a100:	af00      	add	r7, sp, #0
 800a102:	6078      	str	r0, [r7, #4]
 800a104:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d109      	bne.n	800a120 <xTaskCheckForTimeOut+0x24>
 800a10c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a110:	f383 8811 	msr	BASEPRI, r3
 800a114:	f3bf 8f6f 	isb	sy
 800a118:	f3bf 8f4f 	dsb	sy
 800a11c:	613b      	str	r3, [r7, #16]
 800a11e:	e7fe      	b.n	800a11e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800a120:	683b      	ldr	r3, [r7, #0]
 800a122:	2b00      	cmp	r3, #0
 800a124:	d109      	bne.n	800a13a <xTaskCheckForTimeOut+0x3e>
 800a126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a12a:	f383 8811 	msr	BASEPRI, r3
 800a12e:	f3bf 8f6f 	isb	sy
 800a132:	f3bf 8f4f 	dsb	sy
 800a136:	60fb      	str	r3, [r7, #12]
 800a138:	e7fe      	b.n	800a138 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800a13a:	f000 fb57 	bl	800a7ec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a13e:	4b1d      	ldr	r3, [pc, #116]	; (800a1b4 <xTaskCheckForTimeOut+0xb8>)
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	685b      	ldr	r3, [r3, #4]
 800a148:	69ba      	ldr	r2, [r7, #24]
 800a14a:	1ad3      	subs	r3, r2, r3
 800a14c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a14e:	683b      	ldr	r3, [r7, #0]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a156:	d102      	bne.n	800a15e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a158:	2300      	movs	r3, #0
 800a15a:	61fb      	str	r3, [r7, #28]
 800a15c:	e023      	b.n	800a1a6 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681a      	ldr	r2, [r3, #0]
 800a162:	4b15      	ldr	r3, [pc, #84]	; (800a1b8 <xTaskCheckForTimeOut+0xbc>)
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	429a      	cmp	r2, r3
 800a168:	d007      	beq.n	800a17a <xTaskCheckForTimeOut+0x7e>
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	685b      	ldr	r3, [r3, #4]
 800a16e:	69ba      	ldr	r2, [r7, #24]
 800a170:	429a      	cmp	r2, r3
 800a172:	d302      	bcc.n	800a17a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a174:	2301      	movs	r3, #1
 800a176:	61fb      	str	r3, [r7, #28]
 800a178:	e015      	b.n	800a1a6 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a17a:	683b      	ldr	r3, [r7, #0]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	697a      	ldr	r2, [r7, #20]
 800a180:	429a      	cmp	r2, r3
 800a182:	d20b      	bcs.n	800a19c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a184:	683b      	ldr	r3, [r7, #0]
 800a186:	681a      	ldr	r2, [r3, #0]
 800a188:	697b      	ldr	r3, [r7, #20]
 800a18a:	1ad2      	subs	r2, r2, r3
 800a18c:	683b      	ldr	r3, [r7, #0]
 800a18e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a190:	6878      	ldr	r0, [r7, #4]
 800a192:	f7ff ff9d 	bl	800a0d0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a196:	2300      	movs	r3, #0
 800a198:	61fb      	str	r3, [r7, #28]
 800a19a:	e004      	b.n	800a1a6 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800a19c:	683b      	ldr	r3, [r7, #0]
 800a19e:	2200      	movs	r2, #0
 800a1a0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a1a2:	2301      	movs	r3, #1
 800a1a4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a1a6:	f000 fb4f 	bl	800a848 <vPortExitCritical>

	return xReturn;
 800a1aa:	69fb      	ldr	r3, [r7, #28]
}
 800a1ac:	4618      	mov	r0, r3
 800a1ae:	3720      	adds	r7, #32
 800a1b0:	46bd      	mov	sp, r7
 800a1b2:	bd80      	pop	{r7, pc}
 800a1b4:	200001c4 	.word	0x200001c4
 800a1b8:	200001d8 	.word	0x200001d8

0800a1bc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a1bc:	b480      	push	{r7}
 800a1be:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a1c0:	4b03      	ldr	r3, [pc, #12]	; (800a1d0 <vTaskMissedYield+0x14>)
 800a1c2:	2201      	movs	r2, #1
 800a1c4:	601a      	str	r2, [r3, #0]
}
 800a1c6:	bf00      	nop
 800a1c8:	46bd      	mov	sp, r7
 800a1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ce:	4770      	bx	lr
 800a1d0:	200001d4 	.word	0x200001d4

0800a1d4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a1d4:	b580      	push	{r7, lr}
 800a1d6:	b082      	sub	sp, #8
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a1dc:	f000 f854 	bl	800a288 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a1e0:	4b07      	ldr	r3, [pc, #28]	; (800a200 <prvIdleTask+0x2c>)
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	2b01      	cmp	r3, #1
 800a1e6:	d907      	bls.n	800a1f8 <prvIdleTask+0x24>
			{
				taskYIELD();
 800a1e8:	4b06      	ldr	r3, [pc, #24]	; (800a204 <prvIdleTask+0x30>)
 800a1ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1ee:	601a      	str	r2, [r3, #0]
 800a1f0:	f3bf 8f4f 	dsb	sy
 800a1f4:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800a1f8:	f000 fdec 	bl	800add4 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800a1fc:	e7ee      	b.n	800a1dc <prvIdleTask+0x8>
 800a1fe:	bf00      	nop
 800a200:	200000c4 	.word	0x200000c4
 800a204:	e000ed04 	.word	0xe000ed04

0800a208 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a208:	b580      	push	{r7, lr}
 800a20a:	b082      	sub	sp, #8
 800a20c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a20e:	2300      	movs	r3, #0
 800a210:	607b      	str	r3, [r7, #4]
 800a212:	e00c      	b.n	800a22e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a214:	687a      	ldr	r2, [r7, #4]
 800a216:	4613      	mov	r3, r2
 800a218:	009b      	lsls	r3, r3, #2
 800a21a:	4413      	add	r3, r2
 800a21c:	009b      	lsls	r3, r3, #2
 800a21e:	4a12      	ldr	r2, [pc, #72]	; (800a268 <prvInitialiseTaskLists+0x60>)
 800a220:	4413      	add	r3, r2
 800a222:	4618      	mov	r0, r3
 800a224:	f7fe fd18 	bl	8008c58 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	3301      	adds	r3, #1
 800a22c:	607b      	str	r3, [r7, #4]
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	2b06      	cmp	r3, #6
 800a232:	d9ef      	bls.n	800a214 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a234:	480d      	ldr	r0, [pc, #52]	; (800a26c <prvInitialiseTaskLists+0x64>)
 800a236:	f7fe fd0f 	bl	8008c58 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a23a:	480d      	ldr	r0, [pc, #52]	; (800a270 <prvInitialiseTaskLists+0x68>)
 800a23c:	f7fe fd0c 	bl	8008c58 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a240:	480c      	ldr	r0, [pc, #48]	; (800a274 <prvInitialiseTaskLists+0x6c>)
 800a242:	f7fe fd09 	bl	8008c58 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a246:	480c      	ldr	r0, [pc, #48]	; (800a278 <prvInitialiseTaskLists+0x70>)
 800a248:	f7fe fd06 	bl	8008c58 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a24c:	480b      	ldr	r0, [pc, #44]	; (800a27c <prvInitialiseTaskLists+0x74>)
 800a24e:	f7fe fd03 	bl	8008c58 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a252:	4b0b      	ldr	r3, [pc, #44]	; (800a280 <prvInitialiseTaskLists+0x78>)
 800a254:	4a05      	ldr	r2, [pc, #20]	; (800a26c <prvInitialiseTaskLists+0x64>)
 800a256:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a258:	4b0a      	ldr	r3, [pc, #40]	; (800a284 <prvInitialiseTaskLists+0x7c>)
 800a25a:	4a05      	ldr	r2, [pc, #20]	; (800a270 <prvInitialiseTaskLists+0x68>)
 800a25c:	601a      	str	r2, [r3, #0]
}
 800a25e:	bf00      	nop
 800a260:	3708      	adds	r7, #8
 800a262:	46bd      	mov	sp, r7
 800a264:	bd80      	pop	{r7, pc}
 800a266:	bf00      	nop
 800a268:	200000c4 	.word	0x200000c4
 800a26c:	20000150 	.word	0x20000150
 800a270:	20000164 	.word	0x20000164
 800a274:	20000180 	.word	0x20000180
 800a278:	20000194 	.word	0x20000194
 800a27c:	200001ac 	.word	0x200001ac
 800a280:	20000178 	.word	0x20000178
 800a284:	2000017c 	.word	0x2000017c

0800a288 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a288:	b580      	push	{r7, lr}
 800a28a:	b082      	sub	sp, #8
 800a28c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a28e:	e019      	b.n	800a2c4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a290:	f000 faac 	bl	800a7ec <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800a294:	4b0f      	ldr	r3, [pc, #60]	; (800a2d4 <prvCheckTasksWaitingTermination+0x4c>)
 800a296:	68db      	ldr	r3, [r3, #12]
 800a298:	68db      	ldr	r3, [r3, #12]
 800a29a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	3304      	adds	r3, #4
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	f7fe fd63 	bl	8008d6c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a2a6:	4b0c      	ldr	r3, [pc, #48]	; (800a2d8 <prvCheckTasksWaitingTermination+0x50>)
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	3b01      	subs	r3, #1
 800a2ac:	4a0a      	ldr	r2, [pc, #40]	; (800a2d8 <prvCheckTasksWaitingTermination+0x50>)
 800a2ae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a2b0:	4b0a      	ldr	r3, [pc, #40]	; (800a2dc <prvCheckTasksWaitingTermination+0x54>)
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	3b01      	subs	r3, #1
 800a2b6:	4a09      	ldr	r2, [pc, #36]	; (800a2dc <prvCheckTasksWaitingTermination+0x54>)
 800a2b8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a2ba:	f000 fac5 	bl	800a848 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a2be:	6878      	ldr	r0, [r7, #4]
 800a2c0:	f000 f80e 	bl	800a2e0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a2c4:	4b05      	ldr	r3, [pc, #20]	; (800a2dc <prvCheckTasksWaitingTermination+0x54>)
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d1e1      	bne.n	800a290 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a2cc:	bf00      	nop
 800a2ce:	3708      	adds	r7, #8
 800a2d0:	46bd      	mov	sp, r7
 800a2d2:	bd80      	pop	{r7, pc}
 800a2d4:	20000194 	.word	0x20000194
 800a2d8:	200001c0 	.word	0x200001c0
 800a2dc:	200001a8 	.word	0x200001a8

0800a2e0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a2e0:	b580      	push	{r7, lr}
 800a2e2:	b084      	sub	sp, #16
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d108      	bne.n	800a304 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	f000 fc58 	bl	800abac <vPortFree>
				vPortFree( pxTCB );
 800a2fc:	6878      	ldr	r0, [r7, #4]
 800a2fe:	f000 fc55 	bl	800abac <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a302:	e017      	b.n	800a334 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800a30a:	2b01      	cmp	r3, #1
 800a30c:	d103      	bne.n	800a316 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a30e:	6878      	ldr	r0, [r7, #4]
 800a310:	f000 fc4c 	bl	800abac <vPortFree>
	}
 800a314:	e00e      	b.n	800a334 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800a31c:	2b02      	cmp	r3, #2
 800a31e:	d009      	beq.n	800a334 <prvDeleteTCB+0x54>
 800a320:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a324:	f383 8811 	msr	BASEPRI, r3
 800a328:	f3bf 8f6f 	isb	sy
 800a32c:	f3bf 8f4f 	dsb	sy
 800a330:	60fb      	str	r3, [r7, #12]
 800a332:	e7fe      	b.n	800a332 <prvDeleteTCB+0x52>
	}
 800a334:	bf00      	nop
 800a336:	3710      	adds	r7, #16
 800a338:	46bd      	mov	sp, r7
 800a33a:	bd80      	pop	{r7, pc}

0800a33c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a33c:	b480      	push	{r7}
 800a33e:	b083      	sub	sp, #12
 800a340:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a342:	4b0f      	ldr	r3, [pc, #60]	; (800a380 <prvResetNextTaskUnblockTime+0x44>)
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d101      	bne.n	800a350 <prvResetNextTaskUnblockTime+0x14>
 800a34c:	2301      	movs	r3, #1
 800a34e:	e000      	b.n	800a352 <prvResetNextTaskUnblockTime+0x16>
 800a350:	2300      	movs	r3, #0
 800a352:	2b00      	cmp	r3, #0
 800a354:	d004      	beq.n	800a360 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a356:	4b0b      	ldr	r3, [pc, #44]	; (800a384 <prvResetNextTaskUnblockTime+0x48>)
 800a358:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a35c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a35e:	e008      	b.n	800a372 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800a360:	4b07      	ldr	r3, [pc, #28]	; (800a380 <prvResetNextTaskUnblockTime+0x44>)
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	68db      	ldr	r3, [r3, #12]
 800a366:	68db      	ldr	r3, [r3, #12]
 800a368:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	685b      	ldr	r3, [r3, #4]
 800a36e:	4a05      	ldr	r2, [pc, #20]	; (800a384 <prvResetNextTaskUnblockTime+0x48>)
 800a370:	6013      	str	r3, [r2, #0]
}
 800a372:	bf00      	nop
 800a374:	370c      	adds	r7, #12
 800a376:	46bd      	mov	sp, r7
 800a378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37c:	4770      	bx	lr
 800a37e:	bf00      	nop
 800a380:	20000178 	.word	0x20000178
 800a384:	200001e0 	.word	0x200001e0

0800a388 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a388:	b480      	push	{r7}
 800a38a:	b083      	sub	sp, #12
 800a38c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a38e:	4b0b      	ldr	r3, [pc, #44]	; (800a3bc <xTaskGetSchedulerState+0x34>)
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	2b00      	cmp	r3, #0
 800a394:	d102      	bne.n	800a39c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a396:	2301      	movs	r3, #1
 800a398:	607b      	str	r3, [r7, #4]
 800a39a:	e008      	b.n	800a3ae <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a39c:	4b08      	ldr	r3, [pc, #32]	; (800a3c0 <xTaskGetSchedulerState+0x38>)
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d102      	bne.n	800a3aa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a3a4:	2302      	movs	r3, #2
 800a3a6:	607b      	str	r3, [r7, #4]
 800a3a8:	e001      	b.n	800a3ae <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a3ae:	687b      	ldr	r3, [r7, #4]
	}
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	370c      	adds	r7, #12
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ba:	4770      	bx	lr
 800a3bc:	200001cc 	.word	0x200001cc
 800a3c0:	200001e8 	.word	0x200001e8

0800a3c4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a3c4:	b580      	push	{r7, lr}
 800a3c6:	b086      	sub	sp, #24
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a3d0:	2300      	movs	r3, #0
 800a3d2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d06c      	beq.n	800a4b4 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a3da:	4b39      	ldr	r3, [pc, #228]	; (800a4c0 <xTaskPriorityDisinherit+0xfc>)
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	693a      	ldr	r2, [r7, #16]
 800a3e0:	429a      	cmp	r2, r3
 800a3e2:	d009      	beq.n	800a3f8 <xTaskPriorityDisinherit+0x34>
 800a3e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3e8:	f383 8811 	msr	BASEPRI, r3
 800a3ec:	f3bf 8f6f 	isb	sy
 800a3f0:	f3bf 8f4f 	dsb	sy
 800a3f4:	60fb      	str	r3, [r7, #12]
 800a3f6:	e7fe      	b.n	800a3f6 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800a3f8:	693b      	ldr	r3, [r7, #16]
 800a3fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d109      	bne.n	800a414 <xTaskPriorityDisinherit+0x50>
 800a400:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a404:	f383 8811 	msr	BASEPRI, r3
 800a408:	f3bf 8f6f 	isb	sy
 800a40c:	f3bf 8f4f 	dsb	sy
 800a410:	60bb      	str	r3, [r7, #8]
 800a412:	e7fe      	b.n	800a412 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800a414:	693b      	ldr	r3, [r7, #16]
 800a416:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a418:	1e5a      	subs	r2, r3, #1
 800a41a:	693b      	ldr	r3, [r7, #16]
 800a41c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a41e:	693b      	ldr	r3, [r7, #16]
 800a420:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a422:	693b      	ldr	r3, [r7, #16]
 800a424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a426:	429a      	cmp	r2, r3
 800a428:	d044      	beq.n	800a4b4 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a42a:	693b      	ldr	r3, [r7, #16]
 800a42c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d140      	bne.n	800a4b4 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a432:	693b      	ldr	r3, [r7, #16]
 800a434:	3304      	adds	r3, #4
 800a436:	4618      	mov	r0, r3
 800a438:	f7fe fc98 	bl	8008d6c <uxListRemove>
 800a43c:	4603      	mov	r3, r0
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d115      	bne.n	800a46e <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800a442:	693b      	ldr	r3, [r7, #16]
 800a444:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a446:	491f      	ldr	r1, [pc, #124]	; (800a4c4 <xTaskPriorityDisinherit+0x100>)
 800a448:	4613      	mov	r3, r2
 800a44a:	009b      	lsls	r3, r3, #2
 800a44c:	4413      	add	r3, r2
 800a44e:	009b      	lsls	r3, r3, #2
 800a450:	440b      	add	r3, r1
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	2b00      	cmp	r3, #0
 800a456:	d10a      	bne.n	800a46e <xTaskPriorityDisinherit+0xaa>
 800a458:	693b      	ldr	r3, [r7, #16]
 800a45a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a45c:	2201      	movs	r2, #1
 800a45e:	fa02 f303 	lsl.w	r3, r2, r3
 800a462:	43da      	mvns	r2, r3
 800a464:	4b18      	ldr	r3, [pc, #96]	; (800a4c8 <xTaskPriorityDisinherit+0x104>)
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	4013      	ands	r3, r2
 800a46a:	4a17      	ldr	r2, [pc, #92]	; (800a4c8 <xTaskPriorityDisinherit+0x104>)
 800a46c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a46e:	693b      	ldr	r3, [r7, #16]
 800a470:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a472:	693b      	ldr	r3, [r7, #16]
 800a474:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a476:	693b      	ldr	r3, [r7, #16]
 800a478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a47a:	f1c3 0207 	rsb	r2, r3, #7
 800a47e:	693b      	ldr	r3, [r7, #16]
 800a480:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a482:	693b      	ldr	r3, [r7, #16]
 800a484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a486:	2201      	movs	r2, #1
 800a488:	409a      	lsls	r2, r3
 800a48a:	4b0f      	ldr	r3, [pc, #60]	; (800a4c8 <xTaskPriorityDisinherit+0x104>)
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	4313      	orrs	r3, r2
 800a490:	4a0d      	ldr	r2, [pc, #52]	; (800a4c8 <xTaskPriorityDisinherit+0x104>)
 800a492:	6013      	str	r3, [r2, #0]
 800a494:	693b      	ldr	r3, [r7, #16]
 800a496:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a498:	4613      	mov	r3, r2
 800a49a:	009b      	lsls	r3, r3, #2
 800a49c:	4413      	add	r3, r2
 800a49e:	009b      	lsls	r3, r3, #2
 800a4a0:	4a08      	ldr	r2, [pc, #32]	; (800a4c4 <xTaskPriorityDisinherit+0x100>)
 800a4a2:	441a      	add	r2, r3
 800a4a4:	693b      	ldr	r3, [r7, #16]
 800a4a6:	3304      	adds	r3, #4
 800a4a8:	4619      	mov	r1, r3
 800a4aa:	4610      	mov	r0, r2
 800a4ac:	f7fe fc01 	bl	8008cb2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a4b0:	2301      	movs	r3, #1
 800a4b2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a4b4:	697b      	ldr	r3, [r7, #20]
	}
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	3718      	adds	r7, #24
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	bd80      	pop	{r7, pc}
 800a4be:	bf00      	nop
 800a4c0:	200000c0 	.word	0x200000c0
 800a4c4:	200000c4 	.word	0x200000c4
 800a4c8:	200001c8 	.word	0x200001c8

0800a4cc <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a4cc:	b580      	push	{r7, lr}
 800a4ce:	b084      	sub	sp, #16
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	6078      	str	r0, [r7, #4]
 800a4d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a4d6:	4b29      	ldr	r3, [pc, #164]	; (800a57c <prvAddCurrentTaskToDelayedList+0xb0>)
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a4dc:	4b28      	ldr	r3, [pc, #160]	; (800a580 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	3304      	adds	r3, #4
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	f7fe fc42 	bl	8008d6c <uxListRemove>
 800a4e8:	4603      	mov	r3, r0
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d10b      	bne.n	800a506 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800a4ee:	4b24      	ldr	r3, [pc, #144]	; (800a580 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4f4:	2201      	movs	r2, #1
 800a4f6:	fa02 f303 	lsl.w	r3, r2, r3
 800a4fa:	43da      	mvns	r2, r3
 800a4fc:	4b21      	ldr	r3, [pc, #132]	; (800a584 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	4013      	ands	r3, r2
 800a502:	4a20      	ldr	r2, [pc, #128]	; (800a584 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a504:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a50c:	d10a      	bne.n	800a524 <prvAddCurrentTaskToDelayedList+0x58>
 800a50e:	683b      	ldr	r3, [r7, #0]
 800a510:	2b00      	cmp	r3, #0
 800a512:	d007      	beq.n	800a524 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a514:	4b1a      	ldr	r3, [pc, #104]	; (800a580 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	3304      	adds	r3, #4
 800a51a:	4619      	mov	r1, r3
 800a51c:	481a      	ldr	r0, [pc, #104]	; (800a588 <prvAddCurrentTaskToDelayedList+0xbc>)
 800a51e:	f7fe fbc8 	bl	8008cb2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a522:	e026      	b.n	800a572 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a524:	68fa      	ldr	r2, [r7, #12]
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	4413      	add	r3, r2
 800a52a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a52c:	4b14      	ldr	r3, [pc, #80]	; (800a580 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	68ba      	ldr	r2, [r7, #8]
 800a532:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a534:	68ba      	ldr	r2, [r7, #8]
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	429a      	cmp	r2, r3
 800a53a:	d209      	bcs.n	800a550 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a53c:	4b13      	ldr	r3, [pc, #76]	; (800a58c <prvAddCurrentTaskToDelayedList+0xc0>)
 800a53e:	681a      	ldr	r2, [r3, #0]
 800a540:	4b0f      	ldr	r3, [pc, #60]	; (800a580 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	3304      	adds	r3, #4
 800a546:	4619      	mov	r1, r3
 800a548:	4610      	mov	r0, r2
 800a54a:	f7fe fbd6 	bl	8008cfa <vListInsert>
}
 800a54e:	e010      	b.n	800a572 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a550:	4b0f      	ldr	r3, [pc, #60]	; (800a590 <prvAddCurrentTaskToDelayedList+0xc4>)
 800a552:	681a      	ldr	r2, [r3, #0]
 800a554:	4b0a      	ldr	r3, [pc, #40]	; (800a580 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	3304      	adds	r3, #4
 800a55a:	4619      	mov	r1, r3
 800a55c:	4610      	mov	r0, r2
 800a55e:	f7fe fbcc 	bl	8008cfa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a562:	4b0c      	ldr	r3, [pc, #48]	; (800a594 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	68ba      	ldr	r2, [r7, #8]
 800a568:	429a      	cmp	r2, r3
 800a56a:	d202      	bcs.n	800a572 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800a56c:	4a09      	ldr	r2, [pc, #36]	; (800a594 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a56e:	68bb      	ldr	r3, [r7, #8]
 800a570:	6013      	str	r3, [r2, #0]
}
 800a572:	bf00      	nop
 800a574:	3710      	adds	r7, #16
 800a576:	46bd      	mov	sp, r7
 800a578:	bd80      	pop	{r7, pc}
 800a57a:	bf00      	nop
 800a57c:	200001c4 	.word	0x200001c4
 800a580:	200000c0 	.word	0x200000c0
 800a584:	200001c8 	.word	0x200001c8
 800a588:	200001ac 	.word	0x200001ac
 800a58c:	2000017c 	.word	0x2000017c
 800a590:	20000178 	.word	0x20000178
 800a594:	200001e0 	.word	0x200001e0

0800a598 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a598:	b480      	push	{r7}
 800a59a:	b085      	sub	sp, #20
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	60f8      	str	r0, [r7, #12]
 800a5a0:	60b9      	str	r1, [r7, #8]
 800a5a2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	3b04      	subs	r3, #4
 800a5a8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a5b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	3b04      	subs	r3, #4
 800a5b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a5b8:	68bb      	ldr	r3, [r7, #8]
 800a5ba:	f023 0201 	bic.w	r2, r3, #1
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	3b04      	subs	r3, #4
 800a5c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a5c8:	4a0c      	ldr	r2, [pc, #48]	; (800a5fc <pxPortInitialiseStack+0x64>)
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	3b14      	subs	r3, #20
 800a5d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a5d4:	687a      	ldr	r2, [r7, #4]
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	3b04      	subs	r3, #4
 800a5de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	f06f 0202 	mvn.w	r2, #2
 800a5e6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	3b20      	subs	r3, #32
 800a5ec:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a5ee:	68fb      	ldr	r3, [r7, #12]
}
 800a5f0:	4618      	mov	r0, r3
 800a5f2:	3714      	adds	r7, #20
 800a5f4:	46bd      	mov	sp, r7
 800a5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fa:	4770      	bx	lr
 800a5fc:	0800a601 	.word	0x0800a601

0800a600 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a600:	b480      	push	{r7}
 800a602:	b085      	sub	sp, #20
 800a604:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a606:	2300      	movs	r3, #0
 800a608:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a60a:	4b11      	ldr	r3, [pc, #68]	; (800a650 <prvTaskExitError+0x50>)
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a612:	d009      	beq.n	800a628 <prvTaskExitError+0x28>
 800a614:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a618:	f383 8811 	msr	BASEPRI, r3
 800a61c:	f3bf 8f6f 	isb	sy
 800a620:	f3bf 8f4f 	dsb	sy
 800a624:	60fb      	str	r3, [r7, #12]
 800a626:	e7fe      	b.n	800a626 <prvTaskExitError+0x26>
 800a628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a62c:	f383 8811 	msr	BASEPRI, r3
 800a630:	f3bf 8f6f 	isb	sy
 800a634:	f3bf 8f4f 	dsb	sy
 800a638:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a63a:	bf00      	nop
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d0fc      	beq.n	800a63c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a642:	bf00      	nop
 800a644:	3714      	adds	r7, #20
 800a646:	46bd      	mov	sp, r7
 800a648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64c:	4770      	bx	lr
 800a64e:	bf00      	nop
 800a650:	20000028 	.word	0x20000028
	...

0800a660 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a660:	4b07      	ldr	r3, [pc, #28]	; (800a680 <pxCurrentTCBConst2>)
 800a662:	6819      	ldr	r1, [r3, #0]
 800a664:	6808      	ldr	r0, [r1, #0]
 800a666:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a66a:	f380 8809 	msr	PSP, r0
 800a66e:	f3bf 8f6f 	isb	sy
 800a672:	f04f 0000 	mov.w	r0, #0
 800a676:	f380 8811 	msr	BASEPRI, r0
 800a67a:	4770      	bx	lr
 800a67c:	f3af 8000 	nop.w

0800a680 <pxCurrentTCBConst2>:
 800a680:	200000c0 	.word	0x200000c0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a684:	bf00      	nop
 800a686:	bf00      	nop

0800a688 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a688:	4808      	ldr	r0, [pc, #32]	; (800a6ac <prvPortStartFirstTask+0x24>)
 800a68a:	6800      	ldr	r0, [r0, #0]
 800a68c:	6800      	ldr	r0, [r0, #0]
 800a68e:	f380 8808 	msr	MSP, r0
 800a692:	f04f 0000 	mov.w	r0, #0
 800a696:	f380 8814 	msr	CONTROL, r0
 800a69a:	b662      	cpsie	i
 800a69c:	b661      	cpsie	f
 800a69e:	f3bf 8f4f 	dsb	sy
 800a6a2:	f3bf 8f6f 	isb	sy
 800a6a6:	df00      	svc	0
 800a6a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a6aa:	bf00      	nop
 800a6ac:	e000ed08 	.word	0xe000ed08

0800a6b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a6b0:	b580      	push	{r7, lr}
 800a6b2:	b086      	sub	sp, #24
 800a6b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a6b6:	4b44      	ldr	r3, [pc, #272]	; (800a7c8 <xPortStartScheduler+0x118>)
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	4a44      	ldr	r2, [pc, #272]	; (800a7cc <xPortStartScheduler+0x11c>)
 800a6bc:	4293      	cmp	r3, r2
 800a6be:	d109      	bne.n	800a6d4 <xPortStartScheduler+0x24>
 800a6c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6c4:	f383 8811 	msr	BASEPRI, r3
 800a6c8:	f3bf 8f6f 	isb	sy
 800a6cc:	f3bf 8f4f 	dsb	sy
 800a6d0:	613b      	str	r3, [r7, #16]
 800a6d2:	e7fe      	b.n	800a6d2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a6d4:	4b3c      	ldr	r3, [pc, #240]	; (800a7c8 <xPortStartScheduler+0x118>)
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	4a3d      	ldr	r2, [pc, #244]	; (800a7d0 <xPortStartScheduler+0x120>)
 800a6da:	4293      	cmp	r3, r2
 800a6dc:	d109      	bne.n	800a6f2 <xPortStartScheduler+0x42>
 800a6de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6e2:	f383 8811 	msr	BASEPRI, r3
 800a6e6:	f3bf 8f6f 	isb	sy
 800a6ea:	f3bf 8f4f 	dsb	sy
 800a6ee:	60fb      	str	r3, [r7, #12]
 800a6f0:	e7fe      	b.n	800a6f0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a6f2:	4b38      	ldr	r3, [pc, #224]	; (800a7d4 <xPortStartScheduler+0x124>)
 800a6f4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a6f6:	697b      	ldr	r3, [r7, #20]
 800a6f8:	781b      	ldrb	r3, [r3, #0]
 800a6fa:	b2db      	uxtb	r3, r3
 800a6fc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a6fe:	697b      	ldr	r3, [r7, #20]
 800a700:	22ff      	movs	r2, #255	; 0xff
 800a702:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a704:	697b      	ldr	r3, [r7, #20]
 800a706:	781b      	ldrb	r3, [r3, #0]
 800a708:	b2db      	uxtb	r3, r3
 800a70a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a70c:	78fb      	ldrb	r3, [r7, #3]
 800a70e:	b2db      	uxtb	r3, r3
 800a710:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a714:	b2da      	uxtb	r2, r3
 800a716:	4b30      	ldr	r3, [pc, #192]	; (800a7d8 <xPortStartScheduler+0x128>)
 800a718:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a71a:	4b30      	ldr	r3, [pc, #192]	; (800a7dc <xPortStartScheduler+0x12c>)
 800a71c:	2207      	movs	r2, #7
 800a71e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a720:	e009      	b.n	800a736 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800a722:	4b2e      	ldr	r3, [pc, #184]	; (800a7dc <xPortStartScheduler+0x12c>)
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	3b01      	subs	r3, #1
 800a728:	4a2c      	ldr	r2, [pc, #176]	; (800a7dc <xPortStartScheduler+0x12c>)
 800a72a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a72c:	78fb      	ldrb	r3, [r7, #3]
 800a72e:	b2db      	uxtb	r3, r3
 800a730:	005b      	lsls	r3, r3, #1
 800a732:	b2db      	uxtb	r3, r3
 800a734:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a736:	78fb      	ldrb	r3, [r7, #3]
 800a738:	b2db      	uxtb	r3, r3
 800a73a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a73e:	2b80      	cmp	r3, #128	; 0x80
 800a740:	d0ef      	beq.n	800a722 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a742:	4b26      	ldr	r3, [pc, #152]	; (800a7dc <xPortStartScheduler+0x12c>)
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	f1c3 0307 	rsb	r3, r3, #7
 800a74a:	2b04      	cmp	r3, #4
 800a74c:	d009      	beq.n	800a762 <xPortStartScheduler+0xb2>
 800a74e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a752:	f383 8811 	msr	BASEPRI, r3
 800a756:	f3bf 8f6f 	isb	sy
 800a75a:	f3bf 8f4f 	dsb	sy
 800a75e:	60bb      	str	r3, [r7, #8]
 800a760:	e7fe      	b.n	800a760 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a762:	4b1e      	ldr	r3, [pc, #120]	; (800a7dc <xPortStartScheduler+0x12c>)
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	021b      	lsls	r3, r3, #8
 800a768:	4a1c      	ldr	r2, [pc, #112]	; (800a7dc <xPortStartScheduler+0x12c>)
 800a76a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a76c:	4b1b      	ldr	r3, [pc, #108]	; (800a7dc <xPortStartScheduler+0x12c>)
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a774:	4a19      	ldr	r2, [pc, #100]	; (800a7dc <xPortStartScheduler+0x12c>)
 800a776:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	b2da      	uxtb	r2, r3
 800a77c:	697b      	ldr	r3, [r7, #20]
 800a77e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a780:	4b17      	ldr	r3, [pc, #92]	; (800a7e0 <xPortStartScheduler+0x130>)
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	4a16      	ldr	r2, [pc, #88]	; (800a7e0 <xPortStartScheduler+0x130>)
 800a786:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a78a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a78c:	4b14      	ldr	r3, [pc, #80]	; (800a7e0 <xPortStartScheduler+0x130>)
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	4a13      	ldr	r2, [pc, #76]	; (800a7e0 <xPortStartScheduler+0x130>)
 800a792:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a796:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a798:	f000 f8d6 	bl	800a948 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a79c:	4b11      	ldr	r3, [pc, #68]	; (800a7e4 <xPortStartScheduler+0x134>)
 800a79e:	2200      	movs	r2, #0
 800a7a0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a7a2:	f000 f8f5 	bl	800a990 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a7a6:	4b10      	ldr	r3, [pc, #64]	; (800a7e8 <xPortStartScheduler+0x138>)
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	4a0f      	ldr	r2, [pc, #60]	; (800a7e8 <xPortStartScheduler+0x138>)
 800a7ac:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a7b0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a7b2:	f7ff ff69 	bl	800a688 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a7b6:	f7ff fb85 	bl	8009ec4 <vTaskSwitchContext>
	prvTaskExitError();
 800a7ba:	f7ff ff21 	bl	800a600 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a7be:	2300      	movs	r3, #0
}
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	3718      	adds	r7, #24
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	bd80      	pop	{r7, pc}
 800a7c8:	e000ed00 	.word	0xe000ed00
 800a7cc:	410fc271 	.word	0x410fc271
 800a7d0:	410fc270 	.word	0x410fc270
 800a7d4:	e000e400 	.word	0xe000e400
 800a7d8:	200001ec 	.word	0x200001ec
 800a7dc:	200001f0 	.word	0x200001f0
 800a7e0:	e000ed20 	.word	0xe000ed20
 800a7e4:	20000028 	.word	0x20000028
 800a7e8:	e000ef34 	.word	0xe000ef34

0800a7ec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a7ec:	b480      	push	{r7}
 800a7ee:	b083      	sub	sp, #12
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7f6:	f383 8811 	msr	BASEPRI, r3
 800a7fa:	f3bf 8f6f 	isb	sy
 800a7fe:	f3bf 8f4f 	dsb	sy
 800a802:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a804:	4b0e      	ldr	r3, [pc, #56]	; (800a840 <vPortEnterCritical+0x54>)
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	3301      	adds	r3, #1
 800a80a:	4a0d      	ldr	r2, [pc, #52]	; (800a840 <vPortEnterCritical+0x54>)
 800a80c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a80e:	4b0c      	ldr	r3, [pc, #48]	; (800a840 <vPortEnterCritical+0x54>)
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	2b01      	cmp	r3, #1
 800a814:	d10e      	bne.n	800a834 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a816:	4b0b      	ldr	r3, [pc, #44]	; (800a844 <vPortEnterCritical+0x58>)
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	b2db      	uxtb	r3, r3
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d009      	beq.n	800a834 <vPortEnterCritical+0x48>
 800a820:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a824:	f383 8811 	msr	BASEPRI, r3
 800a828:	f3bf 8f6f 	isb	sy
 800a82c:	f3bf 8f4f 	dsb	sy
 800a830:	603b      	str	r3, [r7, #0]
 800a832:	e7fe      	b.n	800a832 <vPortEnterCritical+0x46>
	}
}
 800a834:	bf00      	nop
 800a836:	370c      	adds	r7, #12
 800a838:	46bd      	mov	sp, r7
 800a83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a83e:	4770      	bx	lr
 800a840:	20000028 	.word	0x20000028
 800a844:	e000ed04 	.word	0xe000ed04

0800a848 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a848:	b480      	push	{r7}
 800a84a:	b083      	sub	sp, #12
 800a84c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a84e:	4b11      	ldr	r3, [pc, #68]	; (800a894 <vPortExitCritical+0x4c>)
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	2b00      	cmp	r3, #0
 800a854:	d109      	bne.n	800a86a <vPortExitCritical+0x22>
 800a856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a85a:	f383 8811 	msr	BASEPRI, r3
 800a85e:	f3bf 8f6f 	isb	sy
 800a862:	f3bf 8f4f 	dsb	sy
 800a866:	607b      	str	r3, [r7, #4]
 800a868:	e7fe      	b.n	800a868 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800a86a:	4b0a      	ldr	r3, [pc, #40]	; (800a894 <vPortExitCritical+0x4c>)
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	3b01      	subs	r3, #1
 800a870:	4a08      	ldr	r2, [pc, #32]	; (800a894 <vPortExitCritical+0x4c>)
 800a872:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a874:	4b07      	ldr	r3, [pc, #28]	; (800a894 <vPortExitCritical+0x4c>)
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d104      	bne.n	800a886 <vPortExitCritical+0x3e>
 800a87c:	2300      	movs	r3, #0
 800a87e:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a880:	683b      	ldr	r3, [r7, #0]
 800a882:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800a886:	bf00      	nop
 800a888:	370c      	adds	r7, #12
 800a88a:	46bd      	mov	sp, r7
 800a88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a890:	4770      	bx	lr
 800a892:	bf00      	nop
 800a894:	20000028 	.word	0x20000028
	...

0800a8a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a8a0:	f3ef 8009 	mrs	r0, PSP
 800a8a4:	f3bf 8f6f 	isb	sy
 800a8a8:	4b15      	ldr	r3, [pc, #84]	; (800a900 <pxCurrentTCBConst>)
 800a8aa:	681a      	ldr	r2, [r3, #0]
 800a8ac:	f01e 0f10 	tst.w	lr, #16
 800a8b0:	bf08      	it	eq
 800a8b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a8b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8ba:	6010      	str	r0, [r2, #0]
 800a8bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a8c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a8c4:	f380 8811 	msr	BASEPRI, r0
 800a8c8:	f3bf 8f4f 	dsb	sy
 800a8cc:	f3bf 8f6f 	isb	sy
 800a8d0:	f7ff faf8 	bl	8009ec4 <vTaskSwitchContext>
 800a8d4:	f04f 0000 	mov.w	r0, #0
 800a8d8:	f380 8811 	msr	BASEPRI, r0
 800a8dc:	bc09      	pop	{r0, r3}
 800a8de:	6819      	ldr	r1, [r3, #0]
 800a8e0:	6808      	ldr	r0, [r1, #0]
 800a8e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8e6:	f01e 0f10 	tst.w	lr, #16
 800a8ea:	bf08      	it	eq
 800a8ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a8f0:	f380 8809 	msr	PSP, r0
 800a8f4:	f3bf 8f6f 	isb	sy
 800a8f8:	4770      	bx	lr
 800a8fa:	bf00      	nop
 800a8fc:	f3af 8000 	nop.w

0800a900 <pxCurrentTCBConst>:
 800a900:	200000c0 	.word	0x200000c0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a904:	bf00      	nop
 800a906:	bf00      	nop

0800a908 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a908:	b580      	push	{r7, lr}
 800a90a:	b082      	sub	sp, #8
 800a90c:	af00      	add	r7, sp, #0
	__asm volatile
 800a90e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a912:	f383 8811 	msr	BASEPRI, r3
 800a916:	f3bf 8f6f 	isb	sy
 800a91a:	f3bf 8f4f 	dsb	sy
 800a91e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a920:	f7ff fa14 	bl	8009d4c <xTaskIncrementTick>
 800a924:	4603      	mov	r3, r0
 800a926:	2b00      	cmp	r3, #0
 800a928:	d003      	beq.n	800a932 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a92a:	4b06      	ldr	r3, [pc, #24]	; (800a944 <SysTick_Handler+0x3c>)
 800a92c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a930:	601a      	str	r2, [r3, #0]
 800a932:	2300      	movs	r3, #0
 800a934:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a936:	683b      	ldr	r3, [r7, #0]
 800a938:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800a93c:	bf00      	nop
 800a93e:	3708      	adds	r7, #8
 800a940:	46bd      	mov	sp, r7
 800a942:	bd80      	pop	{r7, pc}
 800a944:	e000ed04 	.word	0xe000ed04

0800a948 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a948:	b480      	push	{r7}
 800a94a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a94c:	4b0b      	ldr	r3, [pc, #44]	; (800a97c <vPortSetupTimerInterrupt+0x34>)
 800a94e:	2200      	movs	r2, #0
 800a950:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a952:	4b0b      	ldr	r3, [pc, #44]	; (800a980 <vPortSetupTimerInterrupt+0x38>)
 800a954:	2200      	movs	r2, #0
 800a956:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a958:	4b0a      	ldr	r3, [pc, #40]	; (800a984 <vPortSetupTimerInterrupt+0x3c>)
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	4a0a      	ldr	r2, [pc, #40]	; (800a988 <vPortSetupTimerInterrupt+0x40>)
 800a95e:	fba2 2303 	umull	r2, r3, r2, r3
 800a962:	099b      	lsrs	r3, r3, #6
 800a964:	4a09      	ldr	r2, [pc, #36]	; (800a98c <vPortSetupTimerInterrupt+0x44>)
 800a966:	3b01      	subs	r3, #1
 800a968:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a96a:	4b04      	ldr	r3, [pc, #16]	; (800a97c <vPortSetupTimerInterrupt+0x34>)
 800a96c:	2207      	movs	r2, #7
 800a96e:	601a      	str	r2, [r3, #0]
}
 800a970:	bf00      	nop
 800a972:	46bd      	mov	sp, r7
 800a974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a978:	4770      	bx	lr
 800a97a:	bf00      	nop
 800a97c:	e000e010 	.word	0xe000e010
 800a980:	e000e018 	.word	0xe000e018
 800a984:	20000038 	.word	0x20000038
 800a988:	10624dd3 	.word	0x10624dd3
 800a98c:	e000e014 	.word	0xe000e014

0800a990 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a990:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a9a0 <vPortEnableVFP+0x10>
 800a994:	6801      	ldr	r1, [r0, #0]
 800a996:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a99a:	6001      	str	r1, [r0, #0]
 800a99c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a99e:	bf00      	nop
 800a9a0:	e000ed88 	.word	0xe000ed88

0800a9a4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a9a4:	b480      	push	{r7}
 800a9a6:	b085      	sub	sp, #20
 800a9a8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a9aa:	f3ef 8305 	mrs	r3, IPSR
 800a9ae:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	2b0f      	cmp	r3, #15
 800a9b4:	d913      	bls.n	800a9de <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a9b6:	4a16      	ldr	r2, [pc, #88]	; (800aa10 <vPortValidateInterruptPriority+0x6c>)
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	4413      	add	r3, r2
 800a9bc:	781b      	ldrb	r3, [r3, #0]
 800a9be:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a9c0:	4b14      	ldr	r3, [pc, #80]	; (800aa14 <vPortValidateInterruptPriority+0x70>)
 800a9c2:	781b      	ldrb	r3, [r3, #0]
 800a9c4:	7afa      	ldrb	r2, [r7, #11]
 800a9c6:	429a      	cmp	r2, r3
 800a9c8:	d209      	bcs.n	800a9de <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800a9ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9ce:	f383 8811 	msr	BASEPRI, r3
 800a9d2:	f3bf 8f6f 	isb	sy
 800a9d6:	f3bf 8f4f 	dsb	sy
 800a9da:	607b      	str	r3, [r7, #4]
 800a9dc:	e7fe      	b.n	800a9dc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a9de:	4b0e      	ldr	r3, [pc, #56]	; (800aa18 <vPortValidateInterruptPriority+0x74>)
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a9e6:	4b0d      	ldr	r3, [pc, #52]	; (800aa1c <vPortValidateInterruptPriority+0x78>)
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	429a      	cmp	r2, r3
 800a9ec:	d909      	bls.n	800aa02 <vPortValidateInterruptPriority+0x5e>
 800a9ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9f2:	f383 8811 	msr	BASEPRI, r3
 800a9f6:	f3bf 8f6f 	isb	sy
 800a9fa:	f3bf 8f4f 	dsb	sy
 800a9fe:	603b      	str	r3, [r7, #0]
 800aa00:	e7fe      	b.n	800aa00 <vPortValidateInterruptPriority+0x5c>
	}
 800aa02:	bf00      	nop
 800aa04:	3714      	adds	r7, #20
 800aa06:	46bd      	mov	sp, r7
 800aa08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa0c:	4770      	bx	lr
 800aa0e:	bf00      	nop
 800aa10:	e000e3f0 	.word	0xe000e3f0
 800aa14:	200001ec 	.word	0x200001ec
 800aa18:	e000ed0c 	.word	0xe000ed0c
 800aa1c:	200001f0 	.word	0x200001f0

0800aa20 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800aa20:	b580      	push	{r7, lr}
 800aa22:	b08a      	sub	sp, #40	; 0x28
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800aa28:	2300      	movs	r3, #0
 800aa2a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800aa2c:	f7ff f8e4 	bl	8009bf8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800aa30:	4b59      	ldr	r3, [pc, #356]	; (800ab98 <pvPortMalloc+0x178>)
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d101      	bne.n	800aa3c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800aa38:	f000 f910 	bl	800ac5c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800aa3c:	4b57      	ldr	r3, [pc, #348]	; (800ab9c <pvPortMalloc+0x17c>)
 800aa3e:	681a      	ldr	r2, [r3, #0]
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	4013      	ands	r3, r2
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	f040 808c 	bne.w	800ab62 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d01c      	beq.n	800aa8a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800aa50:	2208      	movs	r2, #8
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	4413      	add	r3, r2
 800aa56:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	f003 0307 	and.w	r3, r3, #7
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d013      	beq.n	800aa8a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	f023 0307 	bic.w	r3, r3, #7
 800aa68:	3308      	adds	r3, #8
 800aa6a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	f003 0307 	and.w	r3, r3, #7
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d009      	beq.n	800aa8a <pvPortMalloc+0x6a>
 800aa76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa7a:	f383 8811 	msr	BASEPRI, r3
 800aa7e:	f3bf 8f6f 	isb	sy
 800aa82:	f3bf 8f4f 	dsb	sy
 800aa86:	617b      	str	r3, [r7, #20]
 800aa88:	e7fe      	b.n	800aa88 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d068      	beq.n	800ab62 <pvPortMalloc+0x142>
 800aa90:	4b43      	ldr	r3, [pc, #268]	; (800aba0 <pvPortMalloc+0x180>)
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	687a      	ldr	r2, [r7, #4]
 800aa96:	429a      	cmp	r2, r3
 800aa98:	d863      	bhi.n	800ab62 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800aa9a:	4b42      	ldr	r3, [pc, #264]	; (800aba4 <pvPortMalloc+0x184>)
 800aa9c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800aa9e:	4b41      	ldr	r3, [pc, #260]	; (800aba4 <pvPortMalloc+0x184>)
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800aaa4:	e004      	b.n	800aab0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800aaa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaa8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800aaaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800aab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aab2:	685b      	ldr	r3, [r3, #4]
 800aab4:	687a      	ldr	r2, [r7, #4]
 800aab6:	429a      	cmp	r2, r3
 800aab8:	d903      	bls.n	800aac2 <pvPortMalloc+0xa2>
 800aaba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d1f1      	bne.n	800aaa6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800aac2:	4b35      	ldr	r3, [pc, #212]	; (800ab98 <pvPortMalloc+0x178>)
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aac8:	429a      	cmp	r2, r3
 800aaca:	d04a      	beq.n	800ab62 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800aacc:	6a3b      	ldr	r3, [r7, #32]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	2208      	movs	r2, #8
 800aad2:	4413      	add	r3, r2
 800aad4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800aad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aad8:	681a      	ldr	r2, [r3, #0]
 800aada:	6a3b      	ldr	r3, [r7, #32]
 800aadc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800aade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aae0:	685a      	ldr	r2, [r3, #4]
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	1ad2      	subs	r2, r2, r3
 800aae6:	2308      	movs	r3, #8
 800aae8:	005b      	lsls	r3, r3, #1
 800aaea:	429a      	cmp	r2, r3
 800aaec:	d91e      	bls.n	800ab2c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800aaee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	4413      	add	r3, r2
 800aaf4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800aaf6:	69bb      	ldr	r3, [r7, #24]
 800aaf8:	f003 0307 	and.w	r3, r3, #7
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d009      	beq.n	800ab14 <pvPortMalloc+0xf4>
 800ab00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab04:	f383 8811 	msr	BASEPRI, r3
 800ab08:	f3bf 8f6f 	isb	sy
 800ab0c:	f3bf 8f4f 	dsb	sy
 800ab10:	613b      	str	r3, [r7, #16]
 800ab12:	e7fe      	b.n	800ab12 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ab14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab16:	685a      	ldr	r2, [r3, #4]
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	1ad2      	subs	r2, r2, r3
 800ab1c:	69bb      	ldr	r3, [r7, #24]
 800ab1e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ab20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab22:	687a      	ldr	r2, [r7, #4]
 800ab24:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ab26:	69b8      	ldr	r0, [r7, #24]
 800ab28:	f000 f8fa 	bl	800ad20 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ab2c:	4b1c      	ldr	r3, [pc, #112]	; (800aba0 <pvPortMalloc+0x180>)
 800ab2e:	681a      	ldr	r2, [r3, #0]
 800ab30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab32:	685b      	ldr	r3, [r3, #4]
 800ab34:	1ad3      	subs	r3, r2, r3
 800ab36:	4a1a      	ldr	r2, [pc, #104]	; (800aba0 <pvPortMalloc+0x180>)
 800ab38:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ab3a:	4b19      	ldr	r3, [pc, #100]	; (800aba0 <pvPortMalloc+0x180>)
 800ab3c:	681a      	ldr	r2, [r3, #0]
 800ab3e:	4b1a      	ldr	r3, [pc, #104]	; (800aba8 <pvPortMalloc+0x188>)
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	429a      	cmp	r2, r3
 800ab44:	d203      	bcs.n	800ab4e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ab46:	4b16      	ldr	r3, [pc, #88]	; (800aba0 <pvPortMalloc+0x180>)
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	4a17      	ldr	r2, [pc, #92]	; (800aba8 <pvPortMalloc+0x188>)
 800ab4c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ab4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab50:	685a      	ldr	r2, [r3, #4]
 800ab52:	4b12      	ldr	r3, [pc, #72]	; (800ab9c <pvPortMalloc+0x17c>)
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	431a      	orrs	r2, r3
 800ab58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab5a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ab5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab5e:	2200      	movs	r2, #0
 800ab60:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ab62:	f7ff f857 	bl	8009c14 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800ab66:	69fb      	ldr	r3, [r7, #28]
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d101      	bne.n	800ab70 <pvPortMalloc+0x150>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800ab6c:	f000 f944 	bl	800adf8 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ab70:	69fb      	ldr	r3, [r7, #28]
 800ab72:	f003 0307 	and.w	r3, r3, #7
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d009      	beq.n	800ab8e <pvPortMalloc+0x16e>
 800ab7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab7e:	f383 8811 	msr	BASEPRI, r3
 800ab82:	f3bf 8f6f 	isb	sy
 800ab86:	f3bf 8f4f 	dsb	sy
 800ab8a:	60fb      	str	r3, [r7, #12]
 800ab8c:	e7fe      	b.n	800ab8c <pvPortMalloc+0x16c>
	return pvReturn;
 800ab8e:	69fb      	ldr	r3, [r7, #28]
}
 800ab90:	4618      	mov	r0, r3
 800ab92:	3728      	adds	r7, #40	; 0x28
 800ab94:	46bd      	mov	sp, r7
 800ab96:	bd80      	pop	{r7, pc}
 800ab98:	200081fc 	.word	0x200081fc
 800ab9c:	20008208 	.word	0x20008208
 800aba0:	20008200 	.word	0x20008200
 800aba4:	200081f4 	.word	0x200081f4
 800aba8:	20008204 	.word	0x20008204

0800abac <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800abac:	b580      	push	{r7, lr}
 800abae:	b086      	sub	sp, #24
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d046      	beq.n	800ac4c <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800abbe:	2308      	movs	r3, #8
 800abc0:	425b      	negs	r3, r3
 800abc2:	697a      	ldr	r2, [r7, #20]
 800abc4:	4413      	add	r3, r2
 800abc6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800abc8:	697b      	ldr	r3, [r7, #20]
 800abca:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800abcc:	693b      	ldr	r3, [r7, #16]
 800abce:	685a      	ldr	r2, [r3, #4]
 800abd0:	4b20      	ldr	r3, [pc, #128]	; (800ac54 <vPortFree+0xa8>)
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	4013      	ands	r3, r2
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d109      	bne.n	800abee <vPortFree+0x42>
 800abda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abde:	f383 8811 	msr	BASEPRI, r3
 800abe2:	f3bf 8f6f 	isb	sy
 800abe6:	f3bf 8f4f 	dsb	sy
 800abea:	60fb      	str	r3, [r7, #12]
 800abec:	e7fe      	b.n	800abec <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800abee:	693b      	ldr	r3, [r7, #16]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d009      	beq.n	800ac0a <vPortFree+0x5e>
 800abf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abfa:	f383 8811 	msr	BASEPRI, r3
 800abfe:	f3bf 8f6f 	isb	sy
 800ac02:	f3bf 8f4f 	dsb	sy
 800ac06:	60bb      	str	r3, [r7, #8]
 800ac08:	e7fe      	b.n	800ac08 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ac0a:	693b      	ldr	r3, [r7, #16]
 800ac0c:	685a      	ldr	r2, [r3, #4]
 800ac0e:	4b11      	ldr	r3, [pc, #68]	; (800ac54 <vPortFree+0xa8>)
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	4013      	ands	r3, r2
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d019      	beq.n	800ac4c <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ac18:	693b      	ldr	r3, [r7, #16]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d115      	bne.n	800ac4c <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ac20:	693b      	ldr	r3, [r7, #16]
 800ac22:	685a      	ldr	r2, [r3, #4]
 800ac24:	4b0b      	ldr	r3, [pc, #44]	; (800ac54 <vPortFree+0xa8>)
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	43db      	mvns	r3, r3
 800ac2a:	401a      	ands	r2, r3
 800ac2c:	693b      	ldr	r3, [r7, #16]
 800ac2e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ac30:	f7fe ffe2 	bl	8009bf8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ac34:	693b      	ldr	r3, [r7, #16]
 800ac36:	685a      	ldr	r2, [r3, #4]
 800ac38:	4b07      	ldr	r3, [pc, #28]	; (800ac58 <vPortFree+0xac>)
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	4413      	add	r3, r2
 800ac3e:	4a06      	ldr	r2, [pc, #24]	; (800ac58 <vPortFree+0xac>)
 800ac40:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ac42:	6938      	ldr	r0, [r7, #16]
 800ac44:	f000 f86c 	bl	800ad20 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800ac48:	f7fe ffe4 	bl	8009c14 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ac4c:	bf00      	nop
 800ac4e:	3718      	adds	r7, #24
 800ac50:	46bd      	mov	sp, r7
 800ac52:	bd80      	pop	{r7, pc}
 800ac54:	20008208 	.word	0x20008208
 800ac58:	20008200 	.word	0x20008200

0800ac5c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ac5c:	b480      	push	{r7}
 800ac5e:	b085      	sub	sp, #20
 800ac60:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ac62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ac66:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ac68:	4b27      	ldr	r3, [pc, #156]	; (800ad08 <prvHeapInit+0xac>)
 800ac6a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	f003 0307 	and.w	r3, r3, #7
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d00c      	beq.n	800ac90 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	3307      	adds	r3, #7
 800ac7a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	f023 0307 	bic.w	r3, r3, #7
 800ac82:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ac84:	68ba      	ldr	r2, [r7, #8]
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	1ad3      	subs	r3, r2, r3
 800ac8a:	4a1f      	ldr	r2, [pc, #124]	; (800ad08 <prvHeapInit+0xac>)
 800ac8c:	4413      	add	r3, r2
 800ac8e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ac94:	4a1d      	ldr	r2, [pc, #116]	; (800ad0c <prvHeapInit+0xb0>)
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ac9a:	4b1c      	ldr	r3, [pc, #112]	; (800ad0c <prvHeapInit+0xb0>)
 800ac9c:	2200      	movs	r2, #0
 800ac9e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	68ba      	ldr	r2, [r7, #8]
 800aca4:	4413      	add	r3, r2
 800aca6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800aca8:	2208      	movs	r2, #8
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	1a9b      	subs	r3, r3, r2
 800acae:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	f023 0307 	bic.w	r3, r3, #7
 800acb6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	4a15      	ldr	r2, [pc, #84]	; (800ad10 <prvHeapInit+0xb4>)
 800acbc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800acbe:	4b14      	ldr	r3, [pc, #80]	; (800ad10 <prvHeapInit+0xb4>)
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	2200      	movs	r2, #0
 800acc4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800acc6:	4b12      	ldr	r3, [pc, #72]	; (800ad10 <prvHeapInit+0xb4>)
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	2200      	movs	r2, #0
 800accc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800acd2:	683b      	ldr	r3, [r7, #0]
 800acd4:	68fa      	ldr	r2, [r7, #12]
 800acd6:	1ad2      	subs	r2, r2, r3
 800acd8:	683b      	ldr	r3, [r7, #0]
 800acda:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800acdc:	4b0c      	ldr	r3, [pc, #48]	; (800ad10 <prvHeapInit+0xb4>)
 800acde:	681a      	ldr	r2, [r3, #0]
 800ace0:	683b      	ldr	r3, [r7, #0]
 800ace2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ace4:	683b      	ldr	r3, [r7, #0]
 800ace6:	685b      	ldr	r3, [r3, #4]
 800ace8:	4a0a      	ldr	r2, [pc, #40]	; (800ad14 <prvHeapInit+0xb8>)
 800acea:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800acec:	683b      	ldr	r3, [r7, #0]
 800acee:	685b      	ldr	r3, [r3, #4]
 800acf0:	4a09      	ldr	r2, [pc, #36]	; (800ad18 <prvHeapInit+0xbc>)
 800acf2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800acf4:	4b09      	ldr	r3, [pc, #36]	; (800ad1c <prvHeapInit+0xc0>)
 800acf6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800acfa:	601a      	str	r2, [r3, #0]
}
 800acfc:	bf00      	nop
 800acfe:	3714      	adds	r7, #20
 800ad00:	46bd      	mov	sp, r7
 800ad02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad06:	4770      	bx	lr
 800ad08:	200001f4 	.word	0x200001f4
 800ad0c:	200081f4 	.word	0x200081f4
 800ad10:	200081fc 	.word	0x200081fc
 800ad14:	20008204 	.word	0x20008204
 800ad18:	20008200 	.word	0x20008200
 800ad1c:	20008208 	.word	0x20008208

0800ad20 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ad20:	b480      	push	{r7}
 800ad22:	b085      	sub	sp, #20
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ad28:	4b28      	ldr	r3, [pc, #160]	; (800adcc <prvInsertBlockIntoFreeList+0xac>)
 800ad2a:	60fb      	str	r3, [r7, #12]
 800ad2c:	e002      	b.n	800ad34 <prvInsertBlockIntoFreeList+0x14>
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	60fb      	str	r3, [r7, #12]
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	687a      	ldr	r2, [r7, #4]
 800ad3a:	429a      	cmp	r2, r3
 800ad3c:	d8f7      	bhi.n	800ad2e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	685b      	ldr	r3, [r3, #4]
 800ad46:	68ba      	ldr	r2, [r7, #8]
 800ad48:	4413      	add	r3, r2
 800ad4a:	687a      	ldr	r2, [r7, #4]
 800ad4c:	429a      	cmp	r2, r3
 800ad4e:	d108      	bne.n	800ad62 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	685a      	ldr	r2, [r3, #4]
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	685b      	ldr	r3, [r3, #4]
 800ad58:	441a      	add	r2, r3
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	685b      	ldr	r3, [r3, #4]
 800ad6a:	68ba      	ldr	r2, [r7, #8]
 800ad6c:	441a      	add	r2, r3
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	429a      	cmp	r2, r3
 800ad74:	d118      	bne.n	800ada8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	681a      	ldr	r2, [r3, #0]
 800ad7a:	4b15      	ldr	r3, [pc, #84]	; (800add0 <prvInsertBlockIntoFreeList+0xb0>)
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	429a      	cmp	r2, r3
 800ad80:	d00d      	beq.n	800ad9e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	685a      	ldr	r2, [r3, #4]
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	685b      	ldr	r3, [r3, #4]
 800ad8c:	441a      	add	r2, r3
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	681a      	ldr	r2, [r3, #0]
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	601a      	str	r2, [r3, #0]
 800ad9c:	e008      	b.n	800adb0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ad9e:	4b0c      	ldr	r3, [pc, #48]	; (800add0 <prvInsertBlockIntoFreeList+0xb0>)
 800ada0:	681a      	ldr	r2, [r3, #0]
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	601a      	str	r2, [r3, #0]
 800ada6:	e003      	b.n	800adb0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	681a      	ldr	r2, [r3, #0]
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800adb0:	68fa      	ldr	r2, [r7, #12]
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	429a      	cmp	r2, r3
 800adb6:	d002      	beq.n	800adbe <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	687a      	ldr	r2, [r7, #4]
 800adbc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800adbe:	bf00      	nop
 800adc0:	3714      	adds	r7, #20
 800adc2:	46bd      	mov	sp, r7
 800adc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc8:	4770      	bx	lr
 800adca:	bf00      	nop
 800adcc:	200081f4 	.word	0x200081f4
 800add0:	200081fc 	.word	0x200081fc

0800add4 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 800add4:	b480      	push	{r7}
 800add6:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 800add8:	bf00      	nop
 800adda:	46bd      	mov	sp, r7
 800addc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade0:	4770      	bx	lr

0800ade2 <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 800ade2:	b480      	push	{r7}
 800ade4:	b083      	sub	sp, #12
 800ade6:	af00      	add	r7, sp, #0
 800ade8:	6078      	str	r0, [r7, #4]
 800adea:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 800adec:	bf00      	nop
 800adee:	370c      	adds	r7, #12
 800adf0:	46bd      	mov	sp, r7
 800adf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf6:	4770      	bx	lr

0800adf8 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 800adf8:	b480      	push	{r7}
 800adfa:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 800adfc:	bf00      	nop
 800adfe:	46bd      	mov	sp, r7
 800ae00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae04:	4770      	bx	lr
	...

0800ae08 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800ae08:	b480      	push	{r7}
 800ae0a:	b085      	sub	sp, #20
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	60f8      	str	r0, [r7, #12]
 800ae10:	60b9      	str	r1, [r7, #8]
 800ae12:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	4a07      	ldr	r2, [pc, #28]	; (800ae34 <vApplicationGetIdleTaskMemory+0x2c>)
 800ae18:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800ae1a:	68bb      	ldr	r3, [r7, #8]
 800ae1c:	4a06      	ldr	r2, [pc, #24]	; (800ae38 <vApplicationGetIdleTaskMemory+0x30>)
 800ae1e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	2280      	movs	r2, #128	; 0x80
 800ae24:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 800ae26:	bf00      	nop
 800ae28:	3714      	adds	r7, #20
 800ae2a:	46bd      	mov	sp, r7
 800ae2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae30:	4770      	bx	lr
 800ae32:	bf00      	nop
 800ae34:	2000820c 	.word	0x2000820c
 800ae38:	20008264 	.word	0x20008264

0800ae3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800ae3c:	b5b0      	push	{r4, r5, r7, lr}
 800ae3e:	b088      	sub	sp, #32
 800ae40:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800ae42:	f7f5 fb55 	bl	80004f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800ae46:	f000 f82b 	bl	800aea0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800ae4a:	f000 fab3 	bl	800b3b4 <MX_GPIO_Init>
  MX_CRC_Init();
 800ae4e:	f000 f8ab 	bl	800afa8 <MX_CRC_Init>
  MX_DMA2D_Init();
 800ae52:	f000 f8bd 	bl	800afd0 <MX_DMA2D_Init>
  MX_FMC_Init();
 800ae56:	f000 fa5d 	bl	800b314 <MX_FMC_Init>
  MX_I2C3_Init();
 800ae5a:	f000 f8eb 	bl	800b034 <MX_I2C3_Init>
  MX_LTDC_Init();
 800ae5e:	f000 f929 	bl	800b0b4 <MX_LTDC_Init>
  MX_SPI5_Init();
 800ae62:	f000 f9a7 	bl	800b1b4 <MX_SPI5_Init>
  MX_TIM1_Init();
 800ae66:	f000 f9db 	bl	800b220 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 800ae6a:	f000 fa29 	bl	800b2c0 <MX_USART1_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 800ae6e:	4b0a      	ldr	r3, [pc, #40]	; (800ae98 <main+0x5c>)
 800ae70:	1d3c      	adds	r4, r7, #4
 800ae72:	461d      	mov	r5, r3
 800ae74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ae76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ae78:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800ae7c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800ae80:	1d3b      	adds	r3, r7, #4
 800ae82:	2100      	movs	r1, #0
 800ae84:	4618      	mov	r0, r3
 800ae86:	f7fd fdbe 	bl	8008a06 <osThreadCreate>
 800ae8a:	4602      	mov	r2, r0
 800ae8c:	4b03      	ldr	r3, [pc, #12]	; (800ae9c <main+0x60>)
 800ae8e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800ae90:	f7fd fdb2 	bl	80089f8 <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800ae94:	e7fe      	b.n	800ae94 <main+0x58>
 800ae96:	bf00      	nop
 800ae98:	0800ced0 	.word	0x0800ced0
 800ae9c:	2000849c 	.word	0x2000849c

0800aea0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800aea0:	b580      	push	{r7, lr}
 800aea2:	b0a0      	sub	sp, #128	; 0x80
 800aea4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800aea6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800aeaa:	2230      	movs	r2, #48	; 0x30
 800aeac:	2100      	movs	r1, #0
 800aeae:	4618      	mov	r0, r3
 800aeb0:	f001 ff17 	bl	800cce2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800aeb4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800aeb8:	2200      	movs	r2, #0
 800aeba:	601a      	str	r2, [r3, #0]
 800aebc:	605a      	str	r2, [r3, #4]
 800aebe:	609a      	str	r2, [r3, #8]
 800aec0:	60da      	str	r2, [r3, #12]
 800aec2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800aec4:	f107 030c 	add.w	r3, r7, #12
 800aec8:	2230      	movs	r2, #48	; 0x30
 800aeca:	2100      	movs	r1, #0
 800aecc:	4618      	mov	r0, r3
 800aece:	f001 ff08 	bl	800cce2 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800aed2:	2300      	movs	r3, #0
 800aed4:	60bb      	str	r3, [r7, #8]
 800aed6:	4b32      	ldr	r3, [pc, #200]	; (800afa0 <SystemClock_Config+0x100>)
 800aed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aeda:	4a31      	ldr	r2, [pc, #196]	; (800afa0 <SystemClock_Config+0x100>)
 800aedc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aee0:	6413      	str	r3, [r2, #64]	; 0x40
 800aee2:	4b2f      	ldr	r3, [pc, #188]	; (800afa0 <SystemClock_Config+0x100>)
 800aee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aee6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aeea:	60bb      	str	r3, [r7, #8]
 800aeec:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800aeee:	2300      	movs	r3, #0
 800aef0:	607b      	str	r3, [r7, #4]
 800aef2:	4b2c      	ldr	r3, [pc, #176]	; (800afa4 <SystemClock_Config+0x104>)
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800aefa:	4a2a      	ldr	r2, [pc, #168]	; (800afa4 <SystemClock_Config+0x104>)
 800aefc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800af00:	6013      	str	r3, [r2, #0]
 800af02:	4b28      	ldr	r3, [pc, #160]	; (800afa4 <SystemClock_Config+0x104>)
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800af0a:	607b      	str	r3, [r7, #4]
 800af0c:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800af0e:	2301      	movs	r3, #1
 800af10:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800af12:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800af16:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800af18:	2302      	movs	r3, #2
 800af1a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800af1c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800af20:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800af22:	2304      	movs	r3, #4
 800af24:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 72;
 800af26:	2348      	movs	r3, #72	; 0x48
 800af28:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800af2a:	2302      	movs	r3, #2
 800af2c:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800af2e:	2303      	movs	r3, #3
 800af30:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800af32:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800af36:	4618      	mov	r0, r3
 800af38:	f7f8 fce2 	bl	8003900 <HAL_RCC_OscConfig>
 800af3c:	4603      	mov	r3, r0
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d001      	beq.n	800af46 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800af42:	f000 ff25 	bl	800bd90 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800af46:	230f      	movs	r3, #15
 800af48:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800af4a:	2302      	movs	r3, #2
 800af4c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800af4e:	2300      	movs	r3, #0
 800af50:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800af52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800af56:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800af58:	2300      	movs	r3, #0
 800af5a:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800af5c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800af60:	2102      	movs	r1, #2
 800af62:	4618      	mov	r0, r3
 800af64:	f7f8 ff3c 	bl	8003de0 <HAL_RCC_ClockConfig>
 800af68:	4603      	mov	r3, r0
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d001      	beq.n	800af72 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800af6e:	f000 ff0f 	bl	800bd90 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800af72:	2308      	movs	r3, #8
 800af74:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 800af76:	2332      	movs	r3, #50	; 0x32
 800af78:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 800af7a:	2302      	movs	r3, #2
 800af7c:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 800af7e:	2300      	movs	r3, #0
 800af80:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800af82:	f107 030c 	add.w	r3, r7, #12
 800af86:	4618      	mov	r0, r3
 800af88:	f7f9 f94e 	bl	8004228 <HAL_RCCEx_PeriphCLKConfig>
 800af8c:	4603      	mov	r3, r0
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d001      	beq.n	800af96 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 800af92:	f000 fefd 	bl	800bd90 <Error_Handler>
  }
}
 800af96:	bf00      	nop
 800af98:	3780      	adds	r7, #128	; 0x80
 800af9a:	46bd      	mov	sp, r7
 800af9c:	bd80      	pop	{r7, pc}
 800af9e:	bf00      	nop
 800afa0:	40023800 	.word	0x40023800
 800afa4:	40007000 	.word	0x40007000

0800afa8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800afa8:	b580      	push	{r7, lr}
 800afaa:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800afac:	4b06      	ldr	r3, [pc, #24]	; (800afc8 <MX_CRC_Init+0x20>)
 800afae:	4a07      	ldr	r2, [pc, #28]	; (800afcc <MX_CRC_Init+0x24>)
 800afb0:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800afb2:	4805      	ldr	r0, [pc, #20]	; (800afc8 <MX_CRC_Init+0x20>)
 800afb4:	f7f5 fbe2 	bl	800077c <HAL_CRC_Init>
 800afb8:	4603      	mov	r3, r0
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d001      	beq.n	800afc2 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800afbe:	f000 fee7 	bl	800bd90 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800afc2:	bf00      	nop
 800afc4:	bd80      	pop	{r7, pc}
 800afc6:	bf00      	nop
 800afc8:	20008678 	.word	0x20008678
 800afcc:	40023000 	.word	0x40023000

0800afd0 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 800afd0:	b580      	push	{r7, lr}
 800afd2:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 800afd4:	4b15      	ldr	r3, [pc, #84]	; (800b02c <MX_DMA2D_Init+0x5c>)
 800afd6:	4a16      	ldr	r2, [pc, #88]	; (800b030 <MX_DMA2D_Init+0x60>)
 800afd8:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800afda:	4b14      	ldr	r3, [pc, #80]	; (800b02c <MX_DMA2D_Init+0x5c>)
 800afdc:	2200      	movs	r2, #0
 800afde:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 800afe0:	4b12      	ldr	r3, [pc, #72]	; (800b02c <MX_DMA2D_Init+0x5c>)
 800afe2:	2200      	movs	r2, #0
 800afe4:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800afe6:	4b11      	ldr	r3, [pc, #68]	; (800b02c <MX_DMA2D_Init+0x5c>)
 800afe8:	2200      	movs	r2, #0
 800afea:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 800afec:	4b0f      	ldr	r3, [pc, #60]	; (800b02c <MX_DMA2D_Init+0x5c>)
 800afee:	2200      	movs	r2, #0
 800aff0:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800aff2:	4b0e      	ldr	r3, [pc, #56]	; (800b02c <MX_DMA2D_Init+0x5c>)
 800aff4:	2200      	movs	r2, #0
 800aff6:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800aff8:	4b0c      	ldr	r3, [pc, #48]	; (800b02c <MX_DMA2D_Init+0x5c>)
 800affa:	2200      	movs	r2, #0
 800affc:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800affe:	4b0b      	ldr	r3, [pc, #44]	; (800b02c <MX_DMA2D_Init+0x5c>)
 800b000:	2200      	movs	r2, #0
 800b002:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800b004:	4809      	ldr	r0, [pc, #36]	; (800b02c <MX_DMA2D_Init+0x5c>)
 800b006:	f7f5 fc00 	bl	800080a <HAL_DMA2D_Init>
 800b00a:	4603      	mov	r3, r0
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d001      	beq.n	800b014 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 800b010:	f000 febe 	bl	800bd90 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800b014:	2101      	movs	r1, #1
 800b016:	4805      	ldr	r0, [pc, #20]	; (800b02c <MX_DMA2D_Init+0x5c>)
 800b018:	f7f5 fd50 	bl	8000abc <HAL_DMA2D_ConfigLayer>
 800b01c:	4603      	mov	r3, r0
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d001      	beq.n	800b026 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800b022:	f000 feb5 	bl	800bd90 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800b026:	bf00      	nop
 800b028:	bd80      	pop	{r7, pc}
 800b02a:	bf00      	nop
 800b02c:	200087ac 	.word	0x200087ac
 800b030:	4002b000 	.word	0x4002b000

0800b034 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800b034:	b580      	push	{r7, lr}
 800b036:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800b038:	4b1b      	ldr	r3, [pc, #108]	; (800b0a8 <MX_I2C3_Init+0x74>)
 800b03a:	4a1c      	ldr	r2, [pc, #112]	; (800b0ac <MX_I2C3_Init+0x78>)
 800b03c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800b03e:	4b1a      	ldr	r3, [pc, #104]	; (800b0a8 <MX_I2C3_Init+0x74>)
 800b040:	4a1b      	ldr	r2, [pc, #108]	; (800b0b0 <MX_I2C3_Init+0x7c>)
 800b042:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800b044:	4b18      	ldr	r3, [pc, #96]	; (800b0a8 <MX_I2C3_Init+0x74>)
 800b046:	2200      	movs	r2, #0
 800b048:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800b04a:	4b17      	ldr	r3, [pc, #92]	; (800b0a8 <MX_I2C3_Init+0x74>)
 800b04c:	2200      	movs	r2, #0
 800b04e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800b050:	4b15      	ldr	r3, [pc, #84]	; (800b0a8 <MX_I2C3_Init+0x74>)
 800b052:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800b056:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800b058:	4b13      	ldr	r3, [pc, #76]	; (800b0a8 <MX_I2C3_Init+0x74>)
 800b05a:	2200      	movs	r2, #0
 800b05c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800b05e:	4b12      	ldr	r3, [pc, #72]	; (800b0a8 <MX_I2C3_Init+0x74>)
 800b060:	2200      	movs	r2, #0
 800b062:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800b064:	4b10      	ldr	r3, [pc, #64]	; (800b0a8 <MX_I2C3_Init+0x74>)
 800b066:	2200      	movs	r2, #0
 800b068:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800b06a:	4b0f      	ldr	r3, [pc, #60]	; (800b0a8 <MX_I2C3_Init+0x74>)
 800b06c:	2200      	movs	r2, #0
 800b06e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800b070:	480d      	ldr	r0, [pc, #52]	; (800b0a8 <MX_I2C3_Init+0x74>)
 800b072:	f7f7 ff29 	bl	8002ec8 <HAL_I2C_Init>
 800b076:	4603      	mov	r3, r0
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d001      	beq.n	800b080 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800b07c:	f000 fe88 	bl	800bd90 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800b080:	2100      	movs	r1, #0
 800b082:	4809      	ldr	r0, [pc, #36]	; (800b0a8 <MX_I2C3_Init+0x74>)
 800b084:	f7f8 f858 	bl	8003138 <HAL_I2CEx_ConfigAnalogFilter>
 800b088:	4603      	mov	r3, r0
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d001      	beq.n	800b092 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 800b08e:	f000 fe7f 	bl	800bd90 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800b092:	2100      	movs	r1, #0
 800b094:	4804      	ldr	r0, [pc, #16]	; (800b0a8 <MX_I2C3_Init+0x74>)
 800b096:	f7f8 f88b 	bl	80031b0 <HAL_I2CEx_ConfigDigitalFilter>
 800b09a:	4603      	mov	r3, r0
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d001      	beq.n	800b0a4 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 800b0a0:	f000 fe76 	bl	800bd90 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800b0a4:	bf00      	nop
 800b0a6:	bd80      	pop	{r7, pc}
 800b0a8:	200084a0 	.word	0x200084a0
 800b0ac:	40005c00 	.word	0x40005c00
 800b0b0:	000186a0 	.word	0x000186a0

0800b0b4 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 800b0b4:	b580      	push	{r7, lr}
 800b0b6:	b08e      	sub	sp, #56	; 0x38
 800b0b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800b0ba:	1d3b      	adds	r3, r7, #4
 800b0bc:	2234      	movs	r2, #52	; 0x34
 800b0be:	2100      	movs	r1, #0
 800b0c0:	4618      	mov	r0, r3
 800b0c2:	f001 fe0e 	bl	800cce2 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800b0c6:	4b39      	ldr	r3, [pc, #228]	; (800b1ac <MX_LTDC_Init+0xf8>)
 800b0c8:	4a39      	ldr	r2, [pc, #228]	; (800b1b0 <MX_LTDC_Init+0xfc>)
 800b0ca:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800b0cc:	4b37      	ldr	r3, [pc, #220]	; (800b1ac <MX_LTDC_Init+0xf8>)
 800b0ce:	2200      	movs	r2, #0
 800b0d0:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800b0d2:	4b36      	ldr	r3, [pc, #216]	; (800b1ac <MX_LTDC_Init+0xf8>)
 800b0d4:	2200      	movs	r2, #0
 800b0d6:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800b0d8:	4b34      	ldr	r3, [pc, #208]	; (800b1ac <MX_LTDC_Init+0xf8>)
 800b0da:	2200      	movs	r2, #0
 800b0dc:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800b0de:	4b33      	ldr	r3, [pc, #204]	; (800b1ac <MX_LTDC_Init+0xf8>)
 800b0e0:	2200      	movs	r2, #0
 800b0e2:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 800b0e4:	4b31      	ldr	r3, [pc, #196]	; (800b1ac <MX_LTDC_Init+0xf8>)
 800b0e6:	2209      	movs	r2, #9
 800b0e8:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 800b0ea:	4b30      	ldr	r3, [pc, #192]	; (800b1ac <MX_LTDC_Init+0xf8>)
 800b0ec:	2201      	movs	r2, #1
 800b0ee:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 800b0f0:	4b2e      	ldr	r3, [pc, #184]	; (800b1ac <MX_LTDC_Init+0xf8>)
 800b0f2:	221d      	movs	r2, #29
 800b0f4:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 800b0f6:	4b2d      	ldr	r3, [pc, #180]	; (800b1ac <MX_LTDC_Init+0xf8>)
 800b0f8:	2203      	movs	r2, #3
 800b0fa:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 800b0fc:	4b2b      	ldr	r3, [pc, #172]	; (800b1ac <MX_LTDC_Init+0xf8>)
 800b0fe:	f240 120d 	movw	r2, #269	; 0x10d
 800b102:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 800b104:	4b29      	ldr	r3, [pc, #164]	; (800b1ac <MX_LTDC_Init+0xf8>)
 800b106:	f240 1243 	movw	r2, #323	; 0x143
 800b10a:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 800b10c:	4b27      	ldr	r3, [pc, #156]	; (800b1ac <MX_LTDC_Init+0xf8>)
 800b10e:	f240 1217 	movw	r2, #279	; 0x117
 800b112:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 800b114:	4b25      	ldr	r3, [pc, #148]	; (800b1ac <MX_LTDC_Init+0xf8>)
 800b116:	f240 1247 	movw	r2, #327	; 0x147
 800b11a:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800b11c:	4b23      	ldr	r3, [pc, #140]	; (800b1ac <MX_LTDC_Init+0xf8>)
 800b11e:	2200      	movs	r2, #0
 800b120:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 800b124:	4b21      	ldr	r3, [pc, #132]	; (800b1ac <MX_LTDC_Init+0xf8>)
 800b126:	2200      	movs	r2, #0
 800b128:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 800b12c:	4b1f      	ldr	r3, [pc, #124]	; (800b1ac <MX_LTDC_Init+0xf8>)
 800b12e:	2200      	movs	r2, #0
 800b130:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800b134:	481d      	ldr	r0, [pc, #116]	; (800b1ac <MX_LTDC_Init+0xf8>)
 800b136:	f7f8 f87b 	bl	8003230 <HAL_LTDC_Init>
 800b13a:	4603      	mov	r3, r0
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d001      	beq.n	800b144 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 800b140:	f000 fe26 	bl	800bd90 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800b144:	2300      	movs	r3, #0
 800b146:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 800b148:	23f0      	movs	r3, #240	; 0xf0
 800b14a:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 800b14c:	2300      	movs	r3, #0
 800b14e:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 800b150:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800b154:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 800b156:	2302      	movs	r3, #2
 800b158:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 800b15a:	23ff      	movs	r3, #255	; 0xff
 800b15c:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 800b15e:	2300      	movs	r3, #0
 800b160:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800b162:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800b166:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800b168:	2307      	movs	r3, #7
 800b16a:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 800b16c:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 800b170:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 800b172:	23f0      	movs	r3, #240	; 0xf0
 800b174:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 800b176:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800b17a:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 800b17c:	2300      	movs	r3, #0
 800b17e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 800b182:	2300      	movs	r3, #0
 800b184:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 800b188:	2300      	movs	r3, #0
 800b18a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800b18e:	1d3b      	adds	r3, r7, #4
 800b190:	2200      	movs	r2, #0
 800b192:	4619      	mov	r1, r3
 800b194:	4805      	ldr	r0, [pc, #20]	; (800b1ac <MX_LTDC_Init+0xf8>)
 800b196:	f7f8 f9dd 	bl	8003554 <HAL_LTDC_ConfigLayer>
 800b19a:	4603      	mov	r3, r0
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d001      	beq.n	800b1a4 <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 800b1a0:	f000 fdf6 	bl	800bd90 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 800b1a4:	bf00      	nop
 800b1a6:	3738      	adds	r7, #56	; 0x38
 800b1a8:	46bd      	mov	sp, r7
 800b1aa:	bd80      	pop	{r7, pc}
 800b1ac:	20008680 	.word	0x20008680
 800b1b0:	40016800 	.word	0x40016800

0800b1b4 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 800b1b4:	b580      	push	{r7, lr}
 800b1b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 800b1b8:	4b17      	ldr	r3, [pc, #92]	; (800b218 <MX_SPI5_Init+0x64>)
 800b1ba:	4a18      	ldr	r2, [pc, #96]	; (800b21c <MX_SPI5_Init+0x68>)
 800b1bc:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800b1be:	4b16      	ldr	r3, [pc, #88]	; (800b218 <MX_SPI5_Init+0x64>)
 800b1c0:	f44f 7282 	mov.w	r2, #260	; 0x104
 800b1c4:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800b1c6:	4b14      	ldr	r3, [pc, #80]	; (800b218 <MX_SPI5_Init+0x64>)
 800b1c8:	2200      	movs	r2, #0
 800b1ca:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 800b1cc:	4b12      	ldr	r3, [pc, #72]	; (800b218 <MX_SPI5_Init+0x64>)
 800b1ce:	2200      	movs	r2, #0
 800b1d0:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800b1d2:	4b11      	ldr	r3, [pc, #68]	; (800b218 <MX_SPI5_Init+0x64>)
 800b1d4:	2200      	movs	r2, #0
 800b1d6:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 800b1d8:	4b0f      	ldr	r3, [pc, #60]	; (800b218 <MX_SPI5_Init+0x64>)
 800b1da:	2200      	movs	r2, #0
 800b1dc:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800b1de:	4b0e      	ldr	r3, [pc, #56]	; (800b218 <MX_SPI5_Init+0x64>)
 800b1e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b1e4:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800b1e6:	4b0c      	ldr	r3, [pc, #48]	; (800b218 <MX_SPI5_Init+0x64>)
 800b1e8:	2218      	movs	r2, #24
 800b1ea:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800b1ec:	4b0a      	ldr	r3, [pc, #40]	; (800b218 <MX_SPI5_Init+0x64>)
 800b1ee:	2200      	movs	r2, #0
 800b1f0:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800b1f2:	4b09      	ldr	r3, [pc, #36]	; (800b218 <MX_SPI5_Init+0x64>)
 800b1f4:	2200      	movs	r2, #0
 800b1f6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b1f8:	4b07      	ldr	r3, [pc, #28]	; (800b218 <MX_SPI5_Init+0x64>)
 800b1fa:	2200      	movs	r2, #0
 800b1fc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 800b1fe:	4b06      	ldr	r3, [pc, #24]	; (800b218 <MX_SPI5_Init+0x64>)
 800b200:	220a      	movs	r2, #10
 800b202:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 800b204:	4804      	ldr	r0, [pc, #16]	; (800b218 <MX_SPI5_Init+0x64>)
 800b206:	f7f9 fa01 	bl	800460c <HAL_SPI_Init>
 800b20a:	4603      	mov	r3, r0
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d001      	beq.n	800b214 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 800b210:	f000 fdbe 	bl	800bd90 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 800b214:	bf00      	nop
 800b216:	bd80      	pop	{r7, pc}
 800b218:	20008620 	.word	0x20008620
 800b21c:	40015000 	.word	0x40015000

0800b220 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800b220:	b580      	push	{r7, lr}
 800b222:	b086      	sub	sp, #24
 800b224:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800b226:	f107 0308 	add.w	r3, r7, #8
 800b22a:	2200      	movs	r2, #0
 800b22c:	601a      	str	r2, [r3, #0]
 800b22e:	605a      	str	r2, [r3, #4]
 800b230:	609a      	str	r2, [r3, #8]
 800b232:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b234:	463b      	mov	r3, r7
 800b236:	2200      	movs	r2, #0
 800b238:	601a      	str	r2, [r3, #0]
 800b23a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800b23c:	4b1e      	ldr	r3, [pc, #120]	; (800b2b8 <MX_TIM1_Init+0x98>)
 800b23e:	4a1f      	ldr	r2, [pc, #124]	; (800b2bc <MX_TIM1_Init+0x9c>)
 800b240:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800b242:	4b1d      	ldr	r3, [pc, #116]	; (800b2b8 <MX_TIM1_Init+0x98>)
 800b244:	2200      	movs	r2, #0
 800b246:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b248:	4b1b      	ldr	r3, [pc, #108]	; (800b2b8 <MX_TIM1_Init+0x98>)
 800b24a:	2200      	movs	r2, #0
 800b24c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 800b24e:	4b1a      	ldr	r3, [pc, #104]	; (800b2b8 <MX_TIM1_Init+0x98>)
 800b250:	2200      	movs	r2, #0
 800b252:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b254:	4b18      	ldr	r3, [pc, #96]	; (800b2b8 <MX_TIM1_Init+0x98>)
 800b256:	2200      	movs	r2, #0
 800b258:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800b25a:	4b17      	ldr	r3, [pc, #92]	; (800b2b8 <MX_TIM1_Init+0x98>)
 800b25c:	2200      	movs	r2, #0
 800b25e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b260:	4b15      	ldr	r3, [pc, #84]	; (800b2b8 <MX_TIM1_Init+0x98>)
 800b262:	2200      	movs	r2, #0
 800b264:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800b266:	4814      	ldr	r0, [pc, #80]	; (800b2b8 <MX_TIM1_Init+0x98>)
 800b268:	f7f9 fa34 	bl	80046d4 <HAL_TIM_Base_Init>
 800b26c:	4603      	mov	r3, r0
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d001      	beq.n	800b276 <MX_TIM1_Init+0x56>
  {
    Error_Handler();
 800b272:	f000 fd8d 	bl	800bd90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800b276:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b27a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800b27c:	f107 0308 	add.w	r3, r7, #8
 800b280:	4619      	mov	r1, r3
 800b282:	480d      	ldr	r0, [pc, #52]	; (800b2b8 <MX_TIM1_Init+0x98>)
 800b284:	f7f9 fb7d 	bl	8004982 <HAL_TIM_ConfigClockSource>
 800b288:	4603      	mov	r3, r0
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d001      	beq.n	800b292 <MX_TIM1_Init+0x72>
  {
    Error_Handler();
 800b28e:	f000 fd7f 	bl	800bd90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b292:	2300      	movs	r3, #0
 800b294:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b296:	2300      	movs	r3, #0
 800b298:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800b29a:	463b      	mov	r3, r7
 800b29c:	4619      	mov	r1, r3
 800b29e:	4806      	ldr	r0, [pc, #24]	; (800b2b8 <MX_TIM1_Init+0x98>)
 800b2a0:	f7f9 fd88 	bl	8004db4 <HAL_TIMEx_MasterConfigSynchronization>
 800b2a4:	4603      	mov	r3, r0
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d001      	beq.n	800b2ae <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 800b2aa:	f000 fd71 	bl	800bd90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800b2ae:	bf00      	nop
 800b2b0:	3718      	adds	r7, #24
 800b2b2:	46bd      	mov	sp, r7
 800b2b4:	bd80      	pop	{r7, pc}
 800b2b6:	bf00      	nop
 800b2b8:	2000876c 	.word	0x2000876c
 800b2bc:	40010000 	.word	0x40010000

0800b2c0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800b2c0:	b580      	push	{r7, lr}
 800b2c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800b2c4:	4b11      	ldr	r3, [pc, #68]	; (800b30c <MX_USART1_UART_Init+0x4c>)
 800b2c6:	4a12      	ldr	r2, [pc, #72]	; (800b310 <MX_USART1_UART_Init+0x50>)
 800b2c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800b2ca:	4b10      	ldr	r3, [pc, #64]	; (800b30c <MX_USART1_UART_Init+0x4c>)
 800b2cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800b2d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800b2d2:	4b0e      	ldr	r3, [pc, #56]	; (800b30c <MX_USART1_UART_Init+0x4c>)
 800b2d4:	2200      	movs	r2, #0
 800b2d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800b2d8:	4b0c      	ldr	r3, [pc, #48]	; (800b30c <MX_USART1_UART_Init+0x4c>)
 800b2da:	2200      	movs	r2, #0
 800b2dc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800b2de:	4b0b      	ldr	r3, [pc, #44]	; (800b30c <MX_USART1_UART_Init+0x4c>)
 800b2e0:	2200      	movs	r2, #0
 800b2e2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800b2e4:	4b09      	ldr	r3, [pc, #36]	; (800b30c <MX_USART1_UART_Init+0x4c>)
 800b2e6:	220c      	movs	r2, #12
 800b2e8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800b2ea:	4b08      	ldr	r3, [pc, #32]	; (800b30c <MX_USART1_UART_Init+0x4c>)
 800b2ec:	2200      	movs	r2, #0
 800b2ee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800b2f0:	4b06      	ldr	r3, [pc, #24]	; (800b30c <MX_USART1_UART_Init+0x4c>)
 800b2f2:	2200      	movs	r2, #0
 800b2f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800b2f6:	4805      	ldr	r0, [pc, #20]	; (800b30c <MX_USART1_UART_Init+0x4c>)
 800b2f8:	f7f9 fdec 	bl	8004ed4 <HAL_UART_Init>
 800b2fc:	4603      	mov	r3, r0
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d001      	beq.n	800b306 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800b302:	f000 fd45 	bl	800bd90 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800b306:	bf00      	nop
 800b308:	bd80      	pop	{r7, pc}
 800b30a:	bf00      	nop
 800b30c:	20008728 	.word	0x20008728
 800b310:	40011000 	.word	0x40011000

0800b314 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 800b314:	b580      	push	{r7, lr}
 800b316:	b088      	sub	sp, #32
 800b318:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800b31a:	1d3b      	adds	r3, r7, #4
 800b31c:	2200      	movs	r2, #0
 800b31e:	601a      	str	r2, [r3, #0]
 800b320:	605a      	str	r2, [r3, #4]
 800b322:	609a      	str	r2, [r3, #8]
 800b324:	60da      	str	r2, [r3, #12]
 800b326:	611a      	str	r2, [r3, #16]
 800b328:	615a      	str	r2, [r3, #20]
 800b32a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800b32c:	4b1f      	ldr	r3, [pc, #124]	; (800b3ac <MX_FMC_Init+0x98>)
 800b32e:	4a20      	ldr	r2, [pc, #128]	; (800b3b0 <MX_FMC_Init+0x9c>)
 800b330:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 800b332:	4b1e      	ldr	r3, [pc, #120]	; (800b3ac <MX_FMC_Init+0x98>)
 800b334:	2201      	movs	r2, #1
 800b336:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800b338:	4b1c      	ldr	r3, [pc, #112]	; (800b3ac <MX_FMC_Init+0x98>)
 800b33a:	2200      	movs	r2, #0
 800b33c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800b33e:	4b1b      	ldr	r3, [pc, #108]	; (800b3ac <MX_FMC_Init+0x98>)
 800b340:	2204      	movs	r2, #4
 800b342:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800b344:	4b19      	ldr	r3, [pc, #100]	; (800b3ac <MX_FMC_Init+0x98>)
 800b346:	2210      	movs	r2, #16
 800b348:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800b34a:	4b18      	ldr	r3, [pc, #96]	; (800b3ac <MX_FMC_Init+0x98>)
 800b34c:	2240      	movs	r2, #64	; 0x40
 800b34e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 800b350:	4b16      	ldr	r3, [pc, #88]	; (800b3ac <MX_FMC_Init+0x98>)
 800b352:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800b356:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800b358:	4b14      	ldr	r3, [pc, #80]	; (800b3ac <MX_FMC_Init+0x98>)
 800b35a:	2200      	movs	r2, #0
 800b35c:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800b35e:	4b13      	ldr	r3, [pc, #76]	; (800b3ac <MX_FMC_Init+0x98>)
 800b360:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b364:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 800b366:	4b11      	ldr	r3, [pc, #68]	; (800b3ac <MX_FMC_Init+0x98>)
 800b368:	2200      	movs	r2, #0
 800b36a:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 800b36c:	4b0f      	ldr	r3, [pc, #60]	; (800b3ac <MX_FMC_Init+0x98>)
 800b36e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800b372:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 800b374:	2302      	movs	r3, #2
 800b376:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 800b378:	2307      	movs	r3, #7
 800b37a:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 800b37c:	2304      	movs	r3, #4
 800b37e:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 800b380:	2307      	movs	r3, #7
 800b382:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 800b384:	2303      	movs	r3, #3
 800b386:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 800b388:	2302      	movs	r3, #2
 800b38a:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 800b38c:	2302      	movs	r3, #2
 800b38e:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800b390:	1d3b      	adds	r3, r7, #4
 800b392:	4619      	mov	r1, r3
 800b394:	4805      	ldr	r0, [pc, #20]	; (800b3ac <MX_FMC_Init+0x98>)
 800b396:	f7f9 f905 	bl	80045a4 <HAL_SDRAM_Init>
 800b39a:	4603      	mov	r3, r0
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d001      	beq.n	800b3a4 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 800b3a0:	f000 fcf6 	bl	800bd90 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 800b3a4:	bf00      	nop
 800b3a6:	3720      	adds	r7, #32
 800b3a8:	46bd      	mov	sp, r7
 800b3aa:	bd80      	pop	{r7, pc}
 800b3ac:	200087ec 	.word	0x200087ec
 800b3b0:	a0000140 	.word	0xa0000140

0800b3b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800b3b4:	b580      	push	{r7, lr}
 800b3b6:	b08e      	sub	sp, #56	; 0x38
 800b3b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b3ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b3be:	2200      	movs	r2, #0
 800b3c0:	601a      	str	r2, [r3, #0]
 800b3c2:	605a      	str	r2, [r3, #4]
 800b3c4:	609a      	str	r2, [r3, #8]
 800b3c6:	60da      	str	r2, [r3, #12]
 800b3c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800b3ca:	2300      	movs	r3, #0
 800b3cc:	623b      	str	r3, [r7, #32]
 800b3ce:	4b84      	ldr	r3, [pc, #528]	; (800b5e0 <MX_GPIO_Init+0x22c>)
 800b3d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3d2:	4a83      	ldr	r2, [pc, #524]	; (800b5e0 <MX_GPIO_Init+0x22c>)
 800b3d4:	f043 0304 	orr.w	r3, r3, #4
 800b3d8:	6313      	str	r3, [r2, #48]	; 0x30
 800b3da:	4b81      	ldr	r3, [pc, #516]	; (800b5e0 <MX_GPIO_Init+0x22c>)
 800b3dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3de:	f003 0304 	and.w	r3, r3, #4
 800b3e2:	623b      	str	r3, [r7, #32]
 800b3e4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	61fb      	str	r3, [r7, #28]
 800b3ea:	4b7d      	ldr	r3, [pc, #500]	; (800b5e0 <MX_GPIO_Init+0x22c>)
 800b3ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3ee:	4a7c      	ldr	r2, [pc, #496]	; (800b5e0 <MX_GPIO_Init+0x22c>)
 800b3f0:	f043 0320 	orr.w	r3, r3, #32
 800b3f4:	6313      	str	r3, [r2, #48]	; 0x30
 800b3f6:	4b7a      	ldr	r3, [pc, #488]	; (800b5e0 <MX_GPIO_Init+0x22c>)
 800b3f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3fa:	f003 0320 	and.w	r3, r3, #32
 800b3fe:	61fb      	str	r3, [r7, #28]
 800b400:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800b402:	2300      	movs	r3, #0
 800b404:	61bb      	str	r3, [r7, #24]
 800b406:	4b76      	ldr	r3, [pc, #472]	; (800b5e0 <MX_GPIO_Init+0x22c>)
 800b408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b40a:	4a75      	ldr	r2, [pc, #468]	; (800b5e0 <MX_GPIO_Init+0x22c>)
 800b40c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b410:	6313      	str	r3, [r2, #48]	; 0x30
 800b412:	4b73      	ldr	r3, [pc, #460]	; (800b5e0 <MX_GPIO_Init+0x22c>)
 800b414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b416:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b41a:	61bb      	str	r3, [r7, #24]
 800b41c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800b41e:	2300      	movs	r3, #0
 800b420:	617b      	str	r3, [r7, #20]
 800b422:	4b6f      	ldr	r3, [pc, #444]	; (800b5e0 <MX_GPIO_Init+0x22c>)
 800b424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b426:	4a6e      	ldr	r2, [pc, #440]	; (800b5e0 <MX_GPIO_Init+0x22c>)
 800b428:	f043 0301 	orr.w	r3, r3, #1
 800b42c:	6313      	str	r3, [r2, #48]	; 0x30
 800b42e:	4b6c      	ldr	r3, [pc, #432]	; (800b5e0 <MX_GPIO_Init+0x22c>)
 800b430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b432:	f003 0301 	and.w	r3, r3, #1
 800b436:	617b      	str	r3, [r7, #20]
 800b438:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800b43a:	2300      	movs	r3, #0
 800b43c:	613b      	str	r3, [r7, #16]
 800b43e:	4b68      	ldr	r3, [pc, #416]	; (800b5e0 <MX_GPIO_Init+0x22c>)
 800b440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b442:	4a67      	ldr	r2, [pc, #412]	; (800b5e0 <MX_GPIO_Init+0x22c>)
 800b444:	f043 0302 	orr.w	r3, r3, #2
 800b448:	6313      	str	r3, [r2, #48]	; 0x30
 800b44a:	4b65      	ldr	r3, [pc, #404]	; (800b5e0 <MX_GPIO_Init+0x22c>)
 800b44c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b44e:	f003 0302 	and.w	r3, r3, #2
 800b452:	613b      	str	r3, [r7, #16]
 800b454:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800b456:	2300      	movs	r3, #0
 800b458:	60fb      	str	r3, [r7, #12]
 800b45a:	4b61      	ldr	r3, [pc, #388]	; (800b5e0 <MX_GPIO_Init+0x22c>)
 800b45c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b45e:	4a60      	ldr	r2, [pc, #384]	; (800b5e0 <MX_GPIO_Init+0x22c>)
 800b460:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b464:	6313      	str	r3, [r2, #48]	; 0x30
 800b466:	4b5e      	ldr	r3, [pc, #376]	; (800b5e0 <MX_GPIO_Init+0x22c>)
 800b468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b46a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b46e:	60fb      	str	r3, [r7, #12]
 800b470:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800b472:	2300      	movs	r3, #0
 800b474:	60bb      	str	r3, [r7, #8]
 800b476:	4b5a      	ldr	r3, [pc, #360]	; (800b5e0 <MX_GPIO_Init+0x22c>)
 800b478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b47a:	4a59      	ldr	r2, [pc, #356]	; (800b5e0 <MX_GPIO_Init+0x22c>)
 800b47c:	f043 0310 	orr.w	r3, r3, #16
 800b480:	6313      	str	r3, [r2, #48]	; 0x30
 800b482:	4b57      	ldr	r3, [pc, #348]	; (800b5e0 <MX_GPIO_Init+0x22c>)
 800b484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b486:	f003 0310 	and.w	r3, r3, #16
 800b48a:	60bb      	str	r3, [r7, #8]
 800b48c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800b48e:	2300      	movs	r3, #0
 800b490:	607b      	str	r3, [r7, #4]
 800b492:	4b53      	ldr	r3, [pc, #332]	; (800b5e0 <MX_GPIO_Init+0x22c>)
 800b494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b496:	4a52      	ldr	r2, [pc, #328]	; (800b5e0 <MX_GPIO_Init+0x22c>)
 800b498:	f043 0308 	orr.w	r3, r3, #8
 800b49c:	6313      	str	r3, [r2, #48]	; 0x30
 800b49e:	4b50      	ldr	r3, [pc, #320]	; (800b5e0 <MX_GPIO_Init+0x22c>)
 800b4a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4a2:	f003 0308 	and.w	r3, r3, #8
 800b4a6:	607b      	str	r3, [r7, #4]
 800b4a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 800b4aa:	2200      	movs	r2, #0
 800b4ac:	2116      	movs	r1, #22
 800b4ae:	484d      	ldr	r0, [pc, #308]	; (800b5e4 <MX_GPIO_Init+0x230>)
 800b4b0:	f7f6 f85c 	bl	800156c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 800b4b4:	2200      	movs	r2, #0
 800b4b6:	2180      	movs	r1, #128	; 0x80
 800b4b8:	484b      	ldr	r0, [pc, #300]	; (800b5e8 <MX_GPIO_Init+0x234>)
 800b4ba:	f7f6 f857 	bl	800156c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 800b4be:	2200      	movs	r2, #0
 800b4c0:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800b4c4:	4849      	ldr	r0, [pc, #292]	; (800b5ec <MX_GPIO_Init+0x238>)
 800b4c6:	f7f6 f851 	bl	800156c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 800b4ca:	2200      	movs	r2, #0
 800b4cc:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 800b4d0:	4847      	ldr	r0, [pc, #284]	; (800b5f0 <MX_GPIO_Init+0x23c>)
 800b4d2:	f7f6 f84b 	bl	800156c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 800b4d6:	2316      	movs	r3, #22
 800b4d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b4da:	2301      	movs	r3, #1
 800b4dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b4de:	2300      	movs	r3, #0
 800b4e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b4e2:	2300      	movs	r3, #0
 800b4e4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b4e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b4ea:	4619      	mov	r1, r3
 800b4ec:	483d      	ldr	r0, [pc, #244]	; (800b5e4 <MX_GPIO_Init+0x230>)
 800b4ee:	f7f5 fe7b 	bl	80011e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Push_Button_Pin */
  GPIO_InitStruct.Pin = Push_Button_Pin;
 800b4f2:	2301      	movs	r3, #1
 800b4f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800b4f6:	4b3f      	ldr	r3, [pc, #252]	; (800b5f4 <MX_GPIO_Init+0x240>)
 800b4f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b4fa:	2300      	movs	r3, #0
 800b4fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Push_Button_GPIO_Port, &GPIO_InitStruct);
 800b4fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b502:	4619      	mov	r1, r3
 800b504:	4838      	ldr	r0, [pc, #224]	; (800b5e8 <MX_GPIO_Init+0x234>)
 800b506:	f7f5 fe6f 	bl	80011e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 800b50a:	f248 0306 	movw	r3, #32774	; 0x8006
 800b50e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800b510:	4b39      	ldr	r3, [pc, #228]	; (800b5f8 <MX_GPIO_Init+0x244>)
 800b512:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b514:	2300      	movs	r3, #0
 800b516:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b518:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b51c:	4619      	mov	r1, r3
 800b51e:	4832      	ldr	r0, [pc, #200]	; (800b5e8 <MX_GPIO_Init+0x234>)
 800b520:	f7f5 fe62 	bl	80011e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 800b524:	2380      	movs	r3, #128	; 0x80
 800b526:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b528:	2301      	movs	r3, #1
 800b52a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b52c:	2300      	movs	r3, #0
 800b52e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b530:	2300      	movs	r3, #0
 800b532:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 800b534:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b538:	4619      	mov	r1, r3
 800b53a:	482b      	ldr	r0, [pc, #172]	; (800b5e8 <MX_GPIO_Init+0x234>)
 800b53c:	f7f5 fe54 	bl	80011e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 800b540:	2320      	movs	r3, #32
 800b542:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800b544:	4b2c      	ldr	r3, [pc, #176]	; (800b5f8 <MX_GPIO_Init+0x244>)
 800b546:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b548:	2300      	movs	r3, #0
 800b54a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 800b54c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b550:	4619      	mov	r1, r3
 800b552:	4824      	ldr	r0, [pc, #144]	; (800b5e4 <MX_GPIO_Init+0x230>)
 800b554:	f7f5 fe48 	bl	80011e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800b558:	2304      	movs	r3, #4
 800b55a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b55c:	2300      	movs	r3, #0
 800b55e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b560:	2300      	movs	r3, #0
 800b562:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800b564:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b568:	4619      	mov	r1, r3
 800b56a:	4824      	ldr	r0, [pc, #144]	; (800b5fc <MX_GPIO_Init+0x248>)
 800b56c:	f7f5 fe3c 	bl	80011e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 800b570:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b574:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b576:	2300      	movs	r3, #0
 800b578:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b57a:	2300      	movs	r3, #0
 800b57c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 800b57e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b582:	4619      	mov	r1, r3
 800b584:	4819      	ldr	r0, [pc, #100]	; (800b5ec <MX_GPIO_Init+0x238>)
 800b586:	f7f5 fe2f 	bl	80011e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 800b58a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800b58e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b590:	2301      	movs	r3, #1
 800b592:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b594:	2300      	movs	r3, #0
 800b596:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b598:	2300      	movs	r3, #0
 800b59a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800b59c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b5a0:	4619      	mov	r1, r3
 800b5a2:	4812      	ldr	r0, [pc, #72]	; (800b5ec <MX_GPIO_Init+0x238>)
 800b5a4:	f7f5 fe20 	bl	80011e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 800b5a8:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800b5ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b5ae:	2301      	movs	r3, #1
 800b5b0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b5b2:	2300      	movs	r3, #0
 800b5b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b5b6:	2300      	movs	r3, #0
 800b5b8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800b5ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b5be:	4619      	mov	r1, r3
 800b5c0:	480b      	ldr	r0, [pc, #44]	; (800b5f0 <MX_GPIO_Init+0x23c>)
 800b5c2:	f7f5 fe11 	bl	80011e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 800b5c6:	2200      	movs	r2, #0
 800b5c8:	2105      	movs	r1, #5
 800b5ca:	2006      	movs	r0, #6
 800b5cc:	f7f5 f8ac 	bl	8000728 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800b5d0:	2006      	movs	r0, #6
 800b5d2:	f7f5 f8c5 	bl	8000760 <HAL_NVIC_EnableIRQ>

}
 800b5d6:	bf00      	nop
 800b5d8:	3738      	adds	r7, #56	; 0x38
 800b5da:	46bd      	mov	sp, r7
 800b5dc:	bd80      	pop	{r7, pc}
 800b5de:	bf00      	nop
 800b5e0:	40023800 	.word	0x40023800
 800b5e4:	40020800 	.word	0x40020800
 800b5e8:	40020000 	.word	0x40020000
 800b5ec:	40020c00 	.word	0x40020c00
 800b5f0:	40021800 	.word	0x40021800
 800b5f4:	10110000 	.word	0x10110000
 800b5f8:	10120000 	.word	0x10120000
 800b5fc:	40020400 	.word	0x40020400

0800b600 <enterBootLoaderMode>:

/* USER CODE BEGIN 4 */
void enterBootLoaderMode()
{
 800b600:	b580      	push	{r7, lr}
 800b602:	af00      	add	r7, sp, #0

	bootLoaderReadUart();
 800b604:	f000 f81e 	bl	800b644 <bootLoaderReadUart>
}
 800b608:	bf00      	nop
 800b60a:	bd80      	pop	{r7, pc}

0800b60c <enterUserApplicationMode>:


void enterUserApplicationMode()
{
 800b60c:	b580      	push	{r7, lr}
 800b60e:	b084      	sub	sp, #16
 800b610:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800b612:	b672      	cpsid	i
	__disable_irq();// need to try with T bit  https://www.youtube.com/watch?v=VX_12SjnNhY
	void (*userResetHandle)(void);
	uint32_t mspAddress = *(volatile uint32_t *)USER_APPLICATION_BASE_ADDRESS;
 800b614:	4b09      	ldr	r3, [pc, #36]	; (800b63c <enterUserApplicationMode+0x30>)
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	60fb      	str	r3, [r7, #12]
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800b61e:	683b      	ldr	r3, [r7, #0]
 800b620:	f383 8808 	msr	MSP, r3
	__set_MSP(mspAddress);
	uint32_t resetHandleAddress = *(volatile uint32_t *)(USER_APPLICATION_BASE_ADDRESS + 4);
 800b624:	4b06      	ldr	r3, [pc, #24]	; (800b640 <enterUserApplicationMode+0x34>)
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	60bb      	str	r3, [r7, #8]
	userResetHandle = (void *)resetHandleAddress;
 800b62a:	68bb      	ldr	r3, [r7, #8]
 800b62c:	607b      	str	r3, [r7, #4]
	userResetHandle();
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	4798      	blx	r3
}
 800b632:	bf00      	nop
 800b634:	3710      	adds	r7, #16
 800b636:	46bd      	mov	sp, r7
 800b638:	bd80      	pop	{r7, pc}
 800b63a:	bf00      	nop
 800b63c:	08020000 	.word	0x08020000
 800b640:	08020004 	.word	0x08020004

0800b644 <bootLoaderReadUart>:
	va_end(args);
}


void bootLoaderReadUart(void)
{
 800b644:	b580      	push	{r7, lr}
 800b646:	b082      	sub	sp, #8
 800b648:	af00      	add	r7, sp, #0
	uint8_t recvLen = 0;
 800b64a:	2300      	movs	r3, #0
 800b64c:	71fb      	strb	r3, [r7, #7]
	while(1)
	{
		recvLen = 0;
 800b64e:	2300      	movs	r3, #0
 800b650:	71fb      	strb	r3, [r7, #7]
		memset(bootLoaderRXBuffer, 0, 200);
 800b652:	22c8      	movs	r2, #200	; 0xc8
 800b654:	2100      	movs	r1, #0
 800b656:	4824      	ldr	r0, [pc, #144]	; (800b6e8 <bootLoaderReadUart+0xa4>)
 800b658:	f001 fb43 	bl	800cce2 <memset>
		HAL_UART_Receive(&huart1, bootLoaderRXBuffer, 1, HAL_MAX_DELAY);
 800b65c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b660:	2201      	movs	r2, #1
 800b662:	4921      	ldr	r1, [pc, #132]	; (800b6e8 <bootLoaderReadUart+0xa4>)
 800b664:	4821      	ldr	r0, [pc, #132]	; (800b6ec <bootLoaderReadUart+0xa8>)
 800b666:	f7f9 fd1b 	bl	80050a0 <HAL_UART_Receive>
		recvLen = bootLoaderRXBuffer[0];
 800b66a:	4b1f      	ldr	r3, [pc, #124]	; (800b6e8 <bootLoaderReadUart+0xa4>)
 800b66c:	781b      	ldrb	r3, [r3, #0]
 800b66e:	71fb      	strb	r3, [r7, #7]
		HAL_UART_Receive(&huart1, &bootLoaderRXBuffer[1], recvLen, HAL_MAX_DELAY);
 800b670:	79fb      	ldrb	r3, [r7, #7]
 800b672:	b29a      	uxth	r2, r3
 800b674:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b678:	491d      	ldr	r1, [pc, #116]	; (800b6f0 <bootLoaderReadUart+0xac>)
 800b67a:	481c      	ldr	r0, [pc, #112]	; (800b6ec <bootLoaderReadUart+0xa8>)
 800b67c:	f7f9 fd10 	bl	80050a0 <HAL_UART_Receive>
			switch(bootLoaderRXBuffer[1])
 800b680:	4b19      	ldr	r3, [pc, #100]	; (800b6e8 <bootLoaderReadUart+0xa4>)
 800b682:	785b      	ldrb	r3, [r3, #1]
 800b684:	3b51      	subs	r3, #81	; 0x51
 800b686:	2b06      	cmp	r3, #6
 800b688:	d8e1      	bhi.n	800b64e <bootLoaderReadUart+0xa>
 800b68a:	a201      	add	r2, pc, #4	; (adr r2, 800b690 <bootLoaderReadUart+0x4c>)
 800b68c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b690:	0800b6ad 	.word	0x0800b6ad
 800b694:	0800b6b5 	.word	0x0800b6b5
 800b698:	0800b6bd 	.word	0x0800b6bd
 800b69c:	0800b6c5 	.word	0x0800b6c5
 800b6a0:	0800b6cd 	.word	0x0800b6cd
 800b6a4:	0800b6d5 	.word	0x0800b6d5
 800b6a8:	0800b6dd 	.word	0x0800b6dd
			{

				case BL_GET_VER:
					bootLoaderHandleGetVersion(bootLoaderRXBuffer);
 800b6ac:	480e      	ldr	r0, [pc, #56]	; (800b6e8 <bootLoaderReadUart+0xa4>)
 800b6ae:	f000 fa3b 	bl	800bb28 <bootLoaderHandleGetVersion>
					break;
 800b6b2:	e017      	b.n	800b6e4 <bootLoaderReadUart+0xa0>

				case BL_GET_HELP:
					bootLoaderHandleGetHelp(bootLoaderRXBuffer);
 800b6b4:	480c      	ldr	r0, [pc, #48]	; (800b6e8 <bootLoaderReadUart+0xa4>)
 800b6b6:	f000 fa65 	bl	800bb84 <bootLoaderHandleGetHelp>
					break;
 800b6ba:	e013      	b.n	800b6e4 <bootLoaderReadUart+0xa0>

				case BL_GET_CID:
					bootLoaderHandleGetChipId(bootLoaderRXBuffer);
 800b6bc:	480a      	ldr	r0, [pc, #40]	; (800b6e8 <bootLoaderReadUart+0xa4>)
 800b6be:	f000 f9f7 	bl	800bab0 <bootLoaderHandleGetChipId>
					break;
 800b6c2:	e00f      	b.n	800b6e4 <bootLoaderReadUart+0xa0>

				case BL_GET_RDP_STATUS:
					bootLoaderHandleReadProtectionLevelStatus(bootLoaderRXBuffer);
 800b6c4:	4808      	ldr	r0, [pc, #32]	; (800b6e8 <bootLoaderReadUart+0xa4>)
 800b6c6:	f000 f9b3 	bl	800ba30 <bootLoaderHandleReadProtectionLevelStatus>
					break;
 800b6ca:	e00b      	b.n	800b6e4 <bootLoaderReadUart+0xa0>

				case BL_GO_TO_ADDR:
					bootLoaderHandleGoToAddress(bootLoaderRXBuffer);
 800b6cc:	4806      	ldr	r0, [pc, #24]	; (800b6e8 <bootLoaderReadUart+0xa4>)
 800b6ce:	f000 f94a 	bl	800b966 <bootLoaderHandleGoToAddress>
					break;
 800b6d2:	e007      	b.n	800b6e4 <bootLoaderReadUart+0xa0>

				case BL_FLASH_ERASE:
					bootLoaderHandleFlashErase(bootLoaderRXBuffer);
 800b6d4:	4804      	ldr	r0, [pc, #16]	; (800b6e8 <bootLoaderReadUart+0xa4>)
 800b6d6:	f000 f891 	bl	800b7fc <bootLoaderHandleFlashErase>
					break;
 800b6da:	e003      	b.n	800b6e4 <bootLoaderReadUart+0xa0>

				case BL_MEM_WRITE:
					bootLoaderHandleMemWrite(bootLoaderRXBuffer);
 800b6dc:	4802      	ldr	r0, [pc, #8]	; (800b6e8 <bootLoaderReadUart+0xa4>)
 800b6de:	f000 f809 	bl	800b6f4 <bootLoaderHandleMemWrite>
					break;
 800b6e2:	bf00      	nop
		recvLen = 0;
 800b6e4:	e7b3      	b.n	800b64e <bootLoaderReadUart+0xa>
 800b6e6:	bf00      	nop
 800b6e8:	200084f4 	.word	0x200084f4
 800b6ec:	20008728 	.word	0x20008728
 800b6f0:	200084f5 	.word	0x200084f5

0800b6f4 <bootLoaderHandleMemWrite>:




void bootLoaderHandleMemWrite(uint8_t *rxBuf)
{
 800b6f4:	b580      	push	{r7, lr}
 800b6f6:	b088      	sub	sp, #32
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	6078      	str	r0, [r7, #4]

	uint8_t writeStatus = 0x00;
 800b6fc:	2300      	movs	r3, #0
 800b6fe:	73fb      	strb	r3, [r7, #15]
	uint8_t payloadLen = rxBuf[6];
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	799b      	ldrb	r3, [r3, #6]
 800b704:	77fb      	strb	r3, [r7, #31]
	uint32_t memAddress = *((uint32_t *)(&rxBuf[2]));
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800b70c:	61bb      	str	r3, [r7, #24]



	uint32_t packetLength = rxBuf[0] + 1;
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	781b      	ldrb	r3, [r3, #0]
 800b712:	3301      	adds	r3, #1
 800b714:	617b      	str	r3, [r7, #20]
	uint32_t hostCRC = *(uint32_t *)(rxBuf + packetLength - CRC_PACKET_LENGTH);
 800b716:	697b      	ldr	r3, [r7, #20]
 800b718:	3b04      	subs	r3, #4
 800b71a:	687a      	ldr	r2, [r7, #4]
 800b71c:	4413      	add	r3, r2
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	613b      	str	r3, [r7, #16]

	if(!bootLoaderVerifyCRC(rxBuf, packetLength - CRC_PACKET_LENGTH, hostCRC)) //
 800b722:	697b      	ldr	r3, [r7, #20]
 800b724:	3b04      	subs	r3, #4
 800b726:	693a      	ldr	r2, [r7, #16]
 800b728:	4619      	mov	r1, r3
 800b72a:	6878      	ldr	r0, [r7, #4]
 800b72c:	f000 fa60 	bl	800bbf0 <bootLoaderVerifyCRC>
 800b730:	4603      	mov	r3, r0
 800b732:	2b00      	cmp	r3, #0
 800b734:	d12d      	bne.n	800b792 <bootLoaderHandleMemWrite+0x9e>
	{
		bootLoaderSendAck(1);
 800b736:	2001      	movs	r0, #1
 800b738:	f000 fa90 	bl	800bc5c <bootLoaderSendAck>
		if(verifyAddress(memAddress) == ADDR_VALID)
 800b73c:	69b8      	ldr	r0, [r7, #24]
 800b73e:	f000 f95f 	bl	800ba00 <verifyAddress>
 800b742:	4603      	mov	r3, r0
 800b744:	2b00      	cmp	r3, #0
 800b746:	d11b      	bne.n	800b780 <bootLoaderHandleMemWrite+0x8c>
		{
			HAL_GPIO_WritePin(GPIOG,LD4_Pin,1);
 800b748:	2201      	movs	r2, #1
 800b74a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800b74e:	4814      	ldr	r0, [pc, #80]	; (800b7a0 <bootLoaderHandleMemWrite+0xac>)
 800b750:	f7f5 ff0c 	bl	800156c <HAL_GPIO_WritePin>
			writeStatus = executeMemWrite(&rxBuf[7],memAddress, payloadLen);
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	3307      	adds	r3, #7
 800b758:	7ffa      	ldrb	r2, [r7, #31]
 800b75a:	69b9      	ldr	r1, [r7, #24]
 800b75c:	4618      	mov	r0, r3
 800b75e:	f000 f821 	bl	800b7a4 <executeMemWrite>
 800b762:	4603      	mov	r3, r0
 800b764:	73fb      	strb	r3, [r7, #15]
			bootLoaderUARTWriteData(&writeStatus,sizeof(writeStatus));
 800b766:	f107 030f 	add.w	r3, r7, #15
 800b76a:	2101      	movs	r1, #1
 800b76c:	4618      	mov	r0, r3
 800b76e:	f000 fad1 	bl	800bd14 <bootLoaderUARTWriteData>
			HAL_GPIO_WritePin(GPIOG,LD4_Pin,0);
 800b772:	2200      	movs	r2, #0
 800b774:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800b778:	4809      	ldr	r0, [pc, #36]	; (800b7a0 <bootLoaderHandleMemWrite+0xac>)
 800b77a:	f7f5 fef7 	bl	800156c <HAL_GPIO_WritePin>
	}
	else
	{
		bootLoaderSendNack();
	}
}
 800b77e:	e00a      	b.n	800b796 <bootLoaderHandleMemWrite+0xa2>
			writeStatus = ADDR_INVALID;
 800b780:	2301      	movs	r3, #1
 800b782:	73fb      	strb	r3, [r7, #15]
			bootLoaderUARTWriteData(&writeStatus,sizeof(writeStatus));
 800b784:	f107 030f 	add.w	r3, r7, #15
 800b788:	2101      	movs	r1, #1
 800b78a:	4618      	mov	r0, r3
 800b78c:	f000 fac2 	bl	800bd14 <bootLoaderUARTWriteData>
}
 800b790:	e001      	b.n	800b796 <bootLoaderHandleMemWrite+0xa2>
		bootLoaderSendNack();
 800b792:	f000 faa5 	bl	800bce0 <bootLoaderSendNack>
}
 800b796:	bf00      	nop
 800b798:	3720      	adds	r7, #32
 800b79a:	46bd      	mov	sp, r7
 800b79c:	bd80      	pop	{r7, pc}
 800b79e:	bf00      	nop
 800b7a0:	40021800 	.word	0x40021800

0800b7a4 <executeMemWrite>:



uint8_t executeMemWrite(uint8_t *pBuffer, uint32_t memAddress, uint32_t len)
{
 800b7a4:	b590      	push	{r4, r7, lr}
 800b7a6:	b087      	sub	sp, #28
 800b7a8:	af00      	add	r7, sp, #0
 800b7aa:	60f8      	str	r0, [r7, #12]
 800b7ac:	60b9      	str	r1, [r7, #8]
 800b7ae:	607a      	str	r2, [r7, #4]
	uint8_t status=HAL_OK;
 800b7b0:	2300      	movs	r3, #0
 800b7b2:	75fb      	strb	r3, [r7, #23]
	HAL_FLASH_Unlock();
 800b7b4:	f7f5 fa68 	bl	8000c88 <HAL_FLASH_Unlock>
    for(uint32_t i = 0 ; i <len ; i++)
 800b7b8:	2300      	movs	r3, #0
 800b7ba:	613b      	str	r3, [r7, #16]
 800b7bc:	e013      	b.n	800b7e6 <executeMemWrite+0x42>
    {
        status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE,memAddress+i,pBuffer[i] );
 800b7be:	68ba      	ldr	r2, [r7, #8]
 800b7c0:	693b      	ldr	r3, [r7, #16]
 800b7c2:	18d1      	adds	r1, r2, r3
 800b7c4:	68fa      	ldr	r2, [r7, #12]
 800b7c6:	693b      	ldr	r3, [r7, #16]
 800b7c8:	4413      	add	r3, r2
 800b7ca:	781b      	ldrb	r3, [r3, #0]
 800b7cc:	b2db      	uxtb	r3, r3
 800b7ce:	f04f 0400 	mov.w	r4, #0
 800b7d2:	461a      	mov	r2, r3
 800b7d4:	4623      	mov	r3, r4
 800b7d6:	2000      	movs	r0, #0
 800b7d8:	f7f5 fa02 	bl	8000be0 <HAL_FLASH_Program>
 800b7dc:	4603      	mov	r3, r0
 800b7de:	75fb      	strb	r3, [r7, #23]
    for(uint32_t i = 0 ; i <len ; i++)
 800b7e0:	693b      	ldr	r3, [r7, #16]
 800b7e2:	3301      	adds	r3, #1
 800b7e4:	613b      	str	r3, [r7, #16]
 800b7e6:	693a      	ldr	r2, [r7, #16]
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	429a      	cmp	r2, r3
 800b7ec:	d3e7      	bcc.n	800b7be <executeMemWrite+0x1a>
    }
    HAL_FLASH_Lock();
 800b7ee:	f7f5 fa6d 	bl	8000ccc <HAL_FLASH_Lock>


    return status;
 800b7f2:	7dfb      	ldrb	r3, [r7, #23]
}
 800b7f4:	4618      	mov	r0, r3
 800b7f6:	371c      	adds	r7, #28
 800b7f8:	46bd      	mov	sp, r7
 800b7fa:	bd90      	pop	{r4, r7, pc}

0800b7fc <bootLoaderHandleFlashErase>:


void bootLoaderHandleFlashErase(uint8_t *rxBuf)
{
 800b7fc:	b580      	push	{r7, lr}
 800b7fe:	b086      	sub	sp, #24
 800b800:	af00      	add	r7, sp, #0
 800b802:	6078      	str	r0, [r7, #4]
	uint8_t eraseStatus = 0x00;
 800b804:	2300      	movs	r3, #0
 800b806:	73fb      	strb	r3, [r7, #15]
	uint32_t packetLength = rxBuf[0] + 1;
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	781b      	ldrb	r3, [r3, #0]
 800b80c:	3301      	adds	r3, #1
 800b80e:	617b      	str	r3, [r7, #20]
	uint32_t hostCRC = *(uint32_t *)(rxBuf + packetLength - CRC_PACKET_LENGTH);
 800b810:	697b      	ldr	r3, [r7, #20]
 800b812:	3b04      	subs	r3, #4
 800b814:	687a      	ldr	r2, [r7, #4]
 800b816:	4413      	add	r3, r2
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	613b      	str	r3, [r7, #16]

	if(!bootLoaderVerifyCRC(rxBuf, packetLength - CRC_PACKET_LENGTH, hostCRC))
 800b81c:	697b      	ldr	r3, [r7, #20]
 800b81e:	3b04      	subs	r3, #4
 800b820:	693a      	ldr	r2, [r7, #16]
 800b822:	4619      	mov	r1, r3
 800b824:	6878      	ldr	r0, [r7, #4]
 800b826:	f000 f9e3 	bl	800bbf0 <bootLoaderVerifyCRC>
 800b82a:	4603      	mov	r3, r0
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d121      	bne.n	800b874 <bootLoaderHandleFlashErase+0x78>
	{
		bootLoaderSendAck(1);
 800b830:	2001      	movs	r0, #1
 800b832:	f000 fa13 	bl	800bc5c <bootLoaderSendAck>
		HAL_GPIO_WritePin(GPIOG,LD4_Pin,1);
 800b836:	2201      	movs	r2, #1
 800b838:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800b83c:	4810      	ldr	r0, [pc, #64]	; (800b880 <bootLoaderHandleFlashErase+0x84>)
 800b83e:	f7f5 fe95 	bl	800156c <HAL_GPIO_WritePin>
		eraseStatus = executeFlashErase(rxBuf[2], rxBuf[3]);
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	3302      	adds	r3, #2
 800b846:	781a      	ldrb	r2, [r3, #0]
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	3303      	adds	r3, #3
 800b84c:	781b      	ldrb	r3, [r3, #0]
 800b84e:	4619      	mov	r1, r3
 800b850:	4610      	mov	r0, r2
 800b852:	f000 f817 	bl	800b884 <executeFlashErase>
 800b856:	4603      	mov	r3, r0
 800b858:	73fb      	strb	r3, [r7, #15]
		HAL_GPIO_WritePin(GPIOG,LD4_Pin,0);
 800b85a:	2200      	movs	r2, #0
 800b85c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800b860:	4807      	ldr	r0, [pc, #28]	; (800b880 <bootLoaderHandleFlashErase+0x84>)
 800b862:	f7f5 fe83 	bl	800156c <HAL_GPIO_WritePin>
		bootLoaderUARTWriteData(&eraseStatus,sizeof(eraseStatus));
 800b866:	f107 030f 	add.w	r3, r7, #15
 800b86a:	2101      	movs	r1, #1
 800b86c:	4618      	mov	r0, r3
 800b86e:	f000 fa51 	bl	800bd14 <bootLoaderUARTWriteData>
	}
	else
	{
		bootLoaderSendNack();
	}
}
 800b872:	e001      	b.n	800b878 <bootLoaderHandleFlashErase+0x7c>
		bootLoaderSendNack();
 800b874:	f000 fa34 	bl	800bce0 <bootLoaderSendNack>
}
 800b878:	bf00      	nop
 800b87a:	3718      	adds	r7, #24
 800b87c:	46bd      	mov	sp, r7
 800b87e:	bd80      	pop	{r7, pc}
 800b880:	40021800 	.word	0x40021800

0800b884 <executeFlashErase>:


uint8_t executeFlashErase(uint8_t sectorNumber, uint8_t numberOfSectors)
{
 800b884:	b580      	push	{r7, lr}
 800b886:	b08a      	sub	sp, #40	; 0x28
 800b888:	af00      	add	r7, sp, #0
 800b88a:	4603      	mov	r3, r0
 800b88c:	460a      	mov	r2, r1
 800b88e:	71fb      	strb	r3, [r7, #7]
 800b890:	4613      	mov	r3, r2
 800b892:	71bb      	strb	r3, [r7, #6]

	FLASH_EraseInitTypeDef flashEraseHandle;
	uint32_t sectorError;
	HAL_StatusTypeDef status;

	if(numberOfSectors > MAX_FLASH_SECTORS)
 800b894:	79bb      	ldrb	r3, [r7, #6]
 800b896:	2b17      	cmp	r3, #23
 800b898:	d901      	bls.n	800b89e <executeFlashErase+0x1a>
	{
         return 1;
 800b89a:	2301      	movs	r3, #1
 800b89c:	e05f      	b.n	800b95e <executeFlashErase+0xda>
	}

	if(1)
	{

		if(sectorNumber > 23)
 800b89e:	79fb      	ldrb	r3, [r7, #7]
 800b8a0:	2b17      	cmp	r3, #23
 800b8a2:	d92e      	bls.n	800b902 <executeFlashErase+0x7e>
		{
			flashEraseHandle.TypeErase = FLASH_TYPEERASE_MASSERASE;
 800b8a4:	2301      	movs	r3, #1
 800b8a6:	613b      	str	r3, [r7, #16]
			flashEraseHandle.Banks = FLASH_BANK_2;
 800b8a8:	2302      	movs	r3, #2
 800b8aa:	617b      	str	r3, [r7, #20]
			HAL_FLASH_Unlock();
 800b8ac:	f7f5 f9ec 	bl	8000c88 <HAL_FLASH_Unlock>
			flashEraseHandle.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 800b8b0:	2302      	movs	r3, #2
 800b8b2:	623b      	str	r3, [r7, #32]
			status = (uint8_t) HAL_FLASHEx_Erase(&flashEraseHandle, &sectorError);
 800b8b4:	f107 020c 	add.w	r2, r7, #12
 800b8b8:	f107 0310 	add.w	r3, r7, #16
 800b8bc:	4611      	mov	r1, r2
 800b8be:	4618      	mov	r0, r3
 800b8c0:	f7f5 fb52 	bl	8000f68 <HAL_FLASHEx_Erase>
 800b8c4:	4603      	mov	r3, r0
 800b8c6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			HAL_FLASH_Lock();
 800b8ca:	f7f5 f9ff 	bl	8000ccc <HAL_FLASH_Lock>
			HAL_Delay(1000);
 800b8ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800b8d2:	f7f4 fe4f 	bl	8000574 <HAL_Delay>
			flashEraseHandle.Banks = FLASH_BANK_1;
 800b8d6:	2301      	movs	r3, #1
 800b8d8:	617b      	str	r3, [r7, #20]
			HAL_FLASH_Unlock();
 800b8da:	f7f5 f9d5 	bl	8000c88 <HAL_FLASH_Unlock>
			flashEraseHandle.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 800b8de:	2302      	movs	r3, #2
 800b8e0:	623b      	str	r3, [r7, #32]
			status = (uint8_t) HAL_FLASHEx_Erase(&flashEraseHandle, &sectorError);
 800b8e2:	f107 020c 	add.w	r2, r7, #12
 800b8e6:	f107 0310 	add.w	r3, r7, #16
 800b8ea:	4611      	mov	r1, r2
 800b8ec:	4618      	mov	r0, r3
 800b8ee:	f7f5 fb3b 	bl	8000f68 <HAL_FLASHEx_Erase>
 800b8f2:	4603      	mov	r3, r0
 800b8f4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			HAL_FLASH_Lock();
 800b8f8:	f7f5 f9e8 	bl	8000ccc <HAL_FLASH_Lock>
			return status;
 800b8fc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b900:	e02d      	b.n	800b95e <executeFlashErase+0xda>

		}
		else
		{
			uint8_t remainingSectors = MAX_FLASH_SECTORS - sectorNumber;
 800b902:	79fb      	ldrb	r3, [r7, #7]
 800b904:	f1c3 0317 	rsb	r3, r3, #23
 800b908:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if(numberOfSectors > remainingSectors) numberOfSectors = remainingSectors;
 800b90c:	79ba      	ldrb	r2, [r7, #6]
 800b90e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b912:	429a      	cmp	r2, r3
 800b914:	d902      	bls.n	800b91c <executeFlashErase+0x98>
 800b916:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b91a:	71bb      	strb	r3, [r7, #6]
			flashEraseHandle.TypeErase = FLASH_TYPEERASE_SECTORS;
 800b91c:	2300      	movs	r3, #0
 800b91e:	613b      	str	r3, [r7, #16]
			flashEraseHandle.Sector = sectorNumber; // this is the initial sector
 800b920:	79fb      	ldrb	r3, [r7, #7]
 800b922:	61bb      	str	r3, [r7, #24]
			flashEraseHandle.NbSectors = numberOfSectors;
 800b924:	79bb      	ldrb	r3, [r7, #6]
 800b926:	61fb      	str	r3, [r7, #28]
			if(sectorNumber < 12)
 800b928:	79fb      	ldrb	r3, [r7, #7]
 800b92a:	2b0b      	cmp	r3, #11
 800b92c:	d802      	bhi.n	800b934 <executeFlashErase+0xb0>
			{
				flashEraseHandle.Banks = FLASH_BANK_1;
 800b92e:	2301      	movs	r3, #1
 800b930:	617b      	str	r3, [r7, #20]
 800b932:	e001      	b.n	800b938 <executeFlashErase+0xb4>
			}
			else
			{
				flashEraseHandle.Banks = FLASH_BANK_2;
 800b934:	2302      	movs	r3, #2
 800b936:	617b      	str	r3, [r7, #20]
			}
			HAL_FLASH_Unlock();
 800b938:	f7f5 f9a6 	bl	8000c88 <HAL_FLASH_Unlock>
			flashEraseHandle.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 800b93c:	2302      	movs	r3, #2
 800b93e:	623b      	str	r3, [r7, #32]
			status = (uint8_t) HAL_FLASHEx_Erase(&flashEraseHandle, &sectorError);
 800b940:	f107 020c 	add.w	r2, r7, #12
 800b944:	f107 0310 	add.w	r3, r7, #16
 800b948:	4611      	mov	r1, r2
 800b94a:	4618      	mov	r0, r3
 800b94c:	f7f5 fb0c 	bl	8000f68 <HAL_FLASHEx_Erase>
 800b950:	4603      	mov	r3, r0
 800b952:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			HAL_FLASH_Lock();
 800b956:	f7f5 f9b9 	bl	8000ccc <HAL_FLASH_Lock>
			return status;
 800b95a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
		}

	}

   return 1;
}
 800b95e:	4618      	mov	r0, r3
 800b960:	3728      	adds	r7, #40	; 0x28
 800b962:	46bd      	mov	sp, r7
 800b964:	bd80      	pop	{r7, pc}

0800b966 <bootLoaderHandleGoToAddress>:




void bootLoaderHandleGoToAddress(uint8_t *rxBuf)
{
 800b966:	b580      	push	{r7, lr}
 800b968:	b08a      	sub	sp, #40	; 0x28
 800b96a:	af00      	add	r7, sp, #0
 800b96c:	6078      	str	r0, [r7, #4]
    uint8_t addrValid = ADDR_VALID;
 800b96e:	2300      	movs	r3, #0
 800b970:	72fb      	strb	r3, [r7, #11]
    uint8_t addrInvalid = ADDR_INVALID;
 800b972:	2301      	movs	r3, #1
 800b974:	72bb      	strb	r3, [r7, #10]
	uint32_t packetLength = rxBuf[0] + 1;
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	781b      	ldrb	r3, [r3, #0]
 800b97a:	3301      	adds	r3, #1
 800b97c:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t hostCRC = *(uint32_t *)(rxBuf + packetLength - CRC_PACKET_LENGTH);
 800b97e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b980:	3b04      	subs	r3, #4
 800b982:	687a      	ldr	r2, [r7, #4]
 800b984:	4413      	add	r3, r2
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	623b      	str	r3, [r7, #32]

	if(!bootLoaderVerifyCRC(rxBuf, packetLength - CRC_PACKET_LENGTH, hostCRC))
 800b98a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b98c:	3b04      	subs	r3, #4
 800b98e:	6a3a      	ldr	r2, [r7, #32]
 800b990:	4619      	mov	r1, r3
 800b992:	6878      	ldr	r0, [r7, #4]
 800b994:	f000 f92c 	bl	800bbf0 <bootLoaderVerifyCRC>
 800b998:	4603      	mov	r3, r0
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d12a      	bne.n	800b9f4 <bootLoaderHandleGoToAddress+0x8e>
	{
		bootLoaderSendAck(1);
 800b99e:	2001      	movs	r0, #1
 800b9a0:	f000 f95c 	bl	800bc5c <bootLoaderSendAck>

		uint32_t goAdress = *((uint32_t *)&rxBuf[2]);
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800b9aa:	61fb      	str	r3, [r7, #28]
		uint32_t* baseAdress = (uint32_t *)goAdress;
 800b9ac:	69fb      	ldr	r3, [r7, #28]
 800b9ae:	61bb      	str	r3, [r7, #24]
		if(verifyAddress(goAdress) == ADDR_VALID)
 800b9b0:	69f8      	ldr	r0, [r7, #28]
 800b9b2:	f000 f825 	bl	800ba00 <verifyAddress>
 800b9b6:	4603      	mov	r3, r0
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d114      	bne.n	800b9e6 <bootLoaderHandleGoToAddress+0x80>
		{
			bootLoaderUARTWriteData(&addrValid,sizeof(addrValid));
 800b9bc:	f107 030b 	add.w	r3, r7, #11
 800b9c0:	2101      	movs	r1, #1
 800b9c2:	4618      	mov	r0, r3
 800b9c4:	f000 f9a6 	bl	800bd14 <bootLoaderUARTWriteData>
  __ASM volatile ("cpsid i" : : : "memory");
 800b9c8:	b672      	cpsid	i
			__disable_irq();
			__set_MSP(*baseAdress);
 800b9ca:	69bb      	ldr	r3, [r7, #24]
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	f383 8808 	msr	MSP, r3
			uint32_t goToAddress = *(volatile uint32_t *)(baseAdress + 1);
 800b9d6:	69bb      	ldr	r3, [r7, #24]
 800b9d8:	685b      	ldr	r3, [r3, #4]
 800b9da:	617b      	str	r3, [r7, #20]
			void (*jumpToLocation) (void) = (void *)goToAddress;
 800b9dc:	697b      	ldr	r3, [r7, #20]
 800b9de:	613b      	str	r3, [r7, #16]
			jumpToLocation();
 800b9e0:	693b      	ldr	r3, [r7, #16]
 800b9e2:	4798      	blx	r3
	}
	else
	{
		bootLoaderSendNack();
	}
}
 800b9e4:	e008      	b.n	800b9f8 <bootLoaderHandleGoToAddress+0x92>
			bootLoaderUARTWriteData(&addrInvalid,sizeof(addrInvalid));
 800b9e6:	f107 030a 	add.w	r3, r7, #10
 800b9ea:	2101      	movs	r1, #1
 800b9ec:	4618      	mov	r0, r3
 800b9ee:	f000 f991 	bl	800bd14 <bootLoaderUARTWriteData>
}
 800b9f2:	e001      	b.n	800b9f8 <bootLoaderHandleGoToAddress+0x92>
		bootLoaderSendNack();
 800b9f4:	f000 f974 	bl	800bce0 <bootLoaderSendNack>
}
 800b9f8:	bf00      	nop
 800b9fa:	3728      	adds	r7, #40	; 0x28
 800b9fc:	46bd      	mov	sp, r7
 800b9fe:	bd80      	pop	{r7, pc}

0800ba00 <verifyAddress>:


uint8_t verifyAddress(uint32_t goAddress)
{
 800ba00:	b480      	push	{r7}
 800ba02:	b083      	sub	sp, #12
 800ba04:	af00      	add	r7, sp, #0
 800ba06:	6078      	str	r0, [r7, #4]
	//can we jump to sram2 memory ? yes
	//can we jump to backup sram memory ? yes
	//can we jump to peripheral memory ? its possible , but dont allow. so no
	//can we jump to external memory ? yes.

	if ( goAddress >= 0x08010000 && goAddress <= FLASH_END)
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	4a08      	ldr	r2, [pc, #32]	; (800ba2c <verifyAddress+0x2c>)
 800ba0c:	4293      	cmp	r3, r2
 800ba0e:	d905      	bls.n	800ba1c <verifyAddress+0x1c>
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	f1b3 6f02 	cmp.w	r3, #136314880	; 0x8200000
 800ba16:	d201      	bcs.n	800ba1c <verifyAddress+0x1c>
	{
		return ADDR_VALID;
 800ba18:	2300      	movs	r3, #0
 800ba1a:	e000      	b.n	800ba1e <verifyAddress+0x1e>
	}

	else
		return ADDR_INVALID;
 800ba1c:	2301      	movs	r3, #1
}
 800ba1e:	4618      	mov	r0, r3
 800ba20:	370c      	adds	r7, #12
 800ba22:	46bd      	mov	sp, r7
 800ba24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba28:	4770      	bx	lr
 800ba2a:	bf00      	nop
 800ba2c:	0800ffff 	.word	0x0800ffff

0800ba30 <bootLoaderHandleReadProtectionLevelStatus>:


void bootLoaderHandleReadProtectionLevelStatus(uint8_t *rxBuf)
{
 800ba30:	b580      	push	{r7, lr}
 800ba32:	b086      	sub	sp, #24
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	6078      	str	r0, [r7, #4]
	uint32_t packetLength = rxBuf[0] + 1;
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	781b      	ldrb	r3, [r3, #0]
 800ba3c:	3301      	adds	r3, #1
 800ba3e:	617b      	str	r3, [r7, #20]
	uint32_t hostCRC = *(uint32_t *)(rxBuf + packetLength - CRC_PACKET_LENGTH);
 800ba40:	697b      	ldr	r3, [r7, #20]
 800ba42:	3b04      	subs	r3, #4
 800ba44:	687a      	ldr	r2, [r7, #4]
 800ba46:	4413      	add	r3, r2
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	613b      	str	r3, [r7, #16]

	if(!bootLoaderVerifyCRC(rxBuf, packetLength - CRC_PACKET_LENGTH, hostCRC))
 800ba4c:	697b      	ldr	r3, [r7, #20]
 800ba4e:	3b04      	subs	r3, #4
 800ba50:	693a      	ldr	r2, [r7, #16]
 800ba52:	4619      	mov	r1, r3
 800ba54:	6878      	ldr	r0, [r7, #4]
 800ba56:	f000 f8cb 	bl	800bbf0 <bootLoaderVerifyCRC>
 800ba5a:	4603      	mov	r3, r0
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d10d      	bne.n	800ba7c <bootLoaderHandleReadProtectionLevelStatus+0x4c>
	{
		uint8_t rdpStatus = getFlashRDPLevel();
 800ba60:	f000 f812 	bl	800ba88 <getFlashRDPLevel>
 800ba64:	4603      	mov	r3, r0
 800ba66:	73fb      	strb	r3, [r7, #15]
		bootLoaderSendAck(sizeof(rdpStatus));
 800ba68:	2001      	movs	r0, #1
 800ba6a:	f000 f8f7 	bl	800bc5c <bootLoaderSendAck>
		bootLoaderUARTWriteData(&rdpStatus,sizeof(rdpStatus));
 800ba6e:	f107 030f 	add.w	r3, r7, #15
 800ba72:	2101      	movs	r1, #1
 800ba74:	4618      	mov	r0, r3
 800ba76:	f000 f94d 	bl	800bd14 <bootLoaderUARTWriteData>
	}
	else
	{
		bootLoaderSendNack();
	}
}
 800ba7a:	e001      	b.n	800ba80 <bootLoaderHandleReadProtectionLevelStatus+0x50>
		bootLoaderSendNack();
 800ba7c:	f000 f930 	bl	800bce0 <bootLoaderSendNack>
}
 800ba80:	bf00      	nop
 800ba82:	3718      	adds	r7, #24
 800ba84:	46bd      	mov	sp, r7
 800ba86:	bd80      	pop	{r7, pc}

0800ba88 <getFlashRDPLevel>:




uint8_t getFlashRDPLevel(void)
{
 800ba88:	b480      	push	{r7}
 800ba8a:	b083      	sub	sp, #12
 800ba8c:	af00      	add	r7, sp, #0

	uint8_t rdpStatus = 0;
 800ba8e:	2300      	movs	r3, #0
 800ba90:	71fb      	strb	r3, [r7, #7]
	volatile uint32_t *pOBAddr = (uint32_t*)0x1FFFC000;
 800ba92:	4b06      	ldr	r3, [pc, #24]	; (800baac <getFlashRDPLevel+0x24>)
 800ba94:	603b      	str	r3, [r7, #0]
	rdpStatus = (uint8_t)(*pOBAddr >> 8);
 800ba96:	683b      	ldr	r3, [r7, #0]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	0a1b      	lsrs	r3, r3, #8
 800ba9c:	71fb      	strb	r3, [r7, #7]
	return rdpStatus;
 800ba9e:	79fb      	ldrb	r3, [r7, #7]
}
 800baa0:	4618      	mov	r0, r3
 800baa2:	370c      	adds	r7, #12
 800baa4:	46bd      	mov	sp, r7
 800baa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baaa:	4770      	bx	lr
 800baac:	1fffc000 	.word	0x1fffc000

0800bab0 <bootLoaderHandleGetChipId>:


void bootLoaderHandleGetChipId(uint8_t *rxBuf)
{
 800bab0:	b580      	push	{r7, lr}
 800bab2:	b086      	sub	sp, #24
 800bab4:	af00      	add	r7, sp, #0
 800bab6:	6078      	str	r0, [r7, #4]

	uint32_t packetLength = rxBuf[0] + 1;
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	781b      	ldrb	r3, [r3, #0]
 800babc:	3301      	adds	r3, #1
 800babe:	617b      	str	r3, [r7, #20]
	uint32_t hostCRC = *(uint32_t *)(rxBuf + packetLength - CRC_PACKET_LENGTH);
 800bac0:	697b      	ldr	r3, [r7, #20]
 800bac2:	3b04      	subs	r3, #4
 800bac4:	687a      	ldr	r2, [r7, #4]
 800bac6:	4413      	add	r3, r2
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	613b      	str	r3, [r7, #16]

	if(!bootLoaderVerifyCRC(rxBuf, packetLength - CRC_PACKET_LENGTH, hostCRC))
 800bacc:	697b      	ldr	r3, [r7, #20]
 800bace:	3b04      	subs	r3, #4
 800bad0:	693a      	ldr	r2, [r7, #16]
 800bad2:	4619      	mov	r1, r3
 800bad4:	6878      	ldr	r0, [r7, #4]
 800bad6:	f000 f88b 	bl	800bbf0 <bootLoaderVerifyCRC>
 800bada:	4603      	mov	r3, r0
 800badc:	2b00      	cmp	r3, #0
 800bade:	d10d      	bne.n	800bafc <bootLoaderHandleGetChipId+0x4c>
	{
		uint16_t chipId = getMcuChipId();
 800bae0:	f000 f812 	bl	800bb08 <getMcuChipId>
 800bae4:	4603      	mov	r3, r0
 800bae6:	81fb      	strh	r3, [r7, #14]
		bootLoaderSendAck(sizeof(chipId));
 800bae8:	2002      	movs	r0, #2
 800baea:	f000 f8b7 	bl	800bc5c <bootLoaderSendAck>
		bootLoaderUARTWriteData((uint8_t *)&chipId,sizeof(chipId));
 800baee:	f107 030e 	add.w	r3, r7, #14
 800baf2:	2102      	movs	r1, #2
 800baf4:	4618      	mov	r0, r3
 800baf6:	f000 f90d 	bl	800bd14 <bootLoaderUARTWriteData>
	else
	{
		bootLoaderSendNack();
	}

}
 800bafa:	e001      	b.n	800bb00 <bootLoaderHandleGetChipId+0x50>
		bootLoaderSendNack();
 800bafc:	f000 f8f0 	bl	800bce0 <bootLoaderSendNack>
}
 800bb00:	bf00      	nop
 800bb02:	3718      	adds	r7, #24
 800bb04:	46bd      	mov	sp, r7
 800bb06:	bd80      	pop	{r7, pc}

0800bb08 <getMcuChipId>:

uint16_t getMcuChipId(void)
{
 800bb08:	b480      	push	{r7}
 800bb0a:	af00      	add	r7, sp, #0
	return((uint16_t)(DBGMCU->IDCODE) & 0x0FFF);
 800bb0c:	4b05      	ldr	r3, [pc, #20]	; (800bb24 <getMcuChipId+0x1c>)
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	b29b      	uxth	r3, r3
 800bb12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bb16:	b29b      	uxth	r3, r3
}
 800bb18:	4618      	mov	r0, r3
 800bb1a:	46bd      	mov	sp, r7
 800bb1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb20:	4770      	bx	lr
 800bb22:	bf00      	nop
 800bb24:	e0042000 	.word	0xe0042000

0800bb28 <bootLoaderHandleGetVersion>:


void bootLoaderHandleGetVersion(uint8_t *rxBuf)
{
 800bb28:	b580      	push	{r7, lr}
 800bb2a:	b086      	sub	sp, #24
 800bb2c:	af00      	add	r7, sp, #0
 800bb2e:	6078      	str	r0, [r7, #4]
	uint8_t blVersion = 0;
 800bb30:	2300      	movs	r3, #0
 800bb32:	73fb      	strb	r3, [r7, #15]
	uint32_t packetLength = rxBuf[0] + 1;
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	781b      	ldrb	r3, [r3, #0]
 800bb38:	3301      	adds	r3, #1
 800bb3a:	617b      	str	r3, [r7, #20]
	uint32_t hostCRC = *(uint32_t *)(rxBuf + packetLength - CRC_PACKET_LENGTH);
 800bb3c:	697b      	ldr	r3, [r7, #20]
 800bb3e:	3b04      	subs	r3, #4
 800bb40:	687a      	ldr	r2, [r7, #4]
 800bb42:	4413      	add	r3, r2
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	613b      	str	r3, [r7, #16]

	if(!bootLoaderVerifyCRC(rxBuf, packetLength - CRC_PACKET_LENGTH, hostCRC))
 800bb48:	697b      	ldr	r3, [r7, #20]
 800bb4a:	3b04      	subs	r3, #4
 800bb4c:	693a      	ldr	r2, [r7, #16]
 800bb4e:	4619      	mov	r1, r3
 800bb50:	6878      	ldr	r0, [r7, #4]
 800bb52:	f000 f84d 	bl	800bbf0 <bootLoaderVerifyCRC>
 800bb56:	4603      	mov	r3, r0
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d10d      	bne.n	800bb78 <bootLoaderHandleGetVersion+0x50>
	{
		bootLoaderSendAck(1);
 800bb5c:	2001      	movs	r0, #1
 800bb5e:	f000 f87d 	bl	800bc5c <bootLoaderSendAck>

		blVersion = getBootloaderVersion();
 800bb62:	f000 f8cf 	bl	800bd04 <getBootloaderVersion>
 800bb66:	4603      	mov	r3, r0
 800bb68:	73fb      	strb	r3, [r7, #15]
		bootLoaderUARTWriteData(&blVersion,1);
 800bb6a:	f107 030f 	add.w	r3, r7, #15
 800bb6e:	2101      	movs	r1, #1
 800bb70:	4618      	mov	r0, r3
 800bb72:	f000 f8cf 	bl	800bd14 <bootLoaderUARTWriteData>
	else
	{
		bootLoaderSendNack();
	}

}
 800bb76:	e001      	b.n	800bb7c <bootLoaderHandleGetVersion+0x54>
		bootLoaderSendNack();
 800bb78:	f000 f8b2 	bl	800bce0 <bootLoaderSendNack>
}
 800bb7c:	bf00      	nop
 800bb7e:	3718      	adds	r7, #24
 800bb80:	46bd      	mov	sp, r7
 800bb82:	bd80      	pop	{r7, pc}

0800bb84 <bootLoaderHandleGetHelp>:



void bootLoaderHandleGetHelp(uint8_t *rxBuf)
{
 800bb84:	b580      	push	{r7, lr}
 800bb86:	b086      	sub	sp, #24
 800bb88:	af00      	add	r7, sp, #0
 800bb8a:	6078      	str	r0, [r7, #4]
	uint8_t *pSupportedCommands = NULL;
 800bb8c:	2300      	movs	r3, #0
 800bb8e:	617b      	str	r3, [r7, #20]
	uint32_t packetLength = rxBuf[0] + 1;
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	781b      	ldrb	r3, [r3, #0]
 800bb94:	3301      	adds	r3, #1
 800bb96:	613b      	str	r3, [r7, #16]
	uint32_t hostCRC = *(uint32_t *)(rxBuf + packetLength - CRC_PACKET_LENGTH);
 800bb98:	693b      	ldr	r3, [r7, #16]
 800bb9a:	3b04      	subs	r3, #4
 800bb9c:	687a      	ldr	r2, [r7, #4]
 800bb9e:	4413      	add	r3, r2
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	60fb      	str	r3, [r7, #12]

	if(!bootLoaderVerifyCRC(rxBuf, packetLength - CRC_PACKET_LENGTH, hostCRC))
 800bba4:	693b      	ldr	r3, [r7, #16]
 800bba6:	3b04      	subs	r3, #4
 800bba8:	68fa      	ldr	r2, [r7, #12]
 800bbaa:	4619      	mov	r1, r3
 800bbac:	6878      	ldr	r0, [r7, #4]
 800bbae:	f000 f81f 	bl	800bbf0 <bootLoaderVerifyCRC>
 800bbb2:	4603      	mov	r3, r0
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d10a      	bne.n	800bbce <bootLoaderHandleGetHelp+0x4a>
	{
		bootLoaderSendAck(sizeof(supportedCommands));
 800bbb8:	200b      	movs	r0, #11
 800bbba:	f000 f84f 	bl	800bc5c <bootLoaderSendAck>

		pSupportedCommands = getBootloaderHelp();
 800bbbe:	f000 f80d 	bl	800bbdc <getBootloaderHelp>
 800bbc2:	6178      	str	r0, [r7, #20]
		bootLoaderUARTWriteData(pSupportedCommands,sizeof(pSupportedCommands));
 800bbc4:	2104      	movs	r1, #4
 800bbc6:	6978      	ldr	r0, [r7, #20]
 800bbc8:	f000 f8a4 	bl	800bd14 <bootLoaderUARTWriteData>
	}
	else
	{
		bootLoaderSendNack();
	}
}
 800bbcc:	e001      	b.n	800bbd2 <bootLoaderHandleGetHelp+0x4e>
		bootLoaderSendNack();
 800bbce:	f000 f887 	bl	800bce0 <bootLoaderSendNack>
}
 800bbd2:	bf00      	nop
 800bbd4:	3718      	adds	r7, #24
 800bbd6:	46bd      	mov	sp, r7
 800bbd8:	bd80      	pop	{r7, pc}
	...

0800bbdc <getBootloaderHelp>:



uint8_t* getBootloaderHelp(void)
{
 800bbdc:	b480      	push	{r7}
 800bbde:	af00      	add	r7, sp, #0
	return supportedCommands;
 800bbe0:	4b02      	ldr	r3, [pc, #8]	; (800bbec <getBootloaderHelp+0x10>)
}
 800bbe2:	4618      	mov	r0, r3
 800bbe4:	46bd      	mov	sp, r7
 800bbe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbea:	4770      	bx	lr
 800bbec:	2000002c 	.word	0x2000002c

0800bbf0 <bootLoaderVerifyCRC>:


uint8_t bootLoaderVerifyCRC(uint8_t *pData, uint32_t len, uint32_t crcHost)
{
 800bbf0:	b580      	push	{r7, lr}
 800bbf2:	b088      	sub	sp, #32
 800bbf4:	af00      	add	r7, sp, #0
 800bbf6:	60f8      	str	r0, [r7, #12]
 800bbf8:	60b9      	str	r1, [r7, #8]
 800bbfa:	607a      	str	r2, [r7, #4]
	uint32_t uwCRCValue = 0xFF;
 800bbfc:	23ff      	movs	r3, #255	; 0xff
 800bbfe:	61fb      	str	r3, [r7, #28]
	uint32_t tempData = 0;
 800bc00:	2300      	movs	r3, #0
 800bc02:	617b      	str	r3, [r7, #20]

	for(uint32_t i = 0; i < len ; i ++)
 800bc04:	2300      	movs	r3, #0
 800bc06:	61bb      	str	r3, [r7, #24]
 800bc08:	e00f      	b.n	800bc2a <bootLoaderVerifyCRC+0x3a>
	{
		tempData = pData[i];
 800bc0a:	68fa      	ldr	r2, [r7, #12]
 800bc0c:	69bb      	ldr	r3, [r7, #24]
 800bc0e:	4413      	add	r3, r2
 800bc10:	781b      	ldrb	r3, [r3, #0]
 800bc12:	617b      	str	r3, [r7, #20]
		uwCRCValue = HAL_CRC_Accumulate(&hcrc, &tempData, 1);
 800bc14:	f107 0314 	add.w	r3, r7, #20
 800bc18:	2201      	movs	r2, #1
 800bc1a:	4619      	mov	r1, r3
 800bc1c:	480e      	ldr	r0, [pc, #56]	; (800bc58 <bootLoaderVerifyCRC+0x68>)
 800bc1e:	f7f4 fdc9 	bl	80007b4 <HAL_CRC_Accumulate>
 800bc22:	61f8      	str	r0, [r7, #28]
	for(uint32_t i = 0; i < len ; i ++)
 800bc24:	69bb      	ldr	r3, [r7, #24]
 800bc26:	3301      	adds	r3, #1
 800bc28:	61bb      	str	r3, [r7, #24]
 800bc2a:	69ba      	ldr	r2, [r7, #24]
 800bc2c:	68bb      	ldr	r3, [r7, #8]
 800bc2e:	429a      	cmp	r2, r3
 800bc30:	d3eb      	bcc.n	800bc0a <bootLoaderVerifyCRC+0x1a>
	}

	 __HAL_CRC_DR_RESET(&hcrc);
 800bc32:	4b09      	ldr	r3, [pc, #36]	; (800bc58 <bootLoaderVerifyCRC+0x68>)
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	689a      	ldr	r2, [r3, #8]
 800bc38:	4b07      	ldr	r3, [pc, #28]	; (800bc58 <bootLoaderVerifyCRC+0x68>)
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	f042 0201 	orr.w	r2, r2, #1
 800bc40:	609a      	str	r2, [r3, #8]
	if(uwCRCValue == crcHost)
 800bc42:	69fa      	ldr	r2, [r7, #28]
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	429a      	cmp	r2, r3
 800bc48:	d101      	bne.n	800bc4e <bootLoaderVerifyCRC+0x5e>
	{
		return 0;
 800bc4a:	2300      	movs	r3, #0
 800bc4c:	e000      	b.n	800bc50 <bootLoaderVerifyCRC+0x60>
	}

	return 1;
 800bc4e:	2301      	movs	r3, #1
}
 800bc50:	4618      	mov	r0, r3
 800bc52:	3720      	adds	r7, #32
 800bc54:	46bd      	mov	sp, r7
 800bc56:	bd80      	pop	{r7, pc}
 800bc58:	20008678 	.word	0x20008678

0800bc5c <bootLoaderSendAck>:



void bootLoaderSendAck(uint8_t followLen)
{
 800bc5c:	b5b0      	push	{r4, r5, r7, lr}
 800bc5e:	b086      	sub	sp, #24
 800bc60:	af00      	add	r7, sp, #0
 800bc62:	4603      	mov	r3, r0
 800bc64:	71fb      	strb	r3, [r7, #7]
 800bc66:	466b      	mov	r3, sp
 800bc68:	461d      	mov	r5, r3
	uint8_t lenOfAck = 2;
 800bc6a:	2302      	movs	r3, #2
 800bc6c:	75fb      	strb	r3, [r7, #23]
	uint8_t ack[lenOfAck];
 800bc6e:	7df8      	ldrb	r0, [r7, #23]
 800bc70:	4603      	mov	r3, r0
 800bc72:	3b01      	subs	r3, #1
 800bc74:	613b      	str	r3, [r7, #16]
 800bc76:	b2c1      	uxtb	r1, r0
 800bc78:	f04f 0200 	mov.w	r2, #0
 800bc7c:	f04f 0300 	mov.w	r3, #0
 800bc80:	f04f 0400 	mov.w	r4, #0
 800bc84:	00d4      	lsls	r4, r2, #3
 800bc86:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800bc8a:	00cb      	lsls	r3, r1, #3
 800bc8c:	b2c1      	uxtb	r1, r0
 800bc8e:	f04f 0200 	mov.w	r2, #0
 800bc92:	f04f 0300 	mov.w	r3, #0
 800bc96:	f04f 0400 	mov.w	r4, #0
 800bc9a:	00d4      	lsls	r4, r2, #3
 800bc9c:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800bca0:	00cb      	lsls	r3, r1, #3
 800bca2:	4603      	mov	r3, r0
 800bca4:	3307      	adds	r3, #7
 800bca6:	08db      	lsrs	r3, r3, #3
 800bca8:	00db      	lsls	r3, r3, #3
 800bcaa:	ebad 0d03 	sub.w	sp, sp, r3
 800bcae:	466b      	mov	r3, sp
 800bcb0:	3300      	adds	r3, #0
 800bcb2:	60fb      	str	r3, [r7, #12]
	ack[0] = BL_ACK;
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	22a5      	movs	r2, #165	; 0xa5
 800bcb8:	701a      	strb	r2, [r3, #0]
	ack[1] = followLen;
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	79fa      	ldrb	r2, [r7, #7]
 800bcbe:	705a      	strb	r2, [r3, #1]
	HAL_UART_Transmit(&huart1,ack,lenOfAck,HAL_MAX_DELAY);
 800bcc0:	68f9      	ldr	r1, [r7, #12]
 800bcc2:	7dfb      	ldrb	r3, [r7, #23]
 800bcc4:	b29a      	uxth	r2, r3
 800bcc6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bcca:	4804      	ldr	r0, [pc, #16]	; (800bcdc <bootLoaderSendAck+0x80>)
 800bccc:	f7f9 f94f 	bl	8004f6e <HAL_UART_Transmit>
 800bcd0:	46ad      	mov	sp, r5
}
 800bcd2:	bf00      	nop
 800bcd4:	3718      	adds	r7, #24
 800bcd6:	46bd      	mov	sp, r7
 800bcd8:	bdb0      	pop	{r4, r5, r7, pc}
 800bcda:	bf00      	nop
 800bcdc:	20008728 	.word	0x20008728

0800bce0 <bootLoaderSendNack>:


void bootLoaderSendNack(void)
{
 800bce0:	b580      	push	{r7, lr}
 800bce2:	b082      	sub	sp, #8
 800bce4:	af00      	add	r7, sp, #0
	uint8_t nack = BL_NACK;
 800bce6:	237f      	movs	r3, #127	; 0x7f
 800bce8:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart1, &nack, 1, HAL_MAX_DELAY);
 800bcea:	1df9      	adds	r1, r7, #7
 800bcec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bcf0:	2201      	movs	r2, #1
 800bcf2:	4803      	ldr	r0, [pc, #12]	; (800bd00 <bootLoaderSendNack+0x20>)
 800bcf4:	f7f9 f93b 	bl	8004f6e <HAL_UART_Transmit>
}
 800bcf8:	bf00      	nop
 800bcfa:	3708      	adds	r7, #8
 800bcfc:	46bd      	mov	sp, r7
 800bcfe:	bd80      	pop	{r7, pc}
 800bd00:	20008728 	.word	0x20008728

0800bd04 <getBootloaderVersion>:

uint8_t getBootloaderVersion(void)
{
 800bd04:	b480      	push	{r7}
 800bd06:	af00      	add	r7, sp, #0
	return (uint8_t)BL_VERSION;
 800bd08:	2301      	movs	r3, #1
}
 800bd0a:	4618      	mov	r0, r3
 800bd0c:	46bd      	mov	sp, r7
 800bd0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd12:	4770      	bx	lr

0800bd14 <bootLoaderUARTWriteData>:

void bootLoaderUARTWriteData(uint8_t *data, uint32_t len)
{
 800bd14:	b580      	push	{r7, lr}
 800bd16:	b082      	sub	sp, #8
 800bd18:	af00      	add	r7, sp, #0
 800bd1a:	6078      	str	r0, [r7, #4]
 800bd1c:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(&huart1, data, len, HAL_MAX_DELAY);
 800bd1e:	683b      	ldr	r3, [r7, #0]
 800bd20:	b29a      	uxth	r2, r3
 800bd22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bd26:	6879      	ldr	r1, [r7, #4]
 800bd28:	4803      	ldr	r0, [pc, #12]	; (800bd38 <bootLoaderUARTWriteData+0x24>)
 800bd2a:	f7f9 f920 	bl	8004f6e <HAL_UART_Transmit>
}
 800bd2e:	bf00      	nop
 800bd30:	3708      	adds	r7, #8
 800bd32:	46bd      	mov	sp, r7
 800bd34:	bd80      	pop	{r7, pc}
 800bd36:	bf00      	nop
 800bd38:	20008728 	.word	0x20008728

0800bd3c <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800bd3c:	b580      	push	{r7, lr}
 800bd3e:	b082      	sub	sp, #8
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 800bd44:	f000 fc56 	bl	800c5f4 <MX_USB_HOST_Init>

  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  if(HAL_GPIO_ReadPin(GPIOA, Push_Button_Pin) == GPIO_PIN_RESET)
 800bd48:	2101      	movs	r1, #1
 800bd4a:	4807      	ldr	r0, [pc, #28]	; (800bd68 <StartDefaultTask+0x2c>)
 800bd4c:	f7f5 fbf6 	bl	800153c <HAL_GPIO_ReadPin>
 800bd50:	4603      	mov	r3, r0
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d102      	bne.n	800bd5c <StartDefaultTask+0x20>
  {
	  enterBootLoaderMode();
 800bd56:	f7ff fc53 	bl	800b600 <enterBootLoaderMode>
  {
	  enterUserApplicationMode();
  }

  /* USER CODE END 5 */
}
 800bd5a:	e001      	b.n	800bd60 <StartDefaultTask+0x24>
	  enterUserApplicationMode();
 800bd5c:	f7ff fc56 	bl	800b60c <enterUserApplicationMode>
}
 800bd60:	bf00      	nop
 800bd62:	3708      	adds	r7, #8
 800bd64:	46bd      	mov	sp, r7
 800bd66:	bd80      	pop	{r7, pc}
 800bd68:	40020000 	.word	0x40020000

0800bd6c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bd6c:	b580      	push	{r7, lr}
 800bd6e:	b082      	sub	sp, #8
 800bd70:	af00      	add	r7, sp, #0
 800bd72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	4a04      	ldr	r2, [pc, #16]	; (800bd8c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800bd7a:	4293      	cmp	r3, r2
 800bd7c:	d101      	bne.n	800bd82 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800bd7e:	f7f4 fbd9 	bl	8000534 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800bd82:	bf00      	nop
 800bd84:	3708      	adds	r7, #8
 800bd86:	46bd      	mov	sp, r7
 800bd88:	bd80      	pop	{r7, pc}
 800bd8a:	bf00      	nop
 800bd8c:	40001000 	.word	0x40001000

0800bd90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800bd90:	b480      	push	{r7}
 800bd92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800bd94:	bf00      	nop
 800bd96:	46bd      	mov	sp, r7
 800bd98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd9c:	4770      	bx	lr
	...

0800bda0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800bda0:	b580      	push	{r7, lr}
 800bda2:	b082      	sub	sp, #8
 800bda4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800bda6:	2300      	movs	r3, #0
 800bda8:	607b      	str	r3, [r7, #4]
 800bdaa:	4b12      	ldr	r3, [pc, #72]	; (800bdf4 <HAL_MspInit+0x54>)
 800bdac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bdae:	4a11      	ldr	r2, [pc, #68]	; (800bdf4 <HAL_MspInit+0x54>)
 800bdb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800bdb4:	6453      	str	r3, [r2, #68]	; 0x44
 800bdb6:	4b0f      	ldr	r3, [pc, #60]	; (800bdf4 <HAL_MspInit+0x54>)
 800bdb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bdba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bdbe:	607b      	str	r3, [r7, #4]
 800bdc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800bdc2:	2300      	movs	r3, #0
 800bdc4:	603b      	str	r3, [r7, #0]
 800bdc6:	4b0b      	ldr	r3, [pc, #44]	; (800bdf4 <HAL_MspInit+0x54>)
 800bdc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdca:	4a0a      	ldr	r2, [pc, #40]	; (800bdf4 <HAL_MspInit+0x54>)
 800bdcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bdd0:	6413      	str	r3, [r2, #64]	; 0x40
 800bdd2:	4b08      	ldr	r3, [pc, #32]	; (800bdf4 <HAL_MspInit+0x54>)
 800bdd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bdda:	603b      	str	r3, [r7, #0]
 800bddc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800bdde:	2200      	movs	r2, #0
 800bde0:	210f      	movs	r1, #15
 800bde2:	f06f 0001 	mvn.w	r0, #1
 800bde6:	f7f4 fc9f 	bl	8000728 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800bdea:	bf00      	nop
 800bdec:	3708      	adds	r7, #8
 800bdee:	46bd      	mov	sp, r7
 800bdf0:	bd80      	pop	{r7, pc}
 800bdf2:	bf00      	nop
 800bdf4:	40023800 	.word	0x40023800

0800bdf8 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800bdf8:	b480      	push	{r7}
 800bdfa:	b085      	sub	sp, #20
 800bdfc:	af00      	add	r7, sp, #0
 800bdfe:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	4a0b      	ldr	r2, [pc, #44]	; (800be34 <HAL_CRC_MspInit+0x3c>)
 800be06:	4293      	cmp	r3, r2
 800be08:	d10d      	bne.n	800be26 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800be0a:	2300      	movs	r3, #0
 800be0c:	60fb      	str	r3, [r7, #12]
 800be0e:	4b0a      	ldr	r3, [pc, #40]	; (800be38 <HAL_CRC_MspInit+0x40>)
 800be10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be12:	4a09      	ldr	r2, [pc, #36]	; (800be38 <HAL_CRC_MspInit+0x40>)
 800be14:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800be18:	6313      	str	r3, [r2, #48]	; 0x30
 800be1a:	4b07      	ldr	r3, [pc, #28]	; (800be38 <HAL_CRC_MspInit+0x40>)
 800be1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800be22:	60fb      	str	r3, [r7, #12]
 800be24:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800be26:	bf00      	nop
 800be28:	3714      	adds	r7, #20
 800be2a:	46bd      	mov	sp, r7
 800be2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be30:	4770      	bx	lr
 800be32:	bf00      	nop
 800be34:	40023000 	.word	0x40023000
 800be38:	40023800 	.word	0x40023800

0800be3c <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 800be3c:	b580      	push	{r7, lr}
 800be3e:	b084      	sub	sp, #16
 800be40:	af00      	add	r7, sp, #0
 800be42:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	4a0e      	ldr	r2, [pc, #56]	; (800be84 <HAL_DMA2D_MspInit+0x48>)
 800be4a:	4293      	cmp	r3, r2
 800be4c:	d115      	bne.n	800be7a <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800be4e:	2300      	movs	r3, #0
 800be50:	60fb      	str	r3, [r7, #12]
 800be52:	4b0d      	ldr	r3, [pc, #52]	; (800be88 <HAL_DMA2D_MspInit+0x4c>)
 800be54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be56:	4a0c      	ldr	r2, [pc, #48]	; (800be88 <HAL_DMA2D_MspInit+0x4c>)
 800be58:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800be5c:	6313      	str	r3, [r2, #48]	; 0x30
 800be5e:	4b0a      	ldr	r3, [pc, #40]	; (800be88 <HAL_DMA2D_MspInit+0x4c>)
 800be60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be62:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800be66:	60fb      	str	r3, [r7, #12]
 800be68:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 800be6a:	2200      	movs	r2, #0
 800be6c:	2105      	movs	r1, #5
 800be6e:	205a      	movs	r0, #90	; 0x5a
 800be70:	f7f4 fc5a 	bl	8000728 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800be74:	205a      	movs	r0, #90	; 0x5a
 800be76:	f7f4 fc73 	bl	8000760 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 800be7a:	bf00      	nop
 800be7c:	3710      	adds	r7, #16
 800be7e:	46bd      	mov	sp, r7
 800be80:	bd80      	pop	{r7, pc}
 800be82:	bf00      	nop
 800be84:	4002b000 	.word	0x4002b000
 800be88:	40023800 	.word	0x40023800

0800be8c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800be8c:	b580      	push	{r7, lr}
 800be8e:	b08a      	sub	sp, #40	; 0x28
 800be90:	af00      	add	r7, sp, #0
 800be92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800be94:	f107 0314 	add.w	r3, r7, #20
 800be98:	2200      	movs	r2, #0
 800be9a:	601a      	str	r2, [r3, #0]
 800be9c:	605a      	str	r2, [r3, #4]
 800be9e:	609a      	str	r2, [r3, #8]
 800bea0:	60da      	str	r2, [r3, #12]
 800bea2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	4a29      	ldr	r2, [pc, #164]	; (800bf50 <HAL_I2C_MspInit+0xc4>)
 800beaa:	4293      	cmp	r3, r2
 800beac:	d14b      	bne.n	800bf46 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800beae:	2300      	movs	r3, #0
 800beb0:	613b      	str	r3, [r7, #16]
 800beb2:	4b28      	ldr	r3, [pc, #160]	; (800bf54 <HAL_I2C_MspInit+0xc8>)
 800beb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800beb6:	4a27      	ldr	r2, [pc, #156]	; (800bf54 <HAL_I2C_MspInit+0xc8>)
 800beb8:	f043 0304 	orr.w	r3, r3, #4
 800bebc:	6313      	str	r3, [r2, #48]	; 0x30
 800bebe:	4b25      	ldr	r3, [pc, #148]	; (800bf54 <HAL_I2C_MspInit+0xc8>)
 800bec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bec2:	f003 0304 	and.w	r3, r3, #4
 800bec6:	613b      	str	r3, [r7, #16]
 800bec8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800beca:	2300      	movs	r3, #0
 800becc:	60fb      	str	r3, [r7, #12]
 800bece:	4b21      	ldr	r3, [pc, #132]	; (800bf54 <HAL_I2C_MspInit+0xc8>)
 800bed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bed2:	4a20      	ldr	r2, [pc, #128]	; (800bf54 <HAL_I2C_MspInit+0xc8>)
 800bed4:	f043 0301 	orr.w	r3, r3, #1
 800bed8:	6313      	str	r3, [r2, #48]	; 0x30
 800beda:	4b1e      	ldr	r3, [pc, #120]	; (800bf54 <HAL_I2C_MspInit+0xc8>)
 800bedc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bede:	f003 0301 	and.w	r3, r3, #1
 800bee2:	60fb      	str	r3, [r7, #12]
 800bee4:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration    
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL 
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 800bee6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800beea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800beec:	2312      	movs	r3, #18
 800beee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800bef0:	2301      	movs	r3, #1
 800bef2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bef4:	2300      	movs	r3, #0
 800bef6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800bef8:	2304      	movs	r3, #4
 800befa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 800befc:	f107 0314 	add.w	r3, r7, #20
 800bf00:	4619      	mov	r1, r3
 800bf02:	4815      	ldr	r0, [pc, #84]	; (800bf58 <HAL_I2C_MspInit+0xcc>)
 800bf04:	f7f5 f970 	bl	80011e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 800bf08:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bf0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800bf0e:	2312      	movs	r3, #18
 800bf10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800bf12:	2301      	movs	r3, #1
 800bf14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bf16:	2300      	movs	r3, #0
 800bf18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800bf1a:	2304      	movs	r3, #4
 800bf1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 800bf1e:	f107 0314 	add.w	r3, r7, #20
 800bf22:	4619      	mov	r1, r3
 800bf24:	480d      	ldr	r0, [pc, #52]	; (800bf5c <HAL_I2C_MspInit+0xd0>)
 800bf26:	f7f5 f95f 	bl	80011e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800bf2a:	2300      	movs	r3, #0
 800bf2c:	60bb      	str	r3, [r7, #8]
 800bf2e:	4b09      	ldr	r3, [pc, #36]	; (800bf54 <HAL_I2C_MspInit+0xc8>)
 800bf30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf32:	4a08      	ldr	r2, [pc, #32]	; (800bf54 <HAL_I2C_MspInit+0xc8>)
 800bf34:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800bf38:	6413      	str	r3, [r2, #64]	; 0x40
 800bf3a:	4b06      	ldr	r3, [pc, #24]	; (800bf54 <HAL_I2C_MspInit+0xc8>)
 800bf3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf3e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bf42:	60bb      	str	r3, [r7, #8]
 800bf44:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800bf46:	bf00      	nop
 800bf48:	3728      	adds	r7, #40	; 0x28
 800bf4a:	46bd      	mov	sp, r7
 800bf4c:	bd80      	pop	{r7, pc}
 800bf4e:	bf00      	nop
 800bf50:	40005c00 	.word	0x40005c00
 800bf54:	40023800 	.word	0x40023800
 800bf58:	40020800 	.word	0x40020800
 800bf5c:	40020000 	.word	0x40020000

0800bf60 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 800bf60:	b580      	push	{r7, lr}
 800bf62:	b08e      	sub	sp, #56	; 0x38
 800bf64:	af00      	add	r7, sp, #0
 800bf66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bf68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bf6c:	2200      	movs	r2, #0
 800bf6e:	601a      	str	r2, [r3, #0]
 800bf70:	605a      	str	r2, [r3, #4]
 800bf72:	609a      	str	r2, [r3, #8]
 800bf74:	60da      	str	r2, [r3, #12]
 800bf76:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	4a7b      	ldr	r2, [pc, #492]	; (800c16c <HAL_LTDC_MspInit+0x20c>)
 800bf7e:	4293      	cmp	r3, r2
 800bf80:	f040 80f0 	bne.w	800c164 <HAL_LTDC_MspInit+0x204>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800bf84:	2300      	movs	r3, #0
 800bf86:	623b      	str	r3, [r7, #32]
 800bf88:	4b79      	ldr	r3, [pc, #484]	; (800c170 <HAL_LTDC_MspInit+0x210>)
 800bf8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf8c:	4a78      	ldr	r2, [pc, #480]	; (800c170 <HAL_LTDC_MspInit+0x210>)
 800bf8e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800bf92:	6453      	str	r3, [r2, #68]	; 0x44
 800bf94:	4b76      	ldr	r3, [pc, #472]	; (800c170 <HAL_LTDC_MspInit+0x210>)
 800bf96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf98:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800bf9c:	623b      	str	r3, [r7, #32]
 800bf9e:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800bfa0:	2300      	movs	r3, #0
 800bfa2:	61fb      	str	r3, [r7, #28]
 800bfa4:	4b72      	ldr	r3, [pc, #456]	; (800c170 <HAL_LTDC_MspInit+0x210>)
 800bfa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfa8:	4a71      	ldr	r2, [pc, #452]	; (800c170 <HAL_LTDC_MspInit+0x210>)
 800bfaa:	f043 0320 	orr.w	r3, r3, #32
 800bfae:	6313      	str	r3, [r2, #48]	; 0x30
 800bfb0:	4b6f      	ldr	r3, [pc, #444]	; (800c170 <HAL_LTDC_MspInit+0x210>)
 800bfb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfb4:	f003 0320 	and.w	r3, r3, #32
 800bfb8:	61fb      	str	r3, [r7, #28]
 800bfba:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bfbc:	2300      	movs	r3, #0
 800bfbe:	61bb      	str	r3, [r7, #24]
 800bfc0:	4b6b      	ldr	r3, [pc, #428]	; (800c170 <HAL_LTDC_MspInit+0x210>)
 800bfc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfc4:	4a6a      	ldr	r2, [pc, #424]	; (800c170 <HAL_LTDC_MspInit+0x210>)
 800bfc6:	f043 0301 	orr.w	r3, r3, #1
 800bfca:	6313      	str	r3, [r2, #48]	; 0x30
 800bfcc:	4b68      	ldr	r3, [pc, #416]	; (800c170 <HAL_LTDC_MspInit+0x210>)
 800bfce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfd0:	f003 0301 	and.w	r3, r3, #1
 800bfd4:	61bb      	str	r3, [r7, #24]
 800bfd6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800bfd8:	2300      	movs	r3, #0
 800bfda:	617b      	str	r3, [r7, #20]
 800bfdc:	4b64      	ldr	r3, [pc, #400]	; (800c170 <HAL_LTDC_MspInit+0x210>)
 800bfde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfe0:	4a63      	ldr	r2, [pc, #396]	; (800c170 <HAL_LTDC_MspInit+0x210>)
 800bfe2:	f043 0302 	orr.w	r3, r3, #2
 800bfe6:	6313      	str	r3, [r2, #48]	; 0x30
 800bfe8:	4b61      	ldr	r3, [pc, #388]	; (800c170 <HAL_LTDC_MspInit+0x210>)
 800bfea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfec:	f003 0302 	and.w	r3, r3, #2
 800bff0:	617b      	str	r3, [r7, #20]
 800bff2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800bff4:	2300      	movs	r3, #0
 800bff6:	613b      	str	r3, [r7, #16]
 800bff8:	4b5d      	ldr	r3, [pc, #372]	; (800c170 <HAL_LTDC_MspInit+0x210>)
 800bffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bffc:	4a5c      	ldr	r2, [pc, #368]	; (800c170 <HAL_LTDC_MspInit+0x210>)
 800bffe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c002:	6313      	str	r3, [r2, #48]	; 0x30
 800c004:	4b5a      	ldr	r3, [pc, #360]	; (800c170 <HAL_LTDC_MspInit+0x210>)
 800c006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c008:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c00c:	613b      	str	r3, [r7, #16]
 800c00e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800c010:	2300      	movs	r3, #0
 800c012:	60fb      	str	r3, [r7, #12]
 800c014:	4b56      	ldr	r3, [pc, #344]	; (800c170 <HAL_LTDC_MspInit+0x210>)
 800c016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c018:	4a55      	ldr	r2, [pc, #340]	; (800c170 <HAL_LTDC_MspInit+0x210>)
 800c01a:	f043 0304 	orr.w	r3, r3, #4
 800c01e:	6313      	str	r3, [r2, #48]	; 0x30
 800c020:	4b53      	ldr	r3, [pc, #332]	; (800c170 <HAL_LTDC_MspInit+0x210>)
 800c022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c024:	f003 0304 	and.w	r3, r3, #4
 800c028:	60fb      	str	r3, [r7, #12]
 800c02a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800c02c:	2300      	movs	r3, #0
 800c02e:	60bb      	str	r3, [r7, #8]
 800c030:	4b4f      	ldr	r3, [pc, #316]	; (800c170 <HAL_LTDC_MspInit+0x210>)
 800c032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c034:	4a4e      	ldr	r2, [pc, #312]	; (800c170 <HAL_LTDC_MspInit+0x210>)
 800c036:	f043 0308 	orr.w	r3, r3, #8
 800c03a:	6313      	str	r3, [r2, #48]	; 0x30
 800c03c:	4b4c      	ldr	r3, [pc, #304]	; (800c170 <HAL_LTDC_MspInit+0x210>)
 800c03e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c040:	f003 0308 	and.w	r3, r3, #8
 800c044:	60bb      	str	r3, [r7, #8]
 800c046:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7 
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 800c048:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c04c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c04e:	2302      	movs	r3, #2
 800c050:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c052:	2300      	movs	r3, #0
 800c054:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c056:	2300      	movs	r3, #0
 800c058:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800c05a:	230e      	movs	r3, #14
 800c05c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 800c05e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c062:	4619      	mov	r1, r3
 800c064:	4843      	ldr	r0, [pc, #268]	; (800c174 <HAL_LTDC_MspInit+0x214>)
 800c066:	f7f5 f8bf 	bl	80011e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin 
 800c06a:	f641 0358 	movw	r3, #6232	; 0x1858
 800c06e:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c070:	2302      	movs	r3, #2
 800c072:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c074:	2300      	movs	r3, #0
 800c076:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c078:	2300      	movs	r3, #0
 800c07a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800c07c:	230e      	movs	r3, #14
 800c07e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c080:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c084:	4619      	mov	r1, r3
 800c086:	483c      	ldr	r0, [pc, #240]	; (800c178 <HAL_LTDC_MspInit+0x218>)
 800c088:	f7f5 f8ae 	bl	80011e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 800c08c:	2303      	movs	r3, #3
 800c08e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c090:	2302      	movs	r3, #2
 800c092:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c094:	2300      	movs	r3, #0
 800c096:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c098:	2300      	movs	r3, #0
 800c09a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800c09c:	2309      	movs	r3, #9
 800c09e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c0a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c0a4:	4619      	mov	r1, r3
 800c0a6:	4835      	ldr	r0, [pc, #212]	; (800c17c <HAL_LTDC_MspInit+0x21c>)
 800c0a8:	f7f5 f89e 	bl	80011e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 800c0ac:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800c0b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c0b2:	2302      	movs	r3, #2
 800c0b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c0b6:	2300      	movs	r3, #0
 800c0b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c0ba:	2300      	movs	r3, #0
 800c0bc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800c0be:	230e      	movs	r3, #14
 800c0c0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c0c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c0c6:	4619      	mov	r1, r3
 800c0c8:	482c      	ldr	r0, [pc, #176]	; (800c17c <HAL_LTDC_MspInit+0x21c>)
 800c0ca:	f7f5 f88d 	bl	80011e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 800c0ce:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 800c0d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c0d4:	2302      	movs	r3, #2
 800c0d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c0d8:	2300      	movs	r3, #0
 800c0da:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c0dc:	2300      	movs	r3, #0
 800c0de:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800c0e0:	230e      	movs	r3, #14
 800c0e2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800c0e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c0e8:	4619      	mov	r1, r3
 800c0ea:	4825      	ldr	r0, [pc, #148]	; (800c180 <HAL_LTDC_MspInit+0x220>)
 800c0ec:	f7f5 f87c 	bl	80011e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 800c0f0:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 800c0f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c0f6:	2302      	movs	r3, #2
 800c0f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c0fa:	2300      	movs	r3, #0
 800c0fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c0fe:	2300      	movs	r3, #0
 800c100:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800c102:	230e      	movs	r3, #14
 800c104:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c106:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c10a:	4619      	mov	r1, r3
 800c10c:	481d      	ldr	r0, [pc, #116]	; (800c184 <HAL_LTDC_MspInit+0x224>)
 800c10e:	f7f5 f86b 	bl	80011e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 800c112:	2348      	movs	r3, #72	; 0x48
 800c114:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c116:	2302      	movs	r3, #2
 800c118:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c11a:	2300      	movs	r3, #0
 800c11c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c11e:	2300      	movs	r3, #0
 800c120:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800c122:	230e      	movs	r3, #14
 800c124:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800c126:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c12a:	4619      	mov	r1, r3
 800c12c:	4816      	ldr	r0, [pc, #88]	; (800c188 <HAL_LTDC_MspInit+0x228>)
 800c12e:	f7f5 f85b 	bl	80011e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 800c132:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800c136:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c138:	2302      	movs	r3, #2
 800c13a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c13c:	2300      	movs	r3, #0
 800c13e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c140:	2300      	movs	r3, #0
 800c142:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800c144:	2309      	movs	r3, #9
 800c146:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800c148:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c14c:	4619      	mov	r1, r3
 800c14e:	480c      	ldr	r0, [pc, #48]	; (800c180 <HAL_LTDC_MspInit+0x220>)
 800c150:	f7f5 f84a 	bl	80011e8 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 800c154:	2200      	movs	r2, #0
 800c156:	2105      	movs	r1, #5
 800c158:	2058      	movs	r0, #88	; 0x58
 800c15a:	f7f4 fae5 	bl	8000728 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800c15e:	2058      	movs	r0, #88	; 0x58
 800c160:	f7f4 fafe 	bl	8000760 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800c164:	bf00      	nop
 800c166:	3738      	adds	r7, #56	; 0x38
 800c168:	46bd      	mov	sp, r7
 800c16a:	bd80      	pop	{r7, pc}
 800c16c:	40016800 	.word	0x40016800
 800c170:	40023800 	.word	0x40023800
 800c174:	40021400 	.word	0x40021400
 800c178:	40020000 	.word	0x40020000
 800c17c:	40020400 	.word	0x40020400
 800c180:	40021800 	.word	0x40021800
 800c184:	40020800 	.word	0x40020800
 800c188:	40020c00 	.word	0x40020c00

0800c18c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800c18c:	b580      	push	{r7, lr}
 800c18e:	b08a      	sub	sp, #40	; 0x28
 800c190:	af00      	add	r7, sp, #0
 800c192:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c194:	f107 0314 	add.w	r3, r7, #20
 800c198:	2200      	movs	r2, #0
 800c19a:	601a      	str	r2, [r3, #0]
 800c19c:	605a      	str	r2, [r3, #4]
 800c19e:	609a      	str	r2, [r3, #8]
 800c1a0:	60da      	str	r2, [r3, #12]
 800c1a2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	4a19      	ldr	r2, [pc, #100]	; (800c210 <HAL_SPI_MspInit+0x84>)
 800c1aa:	4293      	cmp	r3, r2
 800c1ac:	d12c      	bne.n	800c208 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 800c1ae:	2300      	movs	r3, #0
 800c1b0:	613b      	str	r3, [r7, #16]
 800c1b2:	4b18      	ldr	r3, [pc, #96]	; (800c214 <HAL_SPI_MspInit+0x88>)
 800c1b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c1b6:	4a17      	ldr	r2, [pc, #92]	; (800c214 <HAL_SPI_MspInit+0x88>)
 800c1b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c1bc:	6453      	str	r3, [r2, #68]	; 0x44
 800c1be:	4b15      	ldr	r3, [pc, #84]	; (800c214 <HAL_SPI_MspInit+0x88>)
 800c1c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c1c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c1c6:	613b      	str	r3, [r7, #16]
 800c1c8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800c1ca:	2300      	movs	r3, #0
 800c1cc:	60fb      	str	r3, [r7, #12]
 800c1ce:	4b11      	ldr	r3, [pc, #68]	; (800c214 <HAL_SPI_MspInit+0x88>)
 800c1d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1d2:	4a10      	ldr	r2, [pc, #64]	; (800c214 <HAL_SPI_MspInit+0x88>)
 800c1d4:	f043 0320 	orr.w	r3, r3, #32
 800c1d8:	6313      	str	r3, [r2, #48]	; 0x30
 800c1da:	4b0e      	ldr	r3, [pc, #56]	; (800c214 <HAL_SPI_MspInit+0x88>)
 800c1dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1de:	f003 0320 	and.w	r3, r3, #32
 800c1e2:	60fb      	str	r3, [r7, #12]
 800c1e4:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration    
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI 
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 800c1e6:	f44f 7360 	mov.w	r3, #896	; 0x380
 800c1ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c1ec:	2302      	movs	r3, #2
 800c1ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c1f0:	2300      	movs	r3, #0
 800c1f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c1f4:	2300      	movs	r3, #0
 800c1f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800c1f8:	2305      	movs	r3, #5
 800c1fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800c1fc:	f107 0314 	add.w	r3, r7, #20
 800c200:	4619      	mov	r1, r3
 800c202:	4805      	ldr	r0, [pc, #20]	; (800c218 <HAL_SPI_MspInit+0x8c>)
 800c204:	f7f4 fff0 	bl	80011e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 800c208:	bf00      	nop
 800c20a:	3728      	adds	r7, #40	; 0x28
 800c20c:	46bd      	mov	sp, r7
 800c20e:	bd80      	pop	{r7, pc}
 800c210:	40015000 	.word	0x40015000
 800c214:	40023800 	.word	0x40023800
 800c218:	40021400 	.word	0x40021400

0800c21c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800c21c:	b480      	push	{r7}
 800c21e:	b085      	sub	sp, #20
 800c220:	af00      	add	r7, sp, #0
 800c222:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	4a0b      	ldr	r2, [pc, #44]	; (800c258 <HAL_TIM_Base_MspInit+0x3c>)
 800c22a:	4293      	cmp	r3, r2
 800c22c:	d10d      	bne.n	800c24a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800c22e:	2300      	movs	r3, #0
 800c230:	60fb      	str	r3, [r7, #12]
 800c232:	4b0a      	ldr	r3, [pc, #40]	; (800c25c <HAL_TIM_Base_MspInit+0x40>)
 800c234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c236:	4a09      	ldr	r2, [pc, #36]	; (800c25c <HAL_TIM_Base_MspInit+0x40>)
 800c238:	f043 0301 	orr.w	r3, r3, #1
 800c23c:	6453      	str	r3, [r2, #68]	; 0x44
 800c23e:	4b07      	ldr	r3, [pc, #28]	; (800c25c <HAL_TIM_Base_MspInit+0x40>)
 800c240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c242:	f003 0301 	and.w	r3, r3, #1
 800c246:	60fb      	str	r3, [r7, #12]
 800c248:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800c24a:	bf00      	nop
 800c24c:	3714      	adds	r7, #20
 800c24e:	46bd      	mov	sp, r7
 800c250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c254:	4770      	bx	lr
 800c256:	bf00      	nop
 800c258:	40010000 	.word	0x40010000
 800c25c:	40023800 	.word	0x40023800

0800c260 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800c260:	b580      	push	{r7, lr}
 800c262:	b08a      	sub	sp, #40	; 0x28
 800c264:	af00      	add	r7, sp, #0
 800c266:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c268:	f107 0314 	add.w	r3, r7, #20
 800c26c:	2200      	movs	r2, #0
 800c26e:	601a      	str	r2, [r3, #0]
 800c270:	605a      	str	r2, [r3, #4]
 800c272:	609a      	str	r2, [r3, #8]
 800c274:	60da      	str	r2, [r3, #12]
 800c276:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	4a19      	ldr	r2, [pc, #100]	; (800c2e4 <HAL_UART_MspInit+0x84>)
 800c27e:	4293      	cmp	r3, r2
 800c280:	d12c      	bne.n	800c2dc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800c282:	2300      	movs	r3, #0
 800c284:	613b      	str	r3, [r7, #16]
 800c286:	4b18      	ldr	r3, [pc, #96]	; (800c2e8 <HAL_UART_MspInit+0x88>)
 800c288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c28a:	4a17      	ldr	r2, [pc, #92]	; (800c2e8 <HAL_UART_MspInit+0x88>)
 800c28c:	f043 0310 	orr.w	r3, r3, #16
 800c290:	6453      	str	r3, [r2, #68]	; 0x44
 800c292:	4b15      	ldr	r3, [pc, #84]	; (800c2e8 <HAL_UART_MspInit+0x88>)
 800c294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c296:	f003 0310 	and.w	r3, r3, #16
 800c29a:	613b      	str	r3, [r7, #16]
 800c29c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c29e:	2300      	movs	r3, #0
 800c2a0:	60fb      	str	r3, [r7, #12]
 800c2a2:	4b11      	ldr	r3, [pc, #68]	; (800c2e8 <HAL_UART_MspInit+0x88>)
 800c2a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c2a6:	4a10      	ldr	r2, [pc, #64]	; (800c2e8 <HAL_UART_MspInit+0x88>)
 800c2a8:	f043 0301 	orr.w	r3, r3, #1
 800c2ac:	6313      	str	r3, [r2, #48]	; 0x30
 800c2ae:	4b0e      	ldr	r3, [pc, #56]	; (800c2e8 <HAL_UART_MspInit+0x88>)
 800c2b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c2b2:	f003 0301 	and.w	r3, r3, #1
 800c2b6:	60fb      	str	r3, [r7, #12]
 800c2b8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800c2ba:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800c2be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c2c0:	2302      	movs	r3, #2
 800c2c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800c2c4:	2301      	movs	r3, #1
 800c2c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c2c8:	2303      	movs	r3, #3
 800c2ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800c2cc:	2307      	movs	r3, #7
 800c2ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c2d0:	f107 0314 	add.w	r3, r7, #20
 800c2d4:	4619      	mov	r1, r3
 800c2d6:	4805      	ldr	r0, [pc, #20]	; (800c2ec <HAL_UART_MspInit+0x8c>)
 800c2d8:	f7f4 ff86 	bl	80011e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800c2dc:	bf00      	nop
 800c2de:	3728      	adds	r7, #40	; 0x28
 800c2e0:	46bd      	mov	sp, r7
 800c2e2:	bd80      	pop	{r7, pc}
 800c2e4:	40011000 	.word	0x40011000
 800c2e8:	40023800 	.word	0x40023800
 800c2ec:	40020000 	.word	0x40020000

0800c2f0 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800c2f0:	b580      	push	{r7, lr}
 800c2f2:	b086      	sub	sp, #24
 800c2f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800c2f6:	1d3b      	adds	r3, r7, #4
 800c2f8:	2200      	movs	r2, #0
 800c2fa:	601a      	str	r2, [r3, #0]
 800c2fc:	605a      	str	r2, [r3, #4]
 800c2fe:	609a      	str	r2, [r3, #8]
 800c300:	60da      	str	r2, [r3, #12]
 800c302:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800c304:	4b3b      	ldr	r3, [pc, #236]	; (800c3f4 <HAL_FMC_MspInit+0x104>)
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d16f      	bne.n	800c3ec <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 800c30c:	4b39      	ldr	r3, [pc, #228]	; (800c3f4 <HAL_FMC_MspInit+0x104>)
 800c30e:	2201      	movs	r2, #1
 800c310:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800c312:	2300      	movs	r3, #0
 800c314:	603b      	str	r3, [r7, #0]
 800c316:	4b38      	ldr	r3, [pc, #224]	; (800c3f8 <HAL_FMC_MspInit+0x108>)
 800c318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c31a:	4a37      	ldr	r2, [pc, #220]	; (800c3f8 <HAL_FMC_MspInit+0x108>)
 800c31c:	f043 0301 	orr.w	r3, r3, #1
 800c320:	6393      	str	r3, [r2, #56]	; 0x38
 800c322:	4b35      	ldr	r3, [pc, #212]	; (800c3f8 <HAL_FMC_MspInit+0x108>)
 800c324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c326:	f003 0301 	and.w	r3, r3, #1
 800c32a:	603b      	str	r3, [r7, #0]
 800c32c:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin 
 800c32e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800c332:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin 
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c334:	2302      	movs	r3, #2
 800c336:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c338:	2300      	movs	r3, #0
 800c33a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c33c:	2303      	movs	r3, #3
 800c33e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800c340:	230c      	movs	r3, #12
 800c342:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800c344:	1d3b      	adds	r3, r7, #4
 800c346:	4619      	mov	r1, r3
 800c348:	482c      	ldr	r0, [pc, #176]	; (800c3fc <HAL_FMC_MspInit+0x10c>)
 800c34a:	f7f4 ff4d 	bl	80011e8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 800c34e:	2301      	movs	r3, #1
 800c350:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c352:	2302      	movs	r3, #2
 800c354:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c356:	2300      	movs	r3, #0
 800c358:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c35a:	2303      	movs	r3, #3
 800c35c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800c35e:	230c      	movs	r3, #12
 800c360:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 800c362:	1d3b      	adds	r3, r7, #4
 800c364:	4619      	mov	r1, r3
 800c366:	4826      	ldr	r0, [pc, #152]	; (800c400 <HAL_FMC_MspInit+0x110>)
 800c368:	f7f4 ff3e 	bl	80011e8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin 
 800c36c:	f248 1333 	movw	r3, #33075	; 0x8133
 800c370:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c372:	2302      	movs	r3, #2
 800c374:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c376:	2300      	movs	r3, #0
 800c378:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c37a:	2303      	movs	r3, #3
 800c37c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800c37e:	230c      	movs	r3, #12
 800c380:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800c382:	1d3b      	adds	r3, r7, #4
 800c384:	4619      	mov	r1, r3
 800c386:	481f      	ldr	r0, [pc, #124]	; (800c404 <HAL_FMC_MspInit+0x114>)
 800c388:	f7f4 ff2e 	bl	80011e8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin 
 800c38c:	f64f 7383 	movw	r3, #65411	; 0xff83
 800c390:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin 
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c392:	2302      	movs	r3, #2
 800c394:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c396:	2300      	movs	r3, #0
 800c398:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c39a:	2303      	movs	r3, #3
 800c39c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800c39e:	230c      	movs	r3, #12
 800c3a0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800c3a2:	1d3b      	adds	r3, r7, #4
 800c3a4:	4619      	mov	r1, r3
 800c3a6:	4818      	ldr	r0, [pc, #96]	; (800c408 <HAL_FMC_MspInit+0x118>)
 800c3a8:	f7f4 ff1e 	bl	80011e8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin 
 800c3ac:	f24c 7303 	movw	r3, #50947	; 0xc703
 800c3b0:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c3b2:	2302      	movs	r3, #2
 800c3b4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c3b6:	2300      	movs	r3, #0
 800c3b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c3ba:	2303      	movs	r3, #3
 800c3bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800c3be:	230c      	movs	r3, #12
 800c3c0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800c3c2:	1d3b      	adds	r3, r7, #4
 800c3c4:	4619      	mov	r1, r3
 800c3c6:	4811      	ldr	r0, [pc, #68]	; (800c40c <HAL_FMC_MspInit+0x11c>)
 800c3c8:	f7f4 ff0e 	bl	80011e8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 800c3cc:	2360      	movs	r3, #96	; 0x60
 800c3ce:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c3d0:	2302      	movs	r3, #2
 800c3d2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c3d4:	2300      	movs	r3, #0
 800c3d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c3d8:	2303      	movs	r3, #3
 800c3da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800c3dc:	230c      	movs	r3, #12
 800c3de:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c3e0:	1d3b      	adds	r3, r7, #4
 800c3e2:	4619      	mov	r1, r3
 800c3e4:	480a      	ldr	r0, [pc, #40]	; (800c410 <HAL_FMC_MspInit+0x120>)
 800c3e6:	f7f4 feff 	bl	80011e8 <HAL_GPIO_Init>
 800c3ea:	e000      	b.n	800c3ee <HAL_FMC_MspInit+0xfe>
    return;
 800c3ec:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800c3ee:	3718      	adds	r7, #24
 800c3f0:	46bd      	mov	sp, r7
 800c3f2:	bd80      	pop	{r7, pc}
 800c3f4:	20008464 	.word	0x20008464
 800c3f8:	40023800 	.word	0x40023800
 800c3fc:	40021400 	.word	0x40021400
 800c400:	40020800 	.word	0x40020800
 800c404:	40021800 	.word	0x40021800
 800c408:	40021000 	.word	0x40021000
 800c40c:	40020c00 	.word	0x40020c00
 800c410:	40020400 	.word	0x40020400

0800c414 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 800c414:	b580      	push	{r7, lr}
 800c416:	b082      	sub	sp, #8
 800c418:	af00      	add	r7, sp, #0
 800c41a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800c41c:	f7ff ff68 	bl	800c2f0 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800c420:	bf00      	nop
 800c422:	3708      	adds	r7, #8
 800c424:	46bd      	mov	sp, r7
 800c426:	bd80      	pop	{r7, pc}

0800c428 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800c428:	b580      	push	{r7, lr}
 800c42a:	b08c      	sub	sp, #48	; 0x30
 800c42c:	af00      	add	r7, sp, #0
 800c42e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800c430:	2300      	movs	r3, #0
 800c432:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800c434:	2300      	movs	r3, #0
 800c436:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 800c438:	2200      	movs	r2, #0
 800c43a:	6879      	ldr	r1, [r7, #4]
 800c43c:	2036      	movs	r0, #54	; 0x36
 800c43e:	f7f4 f973 	bl	8000728 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 800c442:	2036      	movs	r0, #54	; 0x36
 800c444:	f7f4 f98c 	bl	8000760 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800c448:	2300      	movs	r3, #0
 800c44a:	60fb      	str	r3, [r7, #12]
 800c44c:	4b1f      	ldr	r3, [pc, #124]	; (800c4cc <HAL_InitTick+0xa4>)
 800c44e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c450:	4a1e      	ldr	r2, [pc, #120]	; (800c4cc <HAL_InitTick+0xa4>)
 800c452:	f043 0310 	orr.w	r3, r3, #16
 800c456:	6413      	str	r3, [r2, #64]	; 0x40
 800c458:	4b1c      	ldr	r3, [pc, #112]	; (800c4cc <HAL_InitTick+0xa4>)
 800c45a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c45c:	f003 0310 	and.w	r3, r3, #16
 800c460:	60fb      	str	r3, [r7, #12]
 800c462:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800c464:	f107 0210 	add.w	r2, r7, #16
 800c468:	f107 0314 	add.w	r3, r7, #20
 800c46c:	4611      	mov	r1, r2
 800c46e:	4618      	mov	r0, r3
 800c470:	f7f7 fea8 	bl	80041c4 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800c474:	f7f7 fe7e 	bl	8004174 <HAL_RCC_GetPCLK1Freq>
 800c478:	4603      	mov	r3, r0
 800c47a:	005b      	lsls	r3, r3, #1
 800c47c:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800c47e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c480:	4a13      	ldr	r2, [pc, #76]	; (800c4d0 <HAL_InitTick+0xa8>)
 800c482:	fba2 2303 	umull	r2, r3, r2, r3
 800c486:	0c9b      	lsrs	r3, r3, #18
 800c488:	3b01      	subs	r3, #1
 800c48a:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800c48c:	4b11      	ldr	r3, [pc, #68]	; (800c4d4 <HAL_InitTick+0xac>)
 800c48e:	4a12      	ldr	r2, [pc, #72]	; (800c4d8 <HAL_InitTick+0xb0>)
 800c490:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 800c492:	4b10      	ldr	r3, [pc, #64]	; (800c4d4 <HAL_InitTick+0xac>)
 800c494:	f240 32e7 	movw	r2, #999	; 0x3e7
 800c498:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800c49a:	4a0e      	ldr	r2, [pc, #56]	; (800c4d4 <HAL_InitTick+0xac>)
 800c49c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c49e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800c4a0:	4b0c      	ldr	r3, [pc, #48]	; (800c4d4 <HAL_InitTick+0xac>)
 800c4a2:	2200      	movs	r2, #0
 800c4a4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c4a6:	4b0b      	ldr	r3, [pc, #44]	; (800c4d4 <HAL_InitTick+0xac>)
 800c4a8:	2200      	movs	r2, #0
 800c4aa:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800c4ac:	4809      	ldr	r0, [pc, #36]	; (800c4d4 <HAL_InitTick+0xac>)
 800c4ae:	f7f8 f911 	bl	80046d4 <HAL_TIM_Base_Init>
 800c4b2:	4603      	mov	r3, r0
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d104      	bne.n	800c4c2 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800c4b8:	4806      	ldr	r0, [pc, #24]	; (800c4d4 <HAL_InitTick+0xac>)
 800c4ba:	f7f8 f936 	bl	800472a <HAL_TIM_Base_Start_IT>
 800c4be:	4603      	mov	r3, r0
 800c4c0:	e000      	b.n	800c4c4 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800c4c2:	2301      	movs	r3, #1
}
 800c4c4:	4618      	mov	r0, r3
 800c4c6:	3730      	adds	r7, #48	; 0x30
 800c4c8:	46bd      	mov	sp, r7
 800c4ca:	bd80      	pop	{r7, pc}
 800c4cc:	40023800 	.word	0x40023800
 800c4d0:	431bde83 	.word	0x431bde83
 800c4d4:	20008820 	.word	0x20008820
 800c4d8:	40001000 	.word	0x40001000

0800c4dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800c4dc:	b480      	push	{r7}
 800c4de:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800c4e0:	bf00      	nop
 800c4e2:	46bd      	mov	sp, r7
 800c4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4e8:	4770      	bx	lr

0800c4ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800c4ea:	b480      	push	{r7}
 800c4ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800c4ee:	e7fe      	b.n	800c4ee <HardFault_Handler+0x4>

0800c4f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800c4f0:	b480      	push	{r7}
 800c4f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800c4f4:	e7fe      	b.n	800c4f4 <MemManage_Handler+0x4>

0800c4f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800c4f6:	b480      	push	{r7}
 800c4f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800c4fa:	e7fe      	b.n	800c4fa <BusFault_Handler+0x4>

0800c4fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800c4fc:	b480      	push	{r7}
 800c4fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800c500:	e7fe      	b.n	800c500 <UsageFault_Handler+0x4>

0800c502 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800c502:	b480      	push	{r7}
 800c504:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800c506:	bf00      	nop
 800c508:	46bd      	mov	sp, r7
 800c50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c50e:	4770      	bx	lr

0800c510 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800c510:	b580      	push	{r7, lr}
 800c512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800c514:	2001      	movs	r0, #1
 800c516:	f7f5 f843 	bl	80015a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800c51a:	bf00      	nop
 800c51c:	bd80      	pop	{r7, pc}
	...

0800c520 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800c520:	b580      	push	{r7, lr}
 800c522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800c524:	4802      	ldr	r0, [pc, #8]	; (800c530 <TIM6_DAC_IRQHandler+0x10>)
 800c526:	f7f8 f924 	bl	8004772 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800c52a:	bf00      	nop
 800c52c:	bd80      	pop	{r7, pc}
 800c52e:	bf00      	nop
 800c530:	20008820 	.word	0x20008820

0800c534 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 800c534:	b580      	push	{r7, lr}
 800c536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 800c538:	4802      	ldr	r0, [pc, #8]	; (800c544 <OTG_HS_IRQHandler+0x10>)
 800c53a:	f7f5 fae3 	bl	8001b04 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 800c53e:	bf00      	nop
 800c540:	bd80      	pop	{r7, pc}
 800c542:	bf00      	nop
 800c544:	20008c38 	.word	0x20008c38

0800c548 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 800c548:	b580      	push	{r7, lr}
 800c54a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 800c54c:	4802      	ldr	r0, [pc, #8]	; (800c558 <LTDC_IRQHandler+0x10>)
 800c54e:	f7f6 ff3f 	bl	80033d0 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800c552:	bf00      	nop
 800c554:	bd80      	pop	{r7, pc}
 800c556:	bf00      	nop
 800c558:	20008680 	.word	0x20008680

0800c55c <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 800c55c:	b580      	push	{r7, lr}
 800c55e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 800c560:	4802      	ldr	r0, [pc, #8]	; (800c56c <DMA2D_IRQHandler+0x10>)
 800c562:	f7f4 f99b 	bl	800089c <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800c566:	bf00      	nop
 800c568:	bd80      	pop	{r7, pc}
 800c56a:	bf00      	nop
 800c56c:	200087ac 	.word	0x200087ac

0800c570 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800c570:	b580      	push	{r7, lr}
 800c572:	b084      	sub	sp, #16
 800c574:	af00      	add	r7, sp, #0
 800c576:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800c578:	4b11      	ldr	r3, [pc, #68]	; (800c5c0 <_sbrk+0x50>)
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d102      	bne.n	800c586 <_sbrk+0x16>
		heap_end = &end;
 800c580:	4b0f      	ldr	r3, [pc, #60]	; (800c5c0 <_sbrk+0x50>)
 800c582:	4a10      	ldr	r2, [pc, #64]	; (800c5c4 <_sbrk+0x54>)
 800c584:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800c586:	4b0e      	ldr	r3, [pc, #56]	; (800c5c0 <_sbrk+0x50>)
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800c58c:	4b0c      	ldr	r3, [pc, #48]	; (800c5c0 <_sbrk+0x50>)
 800c58e:	681a      	ldr	r2, [r3, #0]
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	4413      	add	r3, r2
 800c594:	466a      	mov	r2, sp
 800c596:	4293      	cmp	r3, r2
 800c598:	d907      	bls.n	800c5aa <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800c59a:	f000 fb5d 	bl	800cc58 <__errno>
 800c59e:	4602      	mov	r2, r0
 800c5a0:	230c      	movs	r3, #12
 800c5a2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800c5a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c5a8:	e006      	b.n	800c5b8 <_sbrk+0x48>
	}

	heap_end += incr;
 800c5aa:	4b05      	ldr	r3, [pc, #20]	; (800c5c0 <_sbrk+0x50>)
 800c5ac:	681a      	ldr	r2, [r3, #0]
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	4413      	add	r3, r2
 800c5b2:	4a03      	ldr	r2, [pc, #12]	; (800c5c0 <_sbrk+0x50>)
 800c5b4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800c5b6:	68fb      	ldr	r3, [r7, #12]
}
 800c5b8:	4618      	mov	r0, r3
 800c5ba:	3710      	adds	r7, #16
 800c5bc:	46bd      	mov	sp, r7
 800c5be:	bd80      	pop	{r7, pc}
 800c5c0:	20008468 	.word	0x20008468
 800c5c4:	20008f00 	.word	0x20008f00

0800c5c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800c5c8:	b480      	push	{r7}
 800c5ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800c5cc:	4b08      	ldr	r3, [pc, #32]	; (800c5f0 <SystemInit+0x28>)
 800c5ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c5d2:	4a07      	ldr	r2, [pc, #28]	; (800c5f0 <SystemInit+0x28>)
 800c5d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c5d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800c5dc:	4b04      	ldr	r3, [pc, #16]	; (800c5f0 <SystemInit+0x28>)
 800c5de:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800c5e2:	609a      	str	r2, [r3, #8]
#endif
}
 800c5e4:	bf00      	nop
 800c5e6:	46bd      	mov	sp, r7
 800c5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ec:	4770      	bx	lr
 800c5ee:	bf00      	nop
 800c5f0:	e000ed00 	.word	0xe000ed00

0800c5f4 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800c5f4:	b580      	push	{r7, lr}
 800c5f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 800c5f8:	2200      	movs	r2, #0
 800c5fa:	490e      	ldr	r1, [pc, #56]	; (800c634 <MX_USB_HOST_Init+0x40>)
 800c5fc:	480e      	ldr	r0, [pc, #56]	; (800c638 <MX_USB_HOST_Init+0x44>)
 800c5fe:	f7fa fdaf 	bl	8007160 <USBH_Init>
 800c602:	4603      	mov	r3, r0
 800c604:	2b00      	cmp	r3, #0
 800c606:	d001      	beq.n	800c60c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800c608:	f7ff fbc2 	bl	800bd90 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_CDC_CLASS) != USBH_OK)
 800c60c:	490b      	ldr	r1, [pc, #44]	; (800c63c <MX_USB_HOST_Init+0x48>)
 800c60e:	480a      	ldr	r0, [pc, #40]	; (800c638 <MX_USB_HOST_Init+0x44>)
 800c610:	f7fa fe41 	bl	8007296 <USBH_RegisterClass>
 800c614:	4603      	mov	r3, r0
 800c616:	2b00      	cmp	r3, #0
 800c618:	d001      	beq.n	800c61e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800c61a:	f7ff fbb9 	bl	800bd90 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 800c61e:	4806      	ldr	r0, [pc, #24]	; (800c638 <MX_USB_HOST_Init+0x44>)
 800c620:	f7fa fec6 	bl	80073b0 <USBH_Start>
 800c624:	4603      	mov	r3, r0
 800c626:	2b00      	cmp	r3, #0
 800c628:	d001      	beq.n	800c62e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800c62a:	f7ff fbb1 	bl	800bd90 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800c62e:	bf00      	nop
 800c630:	bd80      	pop	{r7, pc}
 800c632:	bf00      	nop
 800c634:	0800c641 	.word	0x0800c641
 800c638:	20008860 	.word	0x20008860
 800c63c:	20000008 	.word	0x20000008

0800c640 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800c640:	b480      	push	{r7}
 800c642:	b083      	sub	sp, #12
 800c644:	af00      	add	r7, sp, #0
 800c646:	6078      	str	r0, [r7, #4]
 800c648:	460b      	mov	r3, r1
 800c64a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800c64c:	78fb      	ldrb	r3, [r7, #3]
 800c64e:	3b01      	subs	r3, #1
 800c650:	2b04      	cmp	r3, #4
 800c652:	d819      	bhi.n	800c688 <USBH_UserProcess+0x48>
 800c654:	a201      	add	r2, pc, #4	; (adr r2, 800c65c <USBH_UserProcess+0x1c>)
 800c656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c65a:	bf00      	nop
 800c65c:	0800c689 	.word	0x0800c689
 800c660:	0800c679 	.word	0x0800c679
 800c664:	0800c689 	.word	0x0800c689
 800c668:	0800c681 	.word	0x0800c681
 800c66c:	0800c671 	.word	0x0800c671
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800c670:	4b09      	ldr	r3, [pc, #36]	; (800c698 <USBH_UserProcess+0x58>)
 800c672:	2203      	movs	r2, #3
 800c674:	701a      	strb	r2, [r3, #0]
  break;
 800c676:	e008      	b.n	800c68a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800c678:	4b07      	ldr	r3, [pc, #28]	; (800c698 <USBH_UserProcess+0x58>)
 800c67a:	2202      	movs	r2, #2
 800c67c:	701a      	strb	r2, [r3, #0]
  break;
 800c67e:	e004      	b.n	800c68a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800c680:	4b05      	ldr	r3, [pc, #20]	; (800c698 <USBH_UserProcess+0x58>)
 800c682:	2201      	movs	r2, #1
 800c684:	701a      	strb	r2, [r3, #0]
  break;
 800c686:	e000      	b.n	800c68a <USBH_UserProcess+0x4a>

  default:
  break;
 800c688:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800c68a:	bf00      	nop
 800c68c:	370c      	adds	r7, #12
 800c68e:	46bd      	mov	sp, r7
 800c690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c694:	4770      	bx	lr
 800c696:	bf00      	nop
 800c698:	2000846c 	.word	0x2000846c

0800c69c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800c69c:	b580      	push	{r7, lr}
 800c69e:	b08a      	sub	sp, #40	; 0x28
 800c6a0:	af00      	add	r7, sp, #0
 800c6a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c6a4:	f107 0314 	add.w	r3, r7, #20
 800c6a8:	2200      	movs	r2, #0
 800c6aa:	601a      	str	r2, [r3, #0]
 800c6ac:	605a      	str	r2, [r3, #4]
 800c6ae:	609a      	str	r2, [r3, #8]
 800c6b0:	60da      	str	r2, [r3, #12]
 800c6b2:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	4a24      	ldr	r2, [pc, #144]	; (800c74c <HAL_HCD_MspInit+0xb0>)
 800c6ba:	4293      	cmp	r3, r2
 800c6bc:	d141      	bne.n	800c742 <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c6be:	2300      	movs	r3, #0
 800c6c0:	613b      	str	r3, [r7, #16]
 800c6c2:	4b23      	ldr	r3, [pc, #140]	; (800c750 <HAL_HCD_MspInit+0xb4>)
 800c6c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6c6:	4a22      	ldr	r2, [pc, #136]	; (800c750 <HAL_HCD_MspInit+0xb4>)
 800c6c8:	f043 0302 	orr.w	r3, r3, #2
 800c6cc:	6313      	str	r3, [r2, #48]	; 0x30
 800c6ce:	4b20      	ldr	r3, [pc, #128]	; (800c750 <HAL_HCD_MspInit+0xb4>)
 800c6d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6d2:	f003 0302 	and.w	r3, r3, #2
 800c6d6:	613b      	str	r3, [r7, #16]
 800c6d8:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP 
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 800c6da:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 800c6de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c6e0:	2302      	movs	r3, #2
 800c6e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c6e4:	2300      	movs	r3, #0
 800c6e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c6e8:	2300      	movs	r3, #0
 800c6ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800c6ec:	230c      	movs	r3, #12
 800c6ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c6f0:	f107 0314 	add.w	r3, r7, #20
 800c6f4:	4619      	mov	r1, r3
 800c6f6:	4817      	ldr	r0, [pc, #92]	; (800c754 <HAL_HCD_MspInit+0xb8>)
 800c6f8:	f7f4 fd76 	bl	80011e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 800c6fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c700:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c702:	2300      	movs	r3, #0
 800c704:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c706:	2300      	movs	r3, #0
 800c708:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 800c70a:	f107 0314 	add.w	r3, r7, #20
 800c70e:	4619      	mov	r1, r3
 800c710:	4810      	ldr	r0, [pc, #64]	; (800c754 <HAL_HCD_MspInit+0xb8>)
 800c712:	f7f4 fd69 	bl	80011e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800c716:	2300      	movs	r3, #0
 800c718:	60fb      	str	r3, [r7, #12]
 800c71a:	4b0d      	ldr	r3, [pc, #52]	; (800c750 <HAL_HCD_MspInit+0xb4>)
 800c71c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c71e:	4a0c      	ldr	r2, [pc, #48]	; (800c750 <HAL_HCD_MspInit+0xb4>)
 800c720:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c724:	6313      	str	r3, [r2, #48]	; 0x30
 800c726:	4b0a      	ldr	r3, [pc, #40]	; (800c750 <HAL_HCD_MspInit+0xb4>)
 800c728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c72a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c72e:	60fb      	str	r3, [r7, #12]
 800c730:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 800c732:	2200      	movs	r2, #0
 800c734:	2105      	movs	r1, #5
 800c736:	204d      	movs	r0, #77	; 0x4d
 800c738:	f7f3 fff6 	bl	8000728 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800c73c:	204d      	movs	r0, #77	; 0x4d
 800c73e:	f7f4 f80f 	bl	8000760 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800c742:	bf00      	nop
 800c744:	3728      	adds	r7, #40	; 0x28
 800c746:	46bd      	mov	sp, r7
 800c748:	bd80      	pop	{r7, pc}
 800c74a:	bf00      	nop
 800c74c:	40040000 	.word	0x40040000
 800c750:	40023800 	.word	0x40023800
 800c754:	40020400 	.word	0x40020400

0800c758 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800c758:	b580      	push	{r7, lr}
 800c75a:	b082      	sub	sp, #8
 800c75c:	af00      	add	r7, sp, #0
 800c75e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c766:	4618      	mov	r0, r3
 800c768:	f7fb f975 	bl	8007a56 <USBH_LL_IncTimer>
}
 800c76c:	bf00      	nop
 800c76e:	3708      	adds	r7, #8
 800c770:	46bd      	mov	sp, r7
 800c772:	bd80      	pop	{r7, pc}

0800c774 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800c774:	b580      	push	{r7, lr}
 800c776:	b082      	sub	sp, #8
 800c778:	af00      	add	r7, sp, #0
 800c77a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c782:	4618      	mov	r0, r3
 800c784:	f7fb f9ba 	bl	8007afc <USBH_LL_Connect>
}
 800c788:	bf00      	nop
 800c78a:	3708      	adds	r7, #8
 800c78c:	46bd      	mov	sp, r7
 800c78e:	bd80      	pop	{r7, pc}

0800c790 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800c790:	b580      	push	{r7, lr}
 800c792:	b082      	sub	sp, #8
 800c794:	af00      	add	r7, sp, #0
 800c796:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c79e:	4618      	mov	r0, r3
 800c7a0:	f7fb f9e0 	bl	8007b64 <USBH_LL_Disconnect>
}
 800c7a4:	bf00      	nop
 800c7a6:	3708      	adds	r7, #8
 800c7a8:	46bd      	mov	sp, r7
 800c7aa:	bd80      	pop	{r7, pc}

0800c7ac <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800c7ac:	b580      	push	{r7, lr}
 800c7ae:	b082      	sub	sp, #8
 800c7b0:	af00      	add	r7, sp, #0
 800c7b2:	6078      	str	r0, [r7, #4]
 800c7b4:	460b      	mov	r3, r1
 800c7b6:	70fb      	strb	r3, [r7, #3]
 800c7b8:	4613      	mov	r3, r2
 800c7ba:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c7c2:	4618      	mov	r0, r3
 800c7c4:	f7fb fa1e 	bl	8007c04 <USBH_LL_NotifyURBChange>
#endif
}
 800c7c8:	bf00      	nop
 800c7ca:	3708      	adds	r7, #8
 800c7cc:	46bd      	mov	sp, r7
 800c7ce:	bd80      	pop	{r7, pc}

0800c7d0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c7d0:	b580      	push	{r7, lr}
 800c7d2:	b082      	sub	sp, #8
 800c7d4:	af00      	add	r7, sp, #0
 800c7d6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c7de:	4618      	mov	r0, r3
 800c7e0:	f7fb f963 	bl	8007aaa <USBH_LL_PortEnabled>
} 
 800c7e4:	bf00      	nop
 800c7e6:	3708      	adds	r7, #8
 800c7e8:	46bd      	mov	sp, r7
 800c7ea:	bd80      	pop	{r7, pc}

0800c7ec <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c7ec:	b580      	push	{r7, lr}
 800c7ee:	b082      	sub	sp, #8
 800c7f0:	af00      	add	r7, sp, #0
 800c7f2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c7fa:	4618      	mov	r0, r3
 800c7fc:	f7fb f963 	bl	8007ac6 <USBH_LL_PortDisabled>
} 
 800c800:	bf00      	nop
 800c802:	3708      	adds	r7, #8
 800c804:	46bd      	mov	sp, r7
 800c806:	bd80      	pop	{r7, pc}

0800c808 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800c808:	b580      	push	{r7, lr}
 800c80a:	b082      	sub	sp, #8
 800c80c:	af00      	add	r7, sp, #0
 800c80e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 800c816:	2b00      	cmp	r3, #0
 800c818:	d132      	bne.n	800c880 <USBH_LL_Init+0x78>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 800c81a:	4a1c      	ldr	r2, [pc, #112]	; (800c88c <USBH_LL_Init+0x84>)
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_HS;
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	4a19      	ldr	r2, [pc, #100]	; (800c88c <USBH_LL_Init+0x84>)
 800c826:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800c82a:	4b18      	ldr	r3, [pc, #96]	; (800c88c <USBH_LL_Init+0x84>)
 800c82c:	4a18      	ldr	r2, [pc, #96]	; (800c890 <USBH_LL_Init+0x88>)
 800c82e:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 800c830:	4b16      	ldr	r3, [pc, #88]	; (800c88c <USBH_LL_Init+0x84>)
 800c832:	220c      	movs	r2, #12
 800c834:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 800c836:	4b15      	ldr	r3, [pc, #84]	; (800c88c <USBH_LL_Init+0x84>)
 800c838:	2201      	movs	r2, #1
 800c83a:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800c83c:	4b13      	ldr	r3, [pc, #76]	; (800c88c <USBH_LL_Init+0x84>)
 800c83e:	2200      	movs	r2, #0
 800c840:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800c842:	4b12      	ldr	r3, [pc, #72]	; (800c88c <USBH_LL_Init+0x84>)
 800c844:	2202      	movs	r2, #2
 800c846:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800c848:	4b10      	ldr	r3, [pc, #64]	; (800c88c <USBH_LL_Init+0x84>)
 800c84a:	2200      	movs	r2, #0
 800c84c:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800c84e:	4b0f      	ldr	r3, [pc, #60]	; (800c88c <USBH_LL_Init+0x84>)
 800c850:	2200      	movs	r2, #0
 800c852:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800c854:	4b0d      	ldr	r3, [pc, #52]	; (800c88c <USBH_LL_Init+0x84>)
 800c856:	2200      	movs	r2, #0
 800c858:	62da      	str	r2, [r3, #44]	; 0x2c
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800c85a:	4b0c      	ldr	r3, [pc, #48]	; (800c88c <USBH_LL_Init+0x84>)
 800c85c:	2200      	movs	r2, #0
 800c85e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 800c860:	480a      	ldr	r0, [pc, #40]	; (800c88c <USBH_LL_Init+0x84>)
 800c862:	f7f4 fec9 	bl	80015f8 <HAL_HCD_Init>
 800c866:	4603      	mov	r3, r0
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d001      	beq.n	800c870 <USBH_LL_Init+0x68>
  {
    Error_Handler( );
 800c86c:	f7ff fa90 	bl	800bd90 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 800c870:	4806      	ldr	r0, [pc, #24]	; (800c88c <USBH_LL_Init+0x84>)
 800c872:	f7f5 fac5 	bl	8001e00 <HAL_HCD_GetCurrentFrame>
 800c876:	4603      	mov	r3, r0
 800c878:	4619      	mov	r1, r3
 800c87a:	6878      	ldr	r0, [r7, #4]
 800c87c:	f7fb f8dc 	bl	8007a38 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800c880:	2300      	movs	r3, #0
}
 800c882:	4618      	mov	r0, r3
 800c884:	3708      	adds	r7, #8
 800c886:	46bd      	mov	sp, r7
 800c888:	bd80      	pop	{r7, pc}
 800c88a:	bf00      	nop
 800c88c:	20008c38 	.word	0x20008c38
 800c890:	40040000 	.word	0x40040000

0800c894 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800c894:	b580      	push	{r7, lr}
 800c896:	b084      	sub	sp, #16
 800c898:	af00      	add	r7, sp, #0
 800c89a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c89c:	2300      	movs	r3, #0
 800c89e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c8a0:	2300      	movs	r3, #0
 800c8a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c8aa:	4618      	mov	r0, r3
 800c8ac:	f7f5 fa30 	bl	8001d10 <HAL_HCD_Start>
 800c8b0:	4603      	mov	r3, r0
 800c8b2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c8b4:	7bfb      	ldrb	r3, [r7, #15]
 800c8b6:	4618      	mov	r0, r3
 800c8b8:	f000 f95c 	bl	800cb74 <USBH_Get_USB_Status>
 800c8bc:	4603      	mov	r3, r0
 800c8be:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800c8c0:	7bbb      	ldrb	r3, [r7, #14]
}
 800c8c2:	4618      	mov	r0, r3
 800c8c4:	3710      	adds	r7, #16
 800c8c6:	46bd      	mov	sp, r7
 800c8c8:	bd80      	pop	{r7, pc}

0800c8ca <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800c8ca:	b580      	push	{r7, lr}
 800c8cc:	b084      	sub	sp, #16
 800c8ce:	af00      	add	r7, sp, #0
 800c8d0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c8d2:	2300      	movs	r3, #0
 800c8d4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c8d6:	2300      	movs	r3, #0
 800c8d8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c8e0:	4618      	mov	r0, r3
 800c8e2:	f7f5 fa38 	bl	8001d56 <HAL_HCD_Stop>
 800c8e6:	4603      	mov	r3, r0
 800c8e8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c8ea:	7bfb      	ldrb	r3, [r7, #15]
 800c8ec:	4618      	mov	r0, r3
 800c8ee:	f000 f941 	bl	800cb74 <USBH_Get_USB_Status>
 800c8f2:	4603      	mov	r3, r0
 800c8f4:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 800c8f6:	7bbb      	ldrb	r3, [r7, #14]
}
 800c8f8:	4618      	mov	r0, r3
 800c8fa:	3710      	adds	r7, #16
 800c8fc:	46bd      	mov	sp, r7
 800c8fe:	bd80      	pop	{r7, pc}

0800c900 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800c900:	b580      	push	{r7, lr}
 800c902:	b084      	sub	sp, #16
 800c904:	af00      	add	r7, sp, #0
 800c906:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800c908:	2301      	movs	r3, #1
 800c90a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c912:	4618      	mov	r0, r3
 800c914:	f7f5 fa82 	bl	8001e1c <HAL_HCD_GetCurrentSpeed>
 800c918:	4603      	mov	r3, r0
 800c91a:	2b01      	cmp	r3, #1
 800c91c:	d007      	beq.n	800c92e <USBH_LL_GetSpeed+0x2e>
 800c91e:	2b01      	cmp	r3, #1
 800c920:	d302      	bcc.n	800c928 <USBH_LL_GetSpeed+0x28>
 800c922:	2b02      	cmp	r3, #2
 800c924:	d006      	beq.n	800c934 <USBH_LL_GetSpeed+0x34>
 800c926:	e008      	b.n	800c93a <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800c928:	2300      	movs	r3, #0
 800c92a:	73fb      	strb	r3, [r7, #15]
    break;
 800c92c:	e008      	b.n	800c940 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 800c92e:	2301      	movs	r3, #1
 800c930:	73fb      	strb	r3, [r7, #15]
    break;
 800c932:	e005      	b.n	800c940 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 800c934:	2302      	movs	r3, #2
 800c936:	73fb      	strb	r3, [r7, #15]
    break;
 800c938:	e002      	b.n	800c940 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 800c93a:	2301      	movs	r3, #1
 800c93c:	73fb      	strb	r3, [r7, #15]
    break;
 800c93e:	bf00      	nop
  }
  return  speed;
 800c940:	7bfb      	ldrb	r3, [r7, #15]
}
 800c942:	4618      	mov	r0, r3
 800c944:	3710      	adds	r7, #16
 800c946:	46bd      	mov	sp, r7
 800c948:	bd80      	pop	{r7, pc}

0800c94a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800c94a:	b580      	push	{r7, lr}
 800c94c:	b084      	sub	sp, #16
 800c94e:	af00      	add	r7, sp, #0
 800c950:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c952:	2300      	movs	r3, #0
 800c954:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c956:	2300      	movs	r3, #0
 800c958:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c960:	4618      	mov	r0, r3
 800c962:	f7f5 fa15 	bl	8001d90 <HAL_HCD_ResetPort>
 800c966:	4603      	mov	r3, r0
 800c968:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 800c96a:	7bfb      	ldrb	r3, [r7, #15]
 800c96c:	4618      	mov	r0, r3
 800c96e:	f000 f901 	bl	800cb74 <USBH_Get_USB_Status>
 800c972:	4603      	mov	r3, r0
 800c974:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800c976:	7bbb      	ldrb	r3, [r7, #14]
}
 800c978:	4618      	mov	r0, r3
 800c97a:	3710      	adds	r7, #16
 800c97c:	46bd      	mov	sp, r7
 800c97e:	bd80      	pop	{r7, pc}

0800c980 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c980:	b580      	push	{r7, lr}
 800c982:	b082      	sub	sp, #8
 800c984:	af00      	add	r7, sp, #0
 800c986:	6078      	str	r0, [r7, #4]
 800c988:	460b      	mov	r3, r1
 800c98a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c992:	78fa      	ldrb	r2, [r7, #3]
 800c994:	4611      	mov	r1, r2
 800c996:	4618      	mov	r0, r3
 800c998:	f7f5 fa1d 	bl	8001dd6 <HAL_HCD_HC_GetXferCount>
 800c99c:	4603      	mov	r3, r0
}
 800c99e:	4618      	mov	r0, r3
 800c9a0:	3708      	adds	r7, #8
 800c9a2:	46bd      	mov	sp, r7
 800c9a4:	bd80      	pop	{r7, pc}

0800c9a6 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800c9a6:	b590      	push	{r4, r7, lr}
 800c9a8:	b089      	sub	sp, #36	; 0x24
 800c9aa:	af04      	add	r7, sp, #16
 800c9ac:	6078      	str	r0, [r7, #4]
 800c9ae:	4608      	mov	r0, r1
 800c9b0:	4611      	mov	r1, r2
 800c9b2:	461a      	mov	r2, r3
 800c9b4:	4603      	mov	r3, r0
 800c9b6:	70fb      	strb	r3, [r7, #3]
 800c9b8:	460b      	mov	r3, r1
 800c9ba:	70bb      	strb	r3, [r7, #2]
 800c9bc:	4613      	mov	r3, r2
 800c9be:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c9c0:	2300      	movs	r3, #0
 800c9c2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c9c4:	2300      	movs	r3, #0
 800c9c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 800c9ce:	787c      	ldrb	r4, [r7, #1]
 800c9d0:	78ba      	ldrb	r2, [r7, #2]
 800c9d2:	78f9      	ldrb	r1, [r7, #3]
 800c9d4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c9d6:	9302      	str	r3, [sp, #8]
 800c9d8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c9dc:	9301      	str	r3, [sp, #4]
 800c9de:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c9e2:	9300      	str	r3, [sp, #0]
 800c9e4:	4623      	mov	r3, r4
 800c9e6:	f7f4 fe69 	bl	80016bc <HAL_HCD_HC_Init>
 800c9ea:	4603      	mov	r3, r0
 800c9ec:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800c9ee:	7bfb      	ldrb	r3, [r7, #15]
 800c9f0:	4618      	mov	r0, r3
 800c9f2:	f000 f8bf 	bl	800cb74 <USBH_Get_USB_Status>
 800c9f6:	4603      	mov	r3, r0
 800c9f8:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800c9fa:	7bbb      	ldrb	r3, [r7, #14]
}
 800c9fc:	4618      	mov	r0, r3
 800c9fe:	3714      	adds	r7, #20
 800ca00:	46bd      	mov	sp, r7
 800ca02:	bd90      	pop	{r4, r7, pc}

0800ca04 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ca04:	b580      	push	{r7, lr}
 800ca06:	b084      	sub	sp, #16
 800ca08:	af00      	add	r7, sp, #0
 800ca0a:	6078      	str	r0, [r7, #4]
 800ca0c:	460b      	mov	r3, r1
 800ca0e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ca10:	2300      	movs	r3, #0
 800ca12:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ca14:	2300      	movs	r3, #0
 800ca16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ca1e:	78fa      	ldrb	r2, [r7, #3]
 800ca20:	4611      	mov	r1, r2
 800ca22:	4618      	mov	r0, r3
 800ca24:	f7f4 fee2 	bl	80017ec <HAL_HCD_HC_Halt>
 800ca28:	4603      	mov	r3, r0
 800ca2a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ca2c:	7bfb      	ldrb	r3, [r7, #15]
 800ca2e:	4618      	mov	r0, r3
 800ca30:	f000 f8a0 	bl	800cb74 <USBH_Get_USB_Status>
 800ca34:	4603      	mov	r3, r0
 800ca36:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800ca38:	7bbb      	ldrb	r3, [r7, #14]
}
 800ca3a:	4618      	mov	r0, r3
 800ca3c:	3710      	adds	r7, #16
 800ca3e:	46bd      	mov	sp, r7
 800ca40:	bd80      	pop	{r7, pc}

0800ca42 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800ca42:	b590      	push	{r4, r7, lr}
 800ca44:	b089      	sub	sp, #36	; 0x24
 800ca46:	af04      	add	r7, sp, #16
 800ca48:	6078      	str	r0, [r7, #4]
 800ca4a:	4608      	mov	r0, r1
 800ca4c:	4611      	mov	r1, r2
 800ca4e:	461a      	mov	r2, r3
 800ca50:	4603      	mov	r3, r0
 800ca52:	70fb      	strb	r3, [r7, #3]
 800ca54:	460b      	mov	r3, r1
 800ca56:	70bb      	strb	r3, [r7, #2]
 800ca58:	4613      	mov	r3, r2
 800ca5a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ca5c:	2300      	movs	r3, #0
 800ca5e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ca60:	2300      	movs	r3, #0
 800ca62:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 800ca6a:	787c      	ldrb	r4, [r7, #1]
 800ca6c:	78ba      	ldrb	r2, [r7, #2]
 800ca6e:	78f9      	ldrb	r1, [r7, #3]
 800ca70:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800ca74:	9303      	str	r3, [sp, #12]
 800ca76:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ca78:	9302      	str	r3, [sp, #8]
 800ca7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca7c:	9301      	str	r3, [sp, #4]
 800ca7e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ca82:	9300      	str	r3, [sp, #0]
 800ca84:	4623      	mov	r3, r4
 800ca86:	f7f4 fed5 	bl	8001834 <HAL_HCD_HC_SubmitRequest>
 800ca8a:	4603      	mov	r3, r0
 800ca8c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800ca8e:	7bfb      	ldrb	r3, [r7, #15]
 800ca90:	4618      	mov	r0, r3
 800ca92:	f000 f86f 	bl	800cb74 <USBH_Get_USB_Status>
 800ca96:	4603      	mov	r3, r0
 800ca98:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800ca9a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ca9c:	4618      	mov	r0, r3
 800ca9e:	3714      	adds	r7, #20
 800caa0:	46bd      	mov	sp, r7
 800caa2:	bd90      	pop	{r4, r7, pc}

0800caa4 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800caa4:	b580      	push	{r7, lr}
 800caa6:	b082      	sub	sp, #8
 800caa8:	af00      	add	r7, sp, #0
 800caaa:	6078      	str	r0, [r7, #4]
 800caac:	460b      	mov	r3, r1
 800caae:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800cab6:	78fa      	ldrb	r2, [r7, #3]
 800cab8:	4611      	mov	r1, r2
 800caba:	4618      	mov	r0, r3
 800cabc:	f7f5 f976 	bl	8001dac <HAL_HCD_HC_GetURBState>
 800cac0:	4603      	mov	r3, r0
}
 800cac2:	4618      	mov	r0, r3
 800cac4:	3708      	adds	r7, #8
 800cac6:	46bd      	mov	sp, r7
 800cac8:	bd80      	pop	{r7, pc}

0800caca <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800caca:	b580      	push	{r7, lr}
 800cacc:	b082      	sub	sp, #8
 800cace:	af00      	add	r7, sp, #0
 800cad0:	6078      	str	r0, [r7, #4]
 800cad2:	460b      	mov	r3, r1
 800cad4:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_HS) {
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d103      	bne.n	800cae8 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusHS(state);
 800cae0:	78fb      	ldrb	r3, [r7, #3]
 800cae2:	4618      	mov	r0, r3
 800cae4:	f000 f872 	bl	800cbcc <MX_DriverVbusHS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800cae8:	20c8      	movs	r0, #200	; 0xc8
 800caea:	f7f3 fd43 	bl	8000574 <HAL_Delay>
  return USBH_OK;
 800caee:	2300      	movs	r3, #0
}
 800caf0:	4618      	mov	r0, r3
 800caf2:	3708      	adds	r7, #8
 800caf4:	46bd      	mov	sp, r7
 800caf6:	bd80      	pop	{r7, pc}

0800caf8 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800caf8:	b480      	push	{r7}
 800cafa:	b085      	sub	sp, #20
 800cafc:	af00      	add	r7, sp, #0
 800cafe:	6078      	str	r0, [r7, #4]
 800cb00:	460b      	mov	r3, r1
 800cb02:	70fb      	strb	r3, [r7, #3]
 800cb04:	4613      	mov	r3, r2
 800cb06:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800cb0e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800cb10:	78fa      	ldrb	r2, [r7, #3]
 800cb12:	68f9      	ldr	r1, [r7, #12]
 800cb14:	4613      	mov	r3, r2
 800cb16:	009b      	lsls	r3, r3, #2
 800cb18:	4413      	add	r3, r2
 800cb1a:	00db      	lsls	r3, r3, #3
 800cb1c:	440b      	add	r3, r1
 800cb1e:	333b      	adds	r3, #59	; 0x3b
 800cb20:	781b      	ldrb	r3, [r3, #0]
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d00a      	beq.n	800cb3c <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800cb26:	78fa      	ldrb	r2, [r7, #3]
 800cb28:	68f9      	ldr	r1, [r7, #12]
 800cb2a:	4613      	mov	r3, r2
 800cb2c:	009b      	lsls	r3, r3, #2
 800cb2e:	4413      	add	r3, r2
 800cb30:	00db      	lsls	r3, r3, #3
 800cb32:	440b      	add	r3, r1
 800cb34:	3350      	adds	r3, #80	; 0x50
 800cb36:	78ba      	ldrb	r2, [r7, #2]
 800cb38:	701a      	strb	r2, [r3, #0]
 800cb3a:	e009      	b.n	800cb50 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800cb3c:	78fa      	ldrb	r2, [r7, #3]
 800cb3e:	68f9      	ldr	r1, [r7, #12]
 800cb40:	4613      	mov	r3, r2
 800cb42:	009b      	lsls	r3, r3, #2
 800cb44:	4413      	add	r3, r2
 800cb46:	00db      	lsls	r3, r3, #3
 800cb48:	440b      	add	r3, r1
 800cb4a:	3351      	adds	r3, #81	; 0x51
 800cb4c:	78ba      	ldrb	r2, [r7, #2]
 800cb4e:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800cb50:	2300      	movs	r3, #0
}
 800cb52:	4618      	mov	r0, r3
 800cb54:	3714      	adds	r7, #20
 800cb56:	46bd      	mov	sp, r7
 800cb58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb5c:	4770      	bx	lr

0800cb5e <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800cb5e:	b580      	push	{r7, lr}
 800cb60:	b082      	sub	sp, #8
 800cb62:	af00      	add	r7, sp, #0
 800cb64:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800cb66:	6878      	ldr	r0, [r7, #4]
 800cb68:	f7f3 fd04 	bl	8000574 <HAL_Delay>
}
 800cb6c:	bf00      	nop
 800cb6e:	3708      	adds	r7, #8
 800cb70:	46bd      	mov	sp, r7
 800cb72:	bd80      	pop	{r7, pc}

0800cb74 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800cb74:	b480      	push	{r7}
 800cb76:	b085      	sub	sp, #20
 800cb78:	af00      	add	r7, sp, #0
 800cb7a:	4603      	mov	r3, r0
 800cb7c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cb7e:	2300      	movs	r3, #0
 800cb80:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800cb82:	79fb      	ldrb	r3, [r7, #7]
 800cb84:	2b03      	cmp	r3, #3
 800cb86:	d817      	bhi.n	800cbb8 <USBH_Get_USB_Status+0x44>
 800cb88:	a201      	add	r2, pc, #4	; (adr r2, 800cb90 <USBH_Get_USB_Status+0x1c>)
 800cb8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb8e:	bf00      	nop
 800cb90:	0800cba1 	.word	0x0800cba1
 800cb94:	0800cba7 	.word	0x0800cba7
 800cb98:	0800cbad 	.word	0x0800cbad
 800cb9c:	0800cbb3 	.word	0x0800cbb3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800cba0:	2300      	movs	r3, #0
 800cba2:	73fb      	strb	r3, [r7, #15]
    break;
 800cba4:	e00b      	b.n	800cbbe <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800cba6:	2302      	movs	r3, #2
 800cba8:	73fb      	strb	r3, [r7, #15]
    break;
 800cbaa:	e008      	b.n	800cbbe <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800cbac:	2301      	movs	r3, #1
 800cbae:	73fb      	strb	r3, [r7, #15]
    break;
 800cbb0:	e005      	b.n	800cbbe <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800cbb2:	2302      	movs	r3, #2
 800cbb4:	73fb      	strb	r3, [r7, #15]
    break;
 800cbb6:	e002      	b.n	800cbbe <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800cbb8:	2302      	movs	r3, #2
 800cbba:	73fb      	strb	r3, [r7, #15]
    break;
 800cbbc:	bf00      	nop
  }
  return usb_status;
 800cbbe:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbc0:	4618      	mov	r0, r3
 800cbc2:	3714      	adds	r7, #20
 800cbc4:	46bd      	mov	sp, r7
 800cbc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbca:	4770      	bx	lr

0800cbcc <MX_DriverVbusHS>:
  *          This parameter can be one of the these values:
  *          - 0 : VBUS Active
  *          - 1 : VBUS Inactive
  */
void MX_DriverVbusHS(uint8_t state)
{ 
 800cbcc:	b580      	push	{r7, lr}
 800cbce:	b084      	sub	sp, #16
 800cbd0:	af00      	add	r7, sp, #0
 800cbd2:	4603      	mov	r3, r0
 800cbd4:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state; 
 800cbd6:	79fb      	ldrb	r3, [r7, #7]
 800cbd8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_HS */
  if(state == 0)
 800cbda:	79fb      	ldrb	r3, [r7, #7]
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d102      	bne.n	800cbe6 <MX_DriverVbusHS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 800cbe0:	2301      	movs	r3, #1
 800cbe2:	73fb      	strb	r3, [r7, #15]
 800cbe4:	e001      	b.n	800cbea <MX_DriverVbusHS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800cbe6:	2300      	movs	r3, #0
 800cbe8:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_HS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,(GPIO_PinState)data);
 800cbea:	7bfb      	ldrb	r3, [r7, #15]
 800cbec:	461a      	mov	r2, r3
 800cbee:	2110      	movs	r1, #16
 800cbf0:	4803      	ldr	r0, [pc, #12]	; (800cc00 <MX_DriverVbusHS+0x34>)
 800cbf2:	f7f4 fcbb 	bl	800156c <HAL_GPIO_WritePin>
}
 800cbf6:	bf00      	nop
 800cbf8:	3710      	adds	r7, #16
 800cbfa:	46bd      	mov	sp, r7
 800cbfc:	bd80      	pop	{r7, pc}
 800cbfe:	bf00      	nop
 800cc00:	40020800 	.word	0x40020800

0800cc04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800cc04:	f8df d034 	ldr.w	sp, [pc, #52]	; 800cc3c <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800cc08:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800cc0a:	e003      	b.n	800cc14 <LoopCopyDataInit>

0800cc0c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800cc0c:	4b0c      	ldr	r3, [pc, #48]	; (800cc40 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800cc0e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800cc10:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800cc12:	3104      	adds	r1, #4

0800cc14 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800cc14:	480b      	ldr	r0, [pc, #44]	; (800cc44 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800cc16:	4b0c      	ldr	r3, [pc, #48]	; (800cc48 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800cc18:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800cc1a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800cc1c:	d3f6      	bcc.n	800cc0c <CopyDataInit>
  ldr  r2, =_sbss
 800cc1e:	4a0b      	ldr	r2, [pc, #44]	; (800cc4c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800cc20:	e002      	b.n	800cc28 <LoopFillZerobss>

0800cc22 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800cc22:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800cc24:	f842 3b04 	str.w	r3, [r2], #4

0800cc28 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800cc28:	4b09      	ldr	r3, [pc, #36]	; (800cc50 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800cc2a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800cc2c:	d3f9      	bcc.n	800cc22 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800cc2e:	f7ff fccb 	bl	800c5c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800cc32:	f000 f817 	bl	800cc64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800cc36:	f7fe f901 	bl	800ae3c <main>
  bx  lr    
 800cc3a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800cc3c:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 800cc40:	0800cf14 	.word	0x0800cf14
  ldr  r0, =_sdata
 800cc44:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800cc48:	200000a0 	.word	0x200000a0
  ldr  r2, =_sbss
 800cc4c:	200000a0 	.word	0x200000a0
  ldr  r3, = _ebss
 800cc50:	20008f00 	.word	0x20008f00

0800cc54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800cc54:	e7fe      	b.n	800cc54 <ADC_IRQHandler>
	...

0800cc58 <__errno>:
 800cc58:	4b01      	ldr	r3, [pc, #4]	; (800cc60 <__errno+0x8>)
 800cc5a:	6818      	ldr	r0, [r3, #0]
 800cc5c:	4770      	bx	lr
 800cc5e:	bf00      	nop
 800cc60:	2000003c 	.word	0x2000003c

0800cc64 <__libc_init_array>:
 800cc64:	b570      	push	{r4, r5, r6, lr}
 800cc66:	4e0d      	ldr	r6, [pc, #52]	; (800cc9c <__libc_init_array+0x38>)
 800cc68:	4c0d      	ldr	r4, [pc, #52]	; (800cca0 <__libc_init_array+0x3c>)
 800cc6a:	1ba4      	subs	r4, r4, r6
 800cc6c:	10a4      	asrs	r4, r4, #2
 800cc6e:	2500      	movs	r5, #0
 800cc70:	42a5      	cmp	r5, r4
 800cc72:	d109      	bne.n	800cc88 <__libc_init_array+0x24>
 800cc74:	4e0b      	ldr	r6, [pc, #44]	; (800cca4 <__libc_init_array+0x40>)
 800cc76:	4c0c      	ldr	r4, [pc, #48]	; (800cca8 <__libc_init_array+0x44>)
 800cc78:	f000 f8f6 	bl	800ce68 <_init>
 800cc7c:	1ba4      	subs	r4, r4, r6
 800cc7e:	10a4      	asrs	r4, r4, #2
 800cc80:	2500      	movs	r5, #0
 800cc82:	42a5      	cmp	r5, r4
 800cc84:	d105      	bne.n	800cc92 <__libc_init_array+0x2e>
 800cc86:	bd70      	pop	{r4, r5, r6, pc}
 800cc88:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800cc8c:	4798      	blx	r3
 800cc8e:	3501      	adds	r5, #1
 800cc90:	e7ee      	b.n	800cc70 <__libc_init_array+0xc>
 800cc92:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800cc96:	4798      	blx	r3
 800cc98:	3501      	adds	r5, #1
 800cc9a:	e7f2      	b.n	800cc82 <__libc_init_array+0x1e>
 800cc9c:	0800cf0c 	.word	0x0800cf0c
 800cca0:	0800cf0c 	.word	0x0800cf0c
 800cca4:	0800cf0c 	.word	0x0800cf0c
 800cca8:	0800cf10 	.word	0x0800cf10

0800ccac <malloc>:
 800ccac:	4b02      	ldr	r3, [pc, #8]	; (800ccb8 <malloc+0xc>)
 800ccae:	4601      	mov	r1, r0
 800ccb0:	6818      	ldr	r0, [r3, #0]
 800ccb2:	f000 b86d 	b.w	800cd90 <_malloc_r>
 800ccb6:	bf00      	nop
 800ccb8:	2000003c 	.word	0x2000003c

0800ccbc <free>:
 800ccbc:	4b02      	ldr	r3, [pc, #8]	; (800ccc8 <free+0xc>)
 800ccbe:	4601      	mov	r1, r0
 800ccc0:	6818      	ldr	r0, [r3, #0]
 800ccc2:	f000 b817 	b.w	800ccf4 <_free_r>
 800ccc6:	bf00      	nop
 800ccc8:	2000003c 	.word	0x2000003c

0800cccc <memcpy>:
 800cccc:	b510      	push	{r4, lr}
 800ccce:	1e43      	subs	r3, r0, #1
 800ccd0:	440a      	add	r2, r1
 800ccd2:	4291      	cmp	r1, r2
 800ccd4:	d100      	bne.n	800ccd8 <memcpy+0xc>
 800ccd6:	bd10      	pop	{r4, pc}
 800ccd8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ccdc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cce0:	e7f7      	b.n	800ccd2 <memcpy+0x6>

0800cce2 <memset>:
 800cce2:	4402      	add	r2, r0
 800cce4:	4603      	mov	r3, r0
 800cce6:	4293      	cmp	r3, r2
 800cce8:	d100      	bne.n	800ccec <memset+0xa>
 800ccea:	4770      	bx	lr
 800ccec:	f803 1b01 	strb.w	r1, [r3], #1
 800ccf0:	e7f9      	b.n	800cce6 <memset+0x4>
	...

0800ccf4 <_free_r>:
 800ccf4:	b538      	push	{r3, r4, r5, lr}
 800ccf6:	4605      	mov	r5, r0
 800ccf8:	2900      	cmp	r1, #0
 800ccfa:	d045      	beq.n	800cd88 <_free_r+0x94>
 800ccfc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cd00:	1f0c      	subs	r4, r1, #4
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	bfb8      	it	lt
 800cd06:	18e4      	addlt	r4, r4, r3
 800cd08:	f000 f8ac 	bl	800ce64 <__malloc_lock>
 800cd0c:	4a1f      	ldr	r2, [pc, #124]	; (800cd8c <_free_r+0x98>)
 800cd0e:	6813      	ldr	r3, [r2, #0]
 800cd10:	4610      	mov	r0, r2
 800cd12:	b933      	cbnz	r3, 800cd22 <_free_r+0x2e>
 800cd14:	6063      	str	r3, [r4, #4]
 800cd16:	6014      	str	r4, [r2, #0]
 800cd18:	4628      	mov	r0, r5
 800cd1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cd1e:	f000 b8a2 	b.w	800ce66 <__malloc_unlock>
 800cd22:	42a3      	cmp	r3, r4
 800cd24:	d90c      	bls.n	800cd40 <_free_r+0x4c>
 800cd26:	6821      	ldr	r1, [r4, #0]
 800cd28:	1862      	adds	r2, r4, r1
 800cd2a:	4293      	cmp	r3, r2
 800cd2c:	bf04      	itt	eq
 800cd2e:	681a      	ldreq	r2, [r3, #0]
 800cd30:	685b      	ldreq	r3, [r3, #4]
 800cd32:	6063      	str	r3, [r4, #4]
 800cd34:	bf04      	itt	eq
 800cd36:	1852      	addeq	r2, r2, r1
 800cd38:	6022      	streq	r2, [r4, #0]
 800cd3a:	6004      	str	r4, [r0, #0]
 800cd3c:	e7ec      	b.n	800cd18 <_free_r+0x24>
 800cd3e:	4613      	mov	r3, r2
 800cd40:	685a      	ldr	r2, [r3, #4]
 800cd42:	b10a      	cbz	r2, 800cd48 <_free_r+0x54>
 800cd44:	42a2      	cmp	r2, r4
 800cd46:	d9fa      	bls.n	800cd3e <_free_r+0x4a>
 800cd48:	6819      	ldr	r1, [r3, #0]
 800cd4a:	1858      	adds	r0, r3, r1
 800cd4c:	42a0      	cmp	r0, r4
 800cd4e:	d10b      	bne.n	800cd68 <_free_r+0x74>
 800cd50:	6820      	ldr	r0, [r4, #0]
 800cd52:	4401      	add	r1, r0
 800cd54:	1858      	adds	r0, r3, r1
 800cd56:	4282      	cmp	r2, r0
 800cd58:	6019      	str	r1, [r3, #0]
 800cd5a:	d1dd      	bne.n	800cd18 <_free_r+0x24>
 800cd5c:	6810      	ldr	r0, [r2, #0]
 800cd5e:	6852      	ldr	r2, [r2, #4]
 800cd60:	605a      	str	r2, [r3, #4]
 800cd62:	4401      	add	r1, r0
 800cd64:	6019      	str	r1, [r3, #0]
 800cd66:	e7d7      	b.n	800cd18 <_free_r+0x24>
 800cd68:	d902      	bls.n	800cd70 <_free_r+0x7c>
 800cd6a:	230c      	movs	r3, #12
 800cd6c:	602b      	str	r3, [r5, #0]
 800cd6e:	e7d3      	b.n	800cd18 <_free_r+0x24>
 800cd70:	6820      	ldr	r0, [r4, #0]
 800cd72:	1821      	adds	r1, r4, r0
 800cd74:	428a      	cmp	r2, r1
 800cd76:	bf04      	itt	eq
 800cd78:	6811      	ldreq	r1, [r2, #0]
 800cd7a:	6852      	ldreq	r2, [r2, #4]
 800cd7c:	6062      	str	r2, [r4, #4]
 800cd7e:	bf04      	itt	eq
 800cd80:	1809      	addeq	r1, r1, r0
 800cd82:	6021      	streq	r1, [r4, #0]
 800cd84:	605c      	str	r4, [r3, #4]
 800cd86:	e7c7      	b.n	800cd18 <_free_r+0x24>
 800cd88:	bd38      	pop	{r3, r4, r5, pc}
 800cd8a:	bf00      	nop
 800cd8c:	20008470 	.word	0x20008470

0800cd90 <_malloc_r>:
 800cd90:	b570      	push	{r4, r5, r6, lr}
 800cd92:	1ccd      	adds	r5, r1, #3
 800cd94:	f025 0503 	bic.w	r5, r5, #3
 800cd98:	3508      	adds	r5, #8
 800cd9a:	2d0c      	cmp	r5, #12
 800cd9c:	bf38      	it	cc
 800cd9e:	250c      	movcc	r5, #12
 800cda0:	2d00      	cmp	r5, #0
 800cda2:	4606      	mov	r6, r0
 800cda4:	db01      	blt.n	800cdaa <_malloc_r+0x1a>
 800cda6:	42a9      	cmp	r1, r5
 800cda8:	d903      	bls.n	800cdb2 <_malloc_r+0x22>
 800cdaa:	230c      	movs	r3, #12
 800cdac:	6033      	str	r3, [r6, #0]
 800cdae:	2000      	movs	r0, #0
 800cdb0:	bd70      	pop	{r4, r5, r6, pc}
 800cdb2:	f000 f857 	bl	800ce64 <__malloc_lock>
 800cdb6:	4a21      	ldr	r2, [pc, #132]	; (800ce3c <_malloc_r+0xac>)
 800cdb8:	6814      	ldr	r4, [r2, #0]
 800cdba:	4621      	mov	r1, r4
 800cdbc:	b991      	cbnz	r1, 800cde4 <_malloc_r+0x54>
 800cdbe:	4c20      	ldr	r4, [pc, #128]	; (800ce40 <_malloc_r+0xb0>)
 800cdc0:	6823      	ldr	r3, [r4, #0]
 800cdc2:	b91b      	cbnz	r3, 800cdcc <_malloc_r+0x3c>
 800cdc4:	4630      	mov	r0, r6
 800cdc6:	f000 f83d 	bl	800ce44 <_sbrk_r>
 800cdca:	6020      	str	r0, [r4, #0]
 800cdcc:	4629      	mov	r1, r5
 800cdce:	4630      	mov	r0, r6
 800cdd0:	f000 f838 	bl	800ce44 <_sbrk_r>
 800cdd4:	1c43      	adds	r3, r0, #1
 800cdd6:	d124      	bne.n	800ce22 <_malloc_r+0x92>
 800cdd8:	230c      	movs	r3, #12
 800cdda:	6033      	str	r3, [r6, #0]
 800cddc:	4630      	mov	r0, r6
 800cdde:	f000 f842 	bl	800ce66 <__malloc_unlock>
 800cde2:	e7e4      	b.n	800cdae <_malloc_r+0x1e>
 800cde4:	680b      	ldr	r3, [r1, #0]
 800cde6:	1b5b      	subs	r3, r3, r5
 800cde8:	d418      	bmi.n	800ce1c <_malloc_r+0x8c>
 800cdea:	2b0b      	cmp	r3, #11
 800cdec:	d90f      	bls.n	800ce0e <_malloc_r+0x7e>
 800cdee:	600b      	str	r3, [r1, #0]
 800cdf0:	50cd      	str	r5, [r1, r3]
 800cdf2:	18cc      	adds	r4, r1, r3
 800cdf4:	4630      	mov	r0, r6
 800cdf6:	f000 f836 	bl	800ce66 <__malloc_unlock>
 800cdfa:	f104 000b 	add.w	r0, r4, #11
 800cdfe:	1d23      	adds	r3, r4, #4
 800ce00:	f020 0007 	bic.w	r0, r0, #7
 800ce04:	1ac3      	subs	r3, r0, r3
 800ce06:	d0d3      	beq.n	800cdb0 <_malloc_r+0x20>
 800ce08:	425a      	negs	r2, r3
 800ce0a:	50e2      	str	r2, [r4, r3]
 800ce0c:	e7d0      	b.n	800cdb0 <_malloc_r+0x20>
 800ce0e:	428c      	cmp	r4, r1
 800ce10:	684b      	ldr	r3, [r1, #4]
 800ce12:	bf16      	itet	ne
 800ce14:	6063      	strne	r3, [r4, #4]
 800ce16:	6013      	streq	r3, [r2, #0]
 800ce18:	460c      	movne	r4, r1
 800ce1a:	e7eb      	b.n	800cdf4 <_malloc_r+0x64>
 800ce1c:	460c      	mov	r4, r1
 800ce1e:	6849      	ldr	r1, [r1, #4]
 800ce20:	e7cc      	b.n	800cdbc <_malloc_r+0x2c>
 800ce22:	1cc4      	adds	r4, r0, #3
 800ce24:	f024 0403 	bic.w	r4, r4, #3
 800ce28:	42a0      	cmp	r0, r4
 800ce2a:	d005      	beq.n	800ce38 <_malloc_r+0xa8>
 800ce2c:	1a21      	subs	r1, r4, r0
 800ce2e:	4630      	mov	r0, r6
 800ce30:	f000 f808 	bl	800ce44 <_sbrk_r>
 800ce34:	3001      	adds	r0, #1
 800ce36:	d0cf      	beq.n	800cdd8 <_malloc_r+0x48>
 800ce38:	6025      	str	r5, [r4, #0]
 800ce3a:	e7db      	b.n	800cdf4 <_malloc_r+0x64>
 800ce3c:	20008470 	.word	0x20008470
 800ce40:	20008474 	.word	0x20008474

0800ce44 <_sbrk_r>:
 800ce44:	b538      	push	{r3, r4, r5, lr}
 800ce46:	4c06      	ldr	r4, [pc, #24]	; (800ce60 <_sbrk_r+0x1c>)
 800ce48:	2300      	movs	r3, #0
 800ce4a:	4605      	mov	r5, r0
 800ce4c:	4608      	mov	r0, r1
 800ce4e:	6023      	str	r3, [r4, #0]
 800ce50:	f7ff fb8e 	bl	800c570 <_sbrk>
 800ce54:	1c43      	adds	r3, r0, #1
 800ce56:	d102      	bne.n	800ce5e <_sbrk_r+0x1a>
 800ce58:	6823      	ldr	r3, [r4, #0]
 800ce5a:	b103      	cbz	r3, 800ce5e <_sbrk_r+0x1a>
 800ce5c:	602b      	str	r3, [r5, #0]
 800ce5e:	bd38      	pop	{r3, r4, r5, pc}
 800ce60:	20008efc 	.word	0x20008efc

0800ce64 <__malloc_lock>:
 800ce64:	4770      	bx	lr

0800ce66 <__malloc_unlock>:
 800ce66:	4770      	bx	lr

0800ce68 <_init>:
 800ce68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce6a:	bf00      	nop
 800ce6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce6e:	bc08      	pop	{r3}
 800ce70:	469e      	mov	lr, r3
 800ce72:	4770      	bx	lr

0800ce74 <_fini>:
 800ce74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce76:	bf00      	nop
 800ce78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce7a:	bc08      	pop	{r3}
 800ce7c:	469e      	mov	lr, r3
 800ce7e:	4770      	bx	lr
